import{r as a,a as o,b as s,d as t,w as c,F as u,e as n,c as l,o as i}from"./app.a489c551.js";import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";const k={},d=s("h1",{id:"\u6807\u51C6\u8F93\u5165\u4E0E\u8F93\u51FA",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#\u6807\u51C6\u8F93\u5165\u4E0E\u8F93\u51FA","aria-hidden":"true"},"#"),n(" \u6807\u51C6\u8F93\u5165\u4E0E\u8F93\u51FA")],-1),m=n("\u56DE\u987E\u4E00\u4E0B\u6211\u4EEC\u5199\u7684\u7B2C\u4E00\u4E2A Rust \u7A0B\u5E8F\u5C31\u662F\u5E26\u526F\u4F5C\u7528\u7684\uFF0C\u5176\u526F\u4F5C\u7528\u5C31\u662F\u5411\u6807\u51C6\u8F93\u51FA(stdout)\uFF0C\u901A\u5E38\u662F\u7EC8\u7AEF\u6216\u5C4F\u5E55\uFF0C\u8F93\u51FA\u4E86 Hello, World! \u8BA9\u5C4F\u5E55\u4E0A\u8FD9\u51E0\u4E2A\u5B57\u7B26\u7684\u5730\u65B9\u70B9\u4EAE\u8D77\u6765\u3002"),b=s("code",null,"println!",-1),g=n(" \u5B8F\u662F\u6700\u5E38\u89C1\u7684\u8F93\u51FA\uFF0C\u7528\u5B8F\u6765\u505A\u8F93\u51FA\u7684\u8FD8\u6709 "),_=s("code",null,"print!",-1),f=n("\uFF0C\u4E24\u8005\u90FD\u662F\u5411\u6807\u51C6\u8F93\u51FA(stdout)\u8F93\u51FA\uFF0C\u4E24\u8005\u7684\u533A\u522B\u4E5F\u4E00\u773C\u5C31\u80FD\u770B\u51FA\u3002\u81F3\u4E8E\u683C\u5F0F\u5316\u8F93\u51FA\uFF0C"),y=n("\u57FA\u7840\u8FD0\u7B97\u7B26\u548C\u5B57\u7B26\u4E32\u683C\u5F0F\u5316\u5C0F\u8282"),h=n("\u6709\u8BE6\u7EC6\u8BF4\u660E\uFF0C\u8FD9\u91CC\u5C31\u4E0D\u518D\u5570\u55E6\u4E86\u3002"),w=n("\u66F4\u901A\u7528\u7684\u6807\u51C6\u8F93\u5165\u4E0E\u8F93\u51FA\u5B9A\u4E49\u5728 "),v=s("code",null,"std::io",-1),x=n(" \u6A21\u5757\u91CC\uFF0C\u8C03\u7528 "),R=s("code",null,"std::io::stdin()",-1),q=n(" \u548C "),T=s("code",null,"std::io::stdout()",-1),E=n(" \u4E24\u4E2A\u51FD\u6570\u5206\u522B\u4F1A\u5F97\u5230\u8F93\u5165\u53E5\u67C4\u548C\u8F93\u51FA\u53E5\u67C4(\u54CE\uFF0C"),I={href:"https://zh.wikipedia.org/wiki/%E5%8F%A5%E6%9F%84",target:"_blank",rel:"noopener noreferrer"},O=n("\u53E5\u67C4"),F=n("\u8FD9\u4E2A\u8BCD\u662F\u8BA1\u7B97\u673A\u53F2\u4E0A\u6700\u83AB\u540D\u5176\u5999\u7684\u7FFB\u8BD1\u4E86)\uFF0C\u8FD9\u4E24\u4E2A\u53E5\u67C4\u9ED8\u8BA4\u4F1A\u901A\u8FC7\u4E92\u65A5\u9501\u540C\u6B65\uFF0C\u4E5F\u5C31\u662F\u8BF4\u4E0D\u8BA9\u591A\u4E2A\u8FDB\u7A0B\u540C\u65F6\u8BFB\u6216\u5199\u6807\u51C6\u8F93\u5165\u8F93\u51FA\uFF0C\u4E0D\u7136\u7684\u8BDD\u5982\u679C\u4E00\u4E2A\u8FDB\u7A0B\u8981\u5F80\u6807\u51C6\u8F93\u51FA\u753B\u9A6C\uFF0C\u4E00\u4E2A\u8FDB\u7A0B\u8981\u753B\u9A74\uFF0C\u4E24\u4E2A\u8FDB\u7A0B\u540C\u65F6\u5199\u6807\u51C6\u8F93\u51FA\u7684\u8BDD\uFF0C\u6700\u540E\u53EF\u80FD\u5C31\u7ED9\u753B\u51FA\u4E00\u5934\u9AA1\u5B50\u4E86\uFF0C\u5982\u679C\u66F4\u591A\u8FDB\u7A0B\u753B\u4E0D\u540C\u7684\u52A8\u7269\u6700\u540E\u53EF\u80FD\u5C31\u6210\u56DB\u4E0D\u50CF\u4E86\u3002\u9664\u4E86\u9690\u5F0F\u5730\u7528\u4E92\u65A5\u9501\uFF0C\u6211\u4EEC\u8FD8\u53EF\u4EE5\u663E\u5F0F\u5730\u5728\u53E5\u67C4\u4E0A\u8C03\u7528 "),C=s("code",null,".lock()",-1),S=n("\u3002\u8F93\u5165\u8F93\u51FA\u53E5\u67C4\u5B9E\u73B0\u4E86\u524D\u9762\u8BB2\u7684\u8BFB\u5199 Trait\uFF0C\u6240\u4EE5\u662F reader/writer\uFF0C\u5C31\u53EF\u4EE5\u8C03\u63A5\u53E3\u6765\u8BFB\u5199\u6807\u51C6\u8F93\u5165\u4E0E\u8F93\u51FA\u4E86\u3002\u4E3E\u51E0\u4E2A\u6817\u5B50\uFF1A"),L=l(`<div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">read_from_stdin</span><span class="token punctuation">(</span>buf<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">try</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token namespace">io<span class="token punctuation">::</span></span><span class="token function">stdin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read_line</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">write_to_stdout</span><span class="token punctuation">(</span>buf<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">try</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token namespace">io<span class="token punctuation">::</span></span><span class="token function">stdout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u53EF\u4EE5\u770B\u5230\u4E0A\u9762\u7684\u4F8B\u5B50\u90FD\u662F\u8FD4\u56DE\u4E86 <code>io::Result&lt;()&gt;</code> \u7C7B\u578B\uFF0C\u8FD9\u4E0D\u662F\u5076\u7136\uFF0C\u800C\u662F IO \u64CD\u4F5C\u901A\u7528\u7684\u5199\u6CD5\uFF0C\u56E0\u4E3A IO \u64CD\u4F5C\u662F\u7A0B\u5E8F\u4E0E\u5916\u754C\u6253\u4EA4\u9053\uFF0C\u6240\u4EE5\u90FD\u662F\u6709\u53EF\u80FD\u5931\u8D25\u7684\uFF0C\u7528 <code>io::Result&lt;T&gt;</code> \u628A\u7ED3\u679C\u5305\u8D77\u6765\uFF0C<code>io::Result&lt;T&gt;</code> \u53EA\u662F\u6807\u51C6 <code>Result&lt;T,E&gt;</code> \u4E2D <code>E</code> \u56FA\u5B9A\u4E3A <code>io::Error</code> \u540E\u7C7B\u578B\u7684\u522B\u540D\uFF0C\u800C\u4F5C\u4E3A\u6709\u526F\u4F5C\u7528\u7684\u64CD\u4F5C\u6211\u4EEC\u4E00\u822C\u662F\u4E0D\u7528\u5173\u5FC3\u5176\u8FD4\u56DE\u503C\u7684\uFF0C\u56E0\u4E3A\u6267\u884C\u8FD9\u7C7B\u51FD\u6570\u5176\u771F\u6B63\u7684\u610F\u4E49\u90FD\u4F53\u73B0\u5728\u526F\u4F5C\u7528\u4E0A\u9762\u4E86\uFF0C\u6240\u4EE5\u8FD4\u56DE\u503C\u53EA\u662F\u7528\u6765\u8868\u793A\u662F\u5426\u6210\u529F\u6267\u884C\uFF0C\u800C\u672C\u8EAB <code>Result</code> \u7C7B\u578B\u672C\u8EAB\u5DF2\u7ECF\u53EF\u4EE5\u8868\u793A\u6267\u884C\u72B6\u6001\u4E86\uFF0C\u91CC\u9762\u7684 <code>T</code> \u662F\u4EC0\u4E48\u5219\u65E0\u5173\u7D27\u8981\uFF0C\u65E2\u7136 <code>T</code> \u6CA1\u4EC0\u4E48\u610F\u4E49\uFF0C\u90A3\u6211\u4EEC\u5C31\u9009\u6CA1\u4EC0\u4E48\u610F\u4E49\u7684 <code>unit</code> \u7C7B\u578B\u597D\u4E86\uFF0C\u6240\u4EE5 IO \u64CD\u4F5C\u57FA\u672C\u4E0A\u90FD\u662F\u4F7F\u7528 <code>io::Result&lt;()&gt;</code>\u3002</p><p>\u53E6\u5916\u6709\u4E00\u4E2A\u5730\u65B9\u9700\u8981\u6CE8\u610F\u7684\u662F\u7531\u4E8E IO \u64CD\u4F5C\u53EF\u80FD\u4F1A\u5931\u8D25\u6240\u4EE5\u4E00\u822C\u90FD\u662F\u548C <code>try!</code> \u5B8F\u4E00\u8D77\u4F7F\u7528\u7684\uFF0C\u4F46\u662F <code>try!</code> \u5728\u9047\u5230\u9519\u8BEF\u65F6\u4F1A\u628A\u9519\u8BEF <code>return</code> \u51FA\u53BB\u7684\uFF0C\u6240\u4EE5\u9700\u8981\u4FDD\u8BC1\u5305\u542B <code>try!</code> \u8BED\u53E5\u7684\u51FD\u6570\u5176\u8FD4\u56DE\u7C7B\u578B\u662F <code>io::Result&lt;T&gt;</code>\uFF0C\u5F88\u591A\u65B0\u624B\u6587\u6863\u6CA1\u4ED4\u7EC6\u770B\u5C31\u76F4\u63A5\u67E5 std api \u6587\u6863\uFF0C\u7136\u540E\u7167\u7740 api \u6587\u6863\u91CC\u9762\u7684\u4F8B\u5B50\u628A\u5E26 IO \u64CD\u4F5C\u7684 <code>try!</code> \u5B8F\u5199\u5230\u4E86 <code>main</code> \u51FD\u6570\u91CC\u3002\u7ED3\u679C\u4E00\u7F16\u8BD1\uFF0C\u64E6\uFF0C\u7167\u7740\u6587\u6863\u5199\u90FD\u7F16\u8BD1\u4E0D\u8FC7\uFF0C\u4EC0\u4E48\u70C2\u6587\u6863\u3002\u5176\u5B9E\u70B9\u4E00\u4E0B api \u6587\u6863\u4E0A\u9762\u7684\u8FD0\u884C\u6309\u94AE\u5C31\u4F1A\u53D1\u73B0\u6587\u6863\u91CC\u9762\u7684\u4F8B\u5B50\u90FD\u662F\u628A <code>try!</code> \u653E\u5728\u53E6\u4E00\u4E2A\u51FD\u6570\u91CC\u9762\u7684\uFF0C\u56E0\u4E3A <code>main</code> \u51FD\u6570\u662F\u6CA1\u6709\u8FD4\u56DE\u503C\u7684\uFF0C\u800C <code>try!</code> \u4F1A\u8FD4\u56DE <code>io::Result&lt;T&gt;</code>\uFF0C\u6240\u4EE5\u76F4\u63A5\u628A <code>try!</code> \u653E <code>main</code> \u51FD\u6570\u91CC\u9762\u80AF\u5B9A\u8981\u8DEA\u3002\u6BD4\u5982\u4E0B\u9762\u7684\u4ECE\u6807\u51C6\u8F93\u5165\u8BFB\u53D6\u4E00\u884C\u8F93\u5165\uFF0C\u7531\u4E8E\u628A <code>try!</code> \u653E\u5728\u4E86 main \u51FD\u6570\u91CC\uFF0C\u6240\u4EE5\u662F\u7F16\u8BD1\u4E0D\u8FC7\u7684\u3002</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> <span class="token keyword">mut</span> input <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">try</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token namespace">io<span class="token punctuation">::</span></span><span class="token function">stdin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read_line</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;You typed: {}&quot;</span><span class="token punctuation">,</span> input<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>\u8FD9\u91CC\u6709\u4E00\u4EF6\u4E8B\u9700\u8981\u4E3B\u8981\u7684\u662F Rust \u91CC\u9762\u6CA1\u6709\u529E\u6CD5\u4ECE\u952E\u76D8\u83B7\u53D6\u4E00\u4E2A\u6570\u5B57\u7C7B\u578B\u7684\u503C\u3002\u5B9E\u9645\u4E0A\u50CF C \u8FD9\u6837\u7684\u8BED\u8A00\u4E5F\u4E0D\u662F\u76F4\u63A5\u83B7\u53D6\u4E86\u6570\u5B57\u7C7B\u578B\uFF0C\u5B83\u53EA\u4E0D\u8FC7\u662F\u505A\u4E86\u4E00\u79CD\u8F6C\u6362\u3002\u90A3\u4E48\u6211\u4EEC\u5982\u679C\u60F3\u8981\u4ECE\u952E\u76D8\u83B7\u53D6\u4E00\u4E2A\u6570\u5B57\u7C7B\u578B\u5E94\u8BE5\u600E\u4E48\u505A\u5462\uFF1F</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> <span class="token keyword">mut</span> input <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token function">stdin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">read_line</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> input<span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to read line&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u8FD9\u91CC\u7B49\u6548\u7684\u5199\u6CD5\u662F\uFF1A</span>
    <span class="token comment">// let num: i32 = input.trim().parse().unwrap(); </span>
	<span class="token keyword">let</span> num <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;\u60A8\u8F93\u5165\u7684\u6570\u5B57\u662F\uFF1A{}&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>\u5982\u679C\u6709\u5F88\u591A\u5730\u65B9\u90FD\u9700\u8981\u8F93\u5165\u6570\u5B57\u53EF\u4EE5\u81EA\u884C\u7F16\u5199\u4E00\u4E2A <code>numin</code> \u5B8F:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token macro property">macro_rules!</span> numin <span class="token punctuation">{</span>
	  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	      <span class="token punctuation">{</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> input <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	          <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token function">stdin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	              <span class="token punctuation">.</span><span class="token function">read_line</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> input<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to read line&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	          input<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>\u4E8E\u662F\u4E0A\u9762\u7684\u7A0B\u5E8F\u53EF\u4EE5\u88AB\u6539\u5199\u6210\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>
fn main() {
    let num: i32 = numin!();
	println!(&quot;\u60A8\u8F93\u5165\u7684\u6570\u5B57\u662F\uFF1A{}&quot;, num);
}
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u4E0D\u8FC7\u5982\u679C\u7528\u6237\u8F93\u5165\u7684\u4E0D\u662F\u6570\u5B57\uFF0C\u90A3\u4E48\u5C31\u4F1A\u5BFC\u81F4\u9519\u8BEF\u3002\u8FD9\u4E00\u70B9\u548C C \u91CC\u9762\u662F\u975E\u5E38\u76F8\u4F3C\u7684\u3002\u5F53\u7136\u60A8\u53EF\u4EE5\u628A\u7A0B\u5E8F\u5199\u5F97\u518D\u590D\u6742\u4E00\u70B9\u513F\u6765\u4FDD\u8BC1\u7528\u6237\u8F93\u5165\u7684\u4E00\u5B9A\u662F\u6570\u5B57\u3002\u4E0D\u8FC7\u8FD9\u4E9B\u5C31\u4E0D\u662F\u6211\u4EEC\u8FD9\u4E00\u8282\u8981\u8BA8\u8BBA\u7684\u5185\u5BB9\u4E86\u3002</p><p>\u8FD8\u6709\u4E00\u70B9\u4E00\u4E9B\u4ECE\u5176\u5B83\u8BED\u8A00\u8F6C\u8FC7\u6765\u7684\u7A0B\u5E8F\u5458\u53EF\u80FD\u4F1A\u7591\u60D1\u7684\u662F\uFF0C\u5982\u4F55\u4ECE\u547D\u4EE4\u884C\u63A5\u53D7\u8F93\u5165\u53C2\u6570\uFF0C\u56E0\u4E3A C \u91CC\u9762\u7684 main \u51FD\u6570\u53EF\u4EE5\u5E26\u53C2\u6570\u6240\u4EE5\u53EF\u4EE5\u76F4\u63A5\u4ECE main \u51FD\u6570\u7684\u53C2\u6570\u91CC\u83B7\u53D6\u8F93\u5165\u53C2\u6570\u3002\u4F46\u5176\u5B9E\u8FD9\u7C7B\u8F93\u5165\u4E0E\u6211\u4EEC\u8FD9\u91CC\u8BB2\u7684\u6709\u5F88\u5927\u7684\u5DEE\u522B\u7684\uFF0C\u5B83\u5728 Rust \u91CC\u9762\u88AB\u5F52\u4E3A\u73AF\u5883\u53D8\u91CF\uFF0C\u53EF\u4EE5\u901A\u8FC7 <code>std::env::args()</code> \u83B7\u53D6\uFF0C\u8FD9\u4E2A\u51FD\u6570\u8FD4\u56DE\u4E00\u4E2A <code>Args</code> \u8FED\u4EE3\u5668\uFF0C\u5176\u4E2D\u7B2C\u4E00\u4E2A\u5C31\u662F\u7A0B\u5E8F\u540D\uFF0C\u540E\u9762\u7684\u90FD\u662F\u8F93\u5165\u7ED9\u7A0B\u5E8F\u7684\u547D\u4EE4\u884C\u53C2\u6570\u3002</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>env<span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> arg <span class="token keyword">in</span> args <span class="token punctuation">{</span>
		<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>\u5C06\u4E0A\u9762\u7684\u7A0B\u5E8F\u5B58\u4E3A <em>args.rs</em> \u7136\u540E\u7F16\u8BD1\u6267\u884C\uFF0C\u7ED3\u679C\u5982\u4E0B</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ rustc args.rs
$ ./args a b c
./args
a
b
c
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,16);function N(V,B){const p=a("RouterLink"),e=a("ExternalLinkIcon");return i(),o(u,null,[d,s("p",null,[m,b,g,_,f,t(p,{to:"/RustPrimer/type/operator-and-formatting.html"},{default:c(()=>[y]),_:1}),h]),s("p",null,[w,v,x,R,q,T,E,s("a",I,[O,t(e)]),F,C,S]),L],64)}var z=r(k,[["render",N],["__file","io.html.vue"]]);export{z as default};
