import{r as t,a as o,b as n,d as e,F as c,c as a,e as s,o as l}from"./app.a489c551.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";const r={},i=a(`<h1 id="rust-web-\u5F00\u53D1" tabindex="-1"><a class="header-anchor" href="#rust-web-\u5F00\u53D1" aria-hidden="true">#</a> rust web \u5F00\u53D1</h1><p>rust\u65E2\u7136\u662F\u7CFB\u7EDF\u7EA7\u7684\u7F16\u7A0B\u8BED\u8A00\uFF0C\u6240\u4EE5\u5F53\u7136\u4E5F\u80FD\u7528\u6765\u5F00\u53D1 web,\u4E0D\u8FC7\u60F3\u6211\u8FD9\u6837\u51E1\u592B\u4FD7\u5B50\uFF0C\u80AF\u5B9A\u4E0D\u80FD\u4ECE\u5934\u81EA\u5DF1\u5199\u4E00\u4E2A web \u670D\u52A1\u5668\uFF0C\u80AF\u5B9A\u8981\u4F9D\u8D56\u5DF2\u7ECF\u5B58\u5728\u7684 rust web\u5F00\u53D1\u6846\u67B6\u6765\u5B8C\u6210 web \u5F00\u53D1\u3002</p><p>rust\u76EE\u524D\u6BD4\u8F83\u6709\u540D\u7684\u6846\u67B6\u662Firon\u548Cnickel\uFF0C\u6211\u4EEC\u4E24\u4E2A\u90FD\u5199\u4E00\u4E0B\u7B80\u5355\u7684\u4F7F\u7528\u6559\u7A0B\u3002</p><p>##iron</p><p>\u63A5\u4E0A\u4E00\u7BC7\uFF0C\u4F7F\u7528cargo\u83B7\u53D6\u7B2C\u4E09\u65B9\u5E93\u3002<code>cargo new mysite --bin</code></p><p>\u5728cargo.toml\u4E2D\u6DFB\u52A0iron\u7684\u4F9D\u8D56\uFF0C</p><div class="language-toml ext-toml line-numbers-mode"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span>
<span class="token key property">iron</span> <span class="token punctuation">=</span> <span class="token string">&quot;*&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>\u7136\u540Ebuild\u5C06\u4F9D\u8D56\u4E0B\u8F7D\u5230\u672C\u5730 <code>cargo build</code></p><p>\u5982\u679C\u62A5ssl\u9519\u8BEF\uFF0C\u90A3\u53EF\u80FD\u4F60\u9700\u8981\u5B89\u88C5linux\u7684ssl\u5F00\u53D1\u5E93\u3002</p><p>\u9996\u5148\u8FD8\u662F\u4ECE hello world \u5F00\u59CB\u5427,\u7EE7\u7EED\u6284\u88AD\u5B98\u65B9\u7684\u4F8B\u5B50\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">extern</span> <span class="token keyword">crate</span> <span class="token module-declaration namespace">iron</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token namespace">iron<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">iron<span class="token punctuation">::</span></span>status<span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Iron</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Request</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Response</span><span class="token punctuation">::</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token namespace">status<span class="token punctuation">::</span></span><span class="token class-name">Ok</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">http</span><span class="token punctuation">(</span><span class="token string">&quot;localhost:3000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>\u7136\u540E\u8FD0\u884C</p><p><code>cargo run</code></p><p>\u4F7F\u7528curl\u76F4\u63A5\u5C31\u53EF\u4EE5\u8BBF\u95EE\u4F60\u7684\u7F51\u7AD9\u4E86\u3002</p><p><code>curl localhost:3000</code></p><p><code>Hello World!</code></p><p>\u4ED4\u7EC6\u4E00\u770B\uFF0C\u53D1\u73B0\u8FD9\u4E2A\u4F8B\u5B50\u5F88\u65E0\u5398\u5934\u554A\uFF0C\u5BF9\u4E8E\u4E60\u60EF\u4E86\u5199python\u7684\u6211\u6765\u8BF4\uFF0C\u786E\u5B9E\u4E0D\u4E60\u60EF\u3002 \u7B80\u5355\u70B9\u770B\uFF1A</p>`,17),k=n("code",null,'iron::new().http("localhost:3000").unwrap()',-1),m=s(" \u8FD9\u53E5\u662F\u670D\u52A1\u5668\u7684\u57FA\u672C\u7684\u5B9A\u4E49\uFF0Cnew\u5185\u90E8\u662F\u4E00\u4E2A"),d={href:"https://doc.rust-lang.org/book/closures.html",target:"_blank",rel:"noopener noreferrer"},b=s("rust lambda \u8868\u8FBE\u5F0F"),g=a(`<div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> plus_one <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">plus_one</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u5177\u4F53\u7684\u600E\u4E48\u4F7F\u7528 \uFF0C\u53EF\u4EE5\u6682\u65F6\u4E0D\u7528\u7406\u4F1A\uFF0C\u56E0\u4E3A\u4F60\u53EA\u8981\u77E5\u9053\u5982\u4F55\u5B8C\u6210web\uFF0C\u56E0\u4E3A\u6211\u4E5F\u4E0D\u4F1A\u3002\u3002 \u7ED3\u5408\u4E4B\u524D\u4E00\u7AE0\u8282\u7684json\u5904\u7406\uFF0C\u6211\u4EEC\u6765\u770B\u770Bweb\u63A5\u53E3\u600E\u4E48\u8FD4\u56DEjson,\u5F53\u7136\u4E5F\u8981 rustc_serialize \u653E\u5230 cargo.toml \u4E2D</p>`,2),f=s("\u4E0B\u9762\u7684\u4EE3\u7801\u76F4\u63A5\u53C2\u8003\u5F00\u6E90\u4EE3\u7801"),y={href:"https://github.com/brson/httptest#lets-make-a-web-service-and-client-in-rust",target:"_blank",rel:"noopener noreferrer"},_=s("\u5730\u5740"),w=a(`<div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">extern</span> <span class="token keyword">crate</span> <span class="token module-declaration namespace">iron</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">crate</span> <span class="token module-declaration namespace">rustc_serialize</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token namespace">iron<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">iron<span class="token punctuation">::</span></span>status<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rustc_serialize<span class="token punctuation">::</span></span>json<span class="token punctuation">;</span>

<span class="token attribute attr-name">#[derive(RustcEncodable)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Greeting</span> <span class="token punctuation">{</span>
    msg<span class="token punctuation">:</span> <span class="token class-name">String</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">hello_world</span><span class="token punctuation">(</span>_<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Request</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">IronResult</span><span class="token operator">&lt;</span><span class="token class-name">Response</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> greeting <span class="token operator">=</span> <span class="token class-name">Greeting</span> <span class="token punctuation">{</span> msg<span class="token punctuation">:</span> <span class="token string">&quot;Hello, World&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> payload <span class="token operator">=</span> <span class="token namespace">json<span class="token punctuation">::</span></span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>greeting<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Response</span><span class="token punctuation">::</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token namespace">status<span class="token punctuation">::</span></span><span class="token class-name">Ok</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">Iron</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>hello_world<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">http</span><span class="token punctuation">(</span><span class="token string">&quot;localhost:3000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;On 3000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>\u6267\u884C cargo run \u4F7F\u7528 curl \u6D4B\u8BD5\u7ED3\u679C:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>curl localhost:3000
{&quot;msg&quot;:&quot;Hello, World&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>\u5F53\u7136\u53EF\u4EE5\u53EF\u4EE5\u5B9E\u73B0\u66F4\u591A\u7684\u4E1A\u52A1\u9700\u6C42\uFF0C\u901A\u8FC7\u63A7\u5236\u81EA\u5DF1\u7684json\u3002</p><p>\u65E2\u7136\u6709\u4E86json\u4E86\uFF0C\u5982\u679C\u8981\u591A\u4E2A\u8DEF\u7531\u4EC0\u4E48\u7684\uFF0C\u5C82\u4E0D\u662F\u5B8C\u86CB\u4E86\uFF0C\u6240\u4EE5\u4E0D\u53EF\u80FD\u8FD9\u6837\u7684\uFF0C\u6211\u4EEC\u9700\u8981\u8003\u8651\u4E00\u4E0B\u600E\u4E48\u5B9E\u73B0\u8DEF\u7531\u7684\u5B9A\u5236</p><p>\u4E0D\u8BF4\u8BDD\u76F4\u63A5\u4E0A\u4EE3\u7801\uFF0C\u540C\u4E00\u6837\u8981\u5728\u4F60\u7684cargo.toml\u6587\u4EF6\u4E2D\u6DFB\u52A0\u5BF9router\u7684\u4F9D\u8D56</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">extern</span> <span class="token keyword">crate</span> <span class="token module-declaration namespace">iron</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">crate</span> <span class="token module-declaration namespace">router</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">crate</span> <span class="token module-declaration namespace">rustc_serialize</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token namespace">iron<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">iron<span class="token punctuation">::</span></span>status<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">router<span class="token punctuation">::</span></span><span class="token class-name">Router</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rustc_serialize<span class="token punctuation">::</span></span>json<span class="token punctuation">;</span>

<span class="token attribute attr-name">#[derive(RustcEncodable, RustcDecodable)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Greeting</span> <span class="token punctuation">{</span>
    msg<span class="token punctuation">:</span> <span class="token class-name">String</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> router <span class="token operator">=</span> <span class="token class-name">Router</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> hello_world<span class="token punctuation">)</span><span class="token punctuation">;</span>
    router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/set&quot;</span><span class="token punctuation">,</span> set_greeting<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">hello_world</span><span class="token punctuation">(</span>_<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Request</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">IronResult</span><span class="token operator">&lt;</span><span class="token class-name">Response</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> greeting <span class="token operator">=</span> <span class="token class-name">Greeting</span> <span class="token punctuation">{</span> msg<span class="token punctuation">:</span> <span class="token string">&quot;Hello, World&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> payload <span class="token operator">=</span> <span class="token namespace">json<span class="token punctuation">::</span></span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>greeting<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Response</span><span class="token punctuation">::</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token namespace">status<span class="token punctuation">::</span></span><span class="token class-name">Ok</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Receive a message by POST and play it back.</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">set_greeting</span><span class="token punctuation">(</span>request<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Request</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">IronResult</span><span class="token operator">&lt;</span><span class="token class-name">Response</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> payload <span class="token operator">=</span> request<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> request<span class="token punctuation">:</span> <span class="token class-name">Greeting</span> <span class="token operator">=</span> <span class="token namespace">json<span class="token punctuation">::</span></span><span class="token function">decode</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> greeting <span class="token operator">=</span> <span class="token class-name">Greeting</span> <span class="token punctuation">{</span> msg<span class="token punctuation">:</span> request<span class="token punctuation">.</span>msg <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> payload <span class="token operator">=</span> <span class="token namespace">json<span class="token punctuation">::</span></span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>greeting<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Response</span><span class="token punctuation">::</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token namespace">status<span class="token punctuation">::</span></span><span class="token class-name">Ok</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">Iron</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">http</span><span class="token punctuation">(</span><span class="token string">&quot;localhost:3000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>\u8FD9\u6B21\u6DFB\u52A0\u4E86\u8DEF\u7531\u7684\u5B9E\u73B0\u548C\u83B7\u53D6\u5BA2\u6237\u7AEF\u53D1\u9001\u8FC7\u6765\u7684\u6570\u636E\uFF0C\u6709\u4E86get\uFF0Cpost,\u6240\u4EE5\u73B0\u5728\u4E00\u4E2A\u57FA\u672C\u7684api\u7F51\u7AD9\u5DF2\u7ECF\u5B8C\u6210\u4E86\u3002\u4E0D\u8FC7 \u5E76\u4E0D\u662F\u6240\u6709\u7684\u7F51\u7AD9\u90FD\u662Fapi\u6765\u8BBF\u95EE\uFF0C\u540C\u6837\u9700\u8981html\u6A21\u7248\u5F15\u64CE\u548C\u76F4\u63A5\u8FD4\u56DE\u9759\u6001\u9875\u9762\u3002\u7B49\u7B49</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>vagrant@ubuntu-14:~/tmp/test/rustprimer/mysite$ cargo build
   Compiling mysite v0.1.0 (file:///home/vagrant/tmp/test/rustprimer/mysite)
src/main.rs:29:36: 29:52 error: no method named \`read_to_string\` found for type \`iron::request::Body&lt;&#39;_, &#39;_&gt;\` in the current scope
src/main.rs:29         let payload = request.body.read_to_string();
                                                  ^~~~~~~~~~~~~~~~
src/main.rs:29:36: 29:52 help: items from traits can only be used if the trait is in scope; the following trait is implemented but not in scope, perhaps add a \`use\` for it:
src/main.rs:29:36: 29:52 help: candidate #1: use \`std::io::Read\`
error: aborting due to previous error
Could not compile \`mysite\`.
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>`,9),h=s("\u7F16\u8BD1\u51FA\u9519\u4E86\uFF0C\u592A\u7CDF\u7CD5\u4E86\uFF0C\u63D0\u793A\u8BF4\u6CA1\u6709read_to_string\u8FD9\u4E2A\u65B9\u6CD5\uFF0C\u7136\u540E\u6211\u53BB\u6587\u6863\u67E5\u4E86\u4E00\u4E0B\uFF0C\u53D1\u73B0\u6709"),v={href:"http://ironframework.io/doc/iron/request/struct.Body.html",target:"_blank",rel:"noopener noreferrer"},q=s("read_to_string\u65B9\u6CD5"),x=s(" \u518D\u770B\u63D0\u793A\u4FE1\u606F"),R=a(`<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>src/main.rs:29:36: 29:52 help: items from traits can only be used if the trait is in scope; the following trait is implemented but not in scope, perhaps add a \`use\` for it:
src/main.rs:29:36: 29:52 help: candidate #1: use \`std::io::Read\`
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>\u8BA9\u6211\u4EEC\u6DFB\u52A0\u4E00\u4E2A<code>std::io::Read</code>,\u8FD9\u4E2A\u5982\u679C\u64CD\u4F5C\u8FC7\u6587\u4EF6\uFF0C\u4F60\u4E00\u5B9A\u77E5\u9053\u600E\u4E48\u5199\uFF0C\u6DFB\u52A0\u4E00\u4E0B\uFF0C\u5E94\u8BE5\u80FD\u8FC7\u53BB\u4E86\uFF0C\u8FD8\u662F\u7EE7\u7EED\u51FA\u9519\u4E86\uFF0C\u770B\u770B\u62A5\u9519</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>   Compiling mysite v0.1.0 (file:///home/vagrant/tmp/test/rustprimer/mysite)
src/main.rs:30:36: 30:52 error: this function takes 1 parameter but 0 parameters were supplied [E0061]
src/main.rs:30         let payload = request.body.read_to_string();
                                                  ^~~~~~~~~~~~~~~~
src/main.rs:30:36: 30:52 help: run \`rustc --explain E0061\` to see a detailed explanation
src/main.rs:31:46: 31:53 error: mismatched types:
 expected \`&amp;str\`,
    found \`core::result::Result&lt;usize, std::io::error::Error&gt;\`
(expected &amp;-ptr,
    found enum \`core::result::Result\`) [E0308]
src/main.rs:31         let request: Greeting = json::decode(payload).unwrap();
                                                            ^~~~~~~
src/main.rs:31:46: 31:53 help: run \`rustc --explain E0308\` to see a detailed explanation
src/main.rs:30:36: 30:52 error: cannot infer an appropriate lifetime for lifetime parameter \`&#39;b\` due to conflicting requirements [E0495]
src/main.rs:30         let payload = request.body.read_to_string();
                                                  ^~~~~~~~~~~~~~~~
src/main.rs:29:5: 35:6 help: consider using an explicit lifetime parameter as shown: fn set_greeting&lt;&#39;a&gt;(request: &amp;mut Request&lt;&#39;a, &#39;a&gt;) -&gt; IronResult&lt;Response&gt;
src/main.rs:29     fn set_greeting(request: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {
src/main.rs:30         let payload = request.body.read_to_string();
src/main.rs:31         let request: Greeting = json::decode(payload).unwrap();
src/main.rs:32         let greeting = Greeting { msg: request.msg };
src/main.rs:33         let payload = json::encode(&amp;greeting).unwrap();
src/main.rs:34         Ok(Response::with((status::Ok, payload)))
               ...
error: aborting due to 3 previous errors
Could not compile \`mysite\`.

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div>`,3),j=s("\u7B2C\u4E00\u53E5\u63D0\u793A\u6211\u4EEC\uFF0C\u8FD9\u4E2Aread_to_string(),\u81F3\u5C11\u8981\u6709\u4E00\u4E2A\u53C2\u6570\uFF0C\u4F46\u662F\u6211\u4EEC\u4E00\u4E2A\u90FD\u6CA1\u6709\u63D0\u4F9B\u3002 \u6211\u4EEC\u770B\u770B"),O={href:"https://doc.rust-lang.org/nightly/std/io/trait.Read.html#method.read_to_string",target:"_blank",rel:"noopener noreferrer"},E=s("read_to_string\u7684\u7528\u6CD5"),I=a(`<div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code>
se <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> <span class="token keyword">mut</span> f <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;foo.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> buffer <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">try</span><span class="token operator">!</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>\u7528\u6CD5\u6BD4\u8F83\u7B80\u5355\uFF0C\u6211\u4EEC\u4FEE\u6539\u4E00\u4E0B\u521A\u521A\u7684\u51FD\u6570\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>fn set_greeting(request: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {
        let mut payload = String::new();
        request.body.read_to_string(&amp;mut payload);
        let request: Greeting = json::decode(&amp;payload).unwrap();
        let greeting = Greeting { msg: request.msg };
        let payload = json::encode(&amp;greeting).unwrap();
        Ok(Response::with((status::Ok, payload)))
    }
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>\u4ECErequest\u4E2D\u8BFB\u53D6\u5B57\u7B26\u4E32\uFF0C\u8BFB\u53D6\u7684\u7ED3\u679C\u5B58\u653E\u5230payload\u4E2D\uFF0C\u7136\u540E\u5C31\u53EF\u4EE5\u8FDB\u884C\u64CD\u4F5C\u4E86\uFF0C\u7F16\u8BD1\u4E4B\u540E\u8FD0\u884C\uFF0C\u4F7F\u7528curl\u63D0\u4EA4\u4E00\u4E2Apost\u6570\u636E</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$curl -X POST -d &#39;{&quot;msg&quot;:&quot;Just trust the Rust&quot;}&#39; http://localhost:3000/set
{&quot;msg&quot;:&quot;Just trust the Rust&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>iron \u57FA\u672C\u544A\u4E00\u6BB5\u843D \u5F53\u7136\u8FD8\u6709\u5982\u4F55\u4F7F\u7528html\u6A21\u7248\u5F15\u64CE\uFF0C\u90A3\u5C31\u662F\u76F4\u63A5\u770B\u6587\u6863\u5C31\u884C\u4E86\u3002</p>`,6),G=s("##"),H={href:"http://nickel.rs/",target:"_blank",rel:"noopener noreferrer"},N=s("nickel"),z=a(`<p>\u5F53\u7136\u65E2\u7136\u662Fweb\u6846\u67B6\u80AF\u5B9A\u662Firon\u80FD\u5E72\u7684nicke\u4E5F\u80FD\u5E72\uFF0C\u6240\u4EE5\u90A3\u6211\u4EEC\u5C31\u770B\u770B\u5982\u4F55\u505A\u4E00\u4E2Ahello \u548C\u8FD4\u56DE\u4E00\u4E2Ahtml \u7684\u9875\u9762</p><p>\u540C\u6837\u6211\u4EEC\u521B\u5EFA<code>cargo new site --bin</code>\uFF0C\u7136\u540E\u6DFB\u52A0nickel\u5230cargo.toml\u4E2D,<code>cargo build</code></p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code>
<span class="token attribute attr-name">#[macro_use]</span> <span class="token keyword">extern</span> <span class="token keyword">crate</span> <span class="token module-declaration namespace">nickel</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token namespace">nickel<span class="token punctuation">::</span></span><span class="token class-name">Nickel</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> server <span class="token operator">=</span> <span class="token class-name">Nickel</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    server<span class="token punctuation">.</span><span class="token function">utilize</span><span class="token punctuation">(</span><span class="token macro property">router!</span> <span class="token punctuation">{</span>
        get <span class="token string">&quot;**&quot;</span> <span class="token operator">=&gt;</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_req<span class="token punctuation">,</span> _res<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
            <span class="token string">&quot;Hello world!&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:6767&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>\u7B80\u5355\u6765\u770B\uFF0C\u4E5F\u5C31\u662F\u8FD9\u6837\u56DE\u4E8B\u3002</p><ol><li>\u5F15\u5165\u4E86nickel\u7684\u5B8F</li><li>\u521D\u59CB\u5316Nickel</li><li>\u8C03\u7528utilize\u6765\u5B9A\u4E49\u8DEF\u7531\u6A21\u5757\u3002</li><li><code>router!</code> \u5B8F\uFF0C\u4F20\u5165\u7684\u53C2\u6570\u662F get \u65B9\u6CD5\u548C\u5BF9\u5E94\u7684\u8DEF\u5F84\uFF0C&quot;**&quot;\u662F\u5168\u8DEF\u5F84\u5339\u914D\u3002</li><li>listen\u542F\u52A8\u670D\u52A1\u5668</li></ol>`,5),S={href:"http://nickel.rs/#easy-templating",target:"_blank",rel:"noopener noreferrer"},C=s("\u5F53\u7136\u6211\u4EEC\u8981\u5F15\u5165\u5173\u4E8Ehtml\u6A21\u7248\u76F8\u5173\u7684\u4FE1\u606F"),B=a(`<div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#[macro_use]</span> <span class="token keyword">extern</span> <span class="token keyword">crate</span> <span class="token module-declaration namespace">nickel</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">nickel<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Nickel</span><span class="token punctuation">,</span> <span class="token class-name">HttpRouter</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> server <span class="token operator">=</span> <span class="token class-name">Nickel</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    server<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token macro property">middleware!</span> <span class="token punctuation">{</span> <span class="token operator">|</span>_<span class="token punctuation">,</span> response<span class="token operator">|</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> data <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        data<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&quot;site/assets/template.tpl&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:6767&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>\u4E0A\u9762\u7684\u4FE1\u606F\u4F60\u53EF\u4EE5\u7F16\u8BD1\uFF0C\u4F7F\u7528curl\u770B\u770B\u53D1\u73B0\u51FA\u73B0</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ curl http://127.0.0.1:6767
Internal Server Error
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>\u770B\u770B\u6587\u6863\uFF0C\u6CA1\u53D1\u73B0\u4EC0\u4E48\u95EE\u9898\uFF0C\u6211\u7D27\u7D27\u66F4\u6362\u4E86\u4E00\u4E2A\u6587\u4EF6\u5939\u7684\u540D\u5B57\uFF0C\u8FD9\u4E2A\u6587\u4EF6\u5939\u6211\u4E5F\u521B\u5EFA\u4E86\u3002 \u7136\u540E\u6211\u5728\u60F3\u96BE\u9053\u662F\u670D\u52A1\u5668\u5C06\u76EE\u5F55\u5199\u6B7B\u4E86\u5417\uFF1F\u4E8E\u662F\u5C06\u4E0A\u9762\u7684\u8DEF\u5F84\u6539\u6B63\u8FD9\u4E2A\uFF0C\u95EE\u9898\u89E3\u51B3\u3002</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&quot;examples/assets/template.tpl&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>\u6211\u4EEC\u770B\u4E00\u4E0B\u76EE\u5F55\u7ED3\u6784</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>.
|-- Cargo.lock
|-- Cargo.toml
|-- examples
|   \`-- assets
|       \`-- template.tpl
|-- src
|   \`-- main.rs

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>`,7);function W(F,V){const p=t("ExternalLinkIcon");return l(),o(c,null,[i,n("p",null,[k,m,n("a",d,[b,e(p)])]),g,n("p",null,[n("em",null,[f,n("a",y,[_,e(p)])])]),w,n("p",null,[h,n("a",v,[q,e(p)]),x]),R,n("p",null,[j,n("a",O,[E,e(p)])]),I,n("p",null,[G,n("a",H,[N,e(p)])]),z,n("p",null,[n("a",S,[C,e(p)])]),B],64)}var J=u(r,[["render",W],["__file","index.html.vue"]]);export{J as default};
