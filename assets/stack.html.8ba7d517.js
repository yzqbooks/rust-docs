import{r as e,a as o,b as n,d as a,F as c,c as t,e as p,o as l}from"./app.a489c551.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";const r={},k=t(`<h1 id="\u6808" tabindex="-1"><a class="header-anchor" href="#\u6808" aria-hidden="true">#</a> \u6808</h1><h2 id="\u6808\u7B80\u4ECB" tabindex="-1"><a class="header-anchor" href="#\u6808\u7B80\u4ECB" aria-hidden="true">#</a> \u6808\u7B80\u4ECB</h2><ul><li><p>\u6808\u4F5C\u4E3A\u4E00\u79CD\u6570\u636E\u7ED3\u6784\uFF0C\u662F\u4E00\u79CD\u53EA\u80FD\u5728<strong>\u4E00\u7AEF</strong>\u8FDB\u884C<strong>\u63D2\u5165</strong>\u548C<strong>\u5220\u9664</strong>\u64CD\u4F5C\u7684\u7279\u6B8A\u7EBF\u6027\u8868\u3002</p></li><li><p>\u5B83\u6309\u7167<strong>\u5148\u8FDB\u540E\u51FA</strong>\u7684\u539F\u5219\u5B58\u50A8\u6570\u636E\uFF0C\u5148\u8FDB\u5165\u7684\u6570\u636E\u88AB\u538B\u5165\u6808\u5E95\uFF0C\u6700\u540E\u7684\u6570\u636E\u5728\u6808\u9876\uFF0C\u9700\u8981\u8BFB\u6570\u636E\u7684\u65F6\u5019\u4ECE\u6808\u9876\u5F00\u59CB\u5F39\u51FA\u6570\u636E\uFF08\u6700\u540E\u4E00\u4E2A\u6570\u636E\u88AB\u7B2C\u4E00\u4E2A\u8BFB\u51FA\u6765\uFF09\u3002</p></li></ul><blockquote><p>\u6808\uFF08stack\uFF09\u53C8\u540D\u5806\u6808\uFF0C\u5B83\u662F\u4E00\u79CD\u8FD0\u7B97\u53D7\u9650\u7684\u7EBF\u6027\u8868\u3002\u5176\u9650\u5236\u662F\u4EC5\u5141\u8BB8\u5728\u8868\u7684\u4E00\u7AEF\u8FDB\u884C\u63D2\u5165\u548C\u5220\u9664\u8FD0\u7B97\u3002\u8FD9\u4E00\u7AEF\u88AB\u79F0\u4E3A\u6808\u9876\uFF0C\u76F8\u5BF9\u5730\uFF0C\u628A\u53E6\u4E00\u7AEF\u79F0\u4E3A\u6808\u5E95\u3002\u5411\u4E00\u4E2A\u6808\u63D2\u5165\u65B0\u5143\u7D20\u53C8\u79F0\u4F5C\u8FDB\u6808\u3001\u5165\u6808\u6216\u538B\u6808\uFF0C\u5B83\u662F\u628A\u65B0\u5143\u7D20\u653E\u5230\u6808\u9876\u5143\u7D20\u7684\u4E0A\u9762\uFF0C\u4F7F\u4E4B\u6210\u4E3A\u65B0\u7684\u6808\u9876\u5143\u7D20\uFF1B\u4ECE\u4E00\u4E2A\u6808\u5220\u9664\u5143\u7D20\u53C8\u79F0\u4F5C\u51FA\u6808\u6216\u9000\u6808\uFF0C\u5B83\u662F\u628A\u6808\u9876\u5143\u7D20\u5220\u9664\u6389\uFF0C\u4F7F\u5176\u76F8\u90BB\u7684\u5143\u7D20\u6210\u4E3A\u65B0\u7684\u6808\u9876\u5143\u7D20\u3002</p></blockquote><h2 id="\u6808\u7684\u5B9E\u73B0\u6B65\u9AA4" tabindex="-1"><a class="header-anchor" href="#\u6808\u7684\u5B9E\u73B0\u6B65\u9AA4" aria-hidden="true">#</a> \u6808\u7684\u5B9E\u73B0\u6B65\u9AA4\uFF1A</h2><ul><li>\u5B9A\u4E49\u4E00\u4E2A\u6808\u7ED3\u6784<code>Stack</code></li><li>\u5B9A\u4E49\u7EC4\u6210\u6808\u7ED3\u6784\u7684\u6808\u70B9<code>StackNode</code></li><li>\u5B9E\u73B0\u6808\u7684\u521D\u59CB\u5316\u51FD\u6570<code>new( )</code></li><li>\u5B9E\u73B0\u8FDB\u6808\u51FD\u6570<code>push( )</code></li><li>\u5B9E\u73B0\u9000\u6808\u51FD\u6570<code>pop( )</code></li></ul><h2 id="\u5B9A\u4E49\u4E00\u4E2A\u6808\u7ED3\u6784stack" tabindex="-1"><a class="header-anchor" href="#\u5B9A\u4E49\u4E00\u4E2A\u6808\u7ED3\u6784stack" aria-hidden="true">#</a> \u5B9A\u4E49\u4E00\u4E2A\u6808\u7ED3\u6784<code>Stack</code></h2><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Stack</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    top<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">StackNode</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u8BA9\u6211\u4EEC\u4E00\u6B65\u6B65\u6765\u5206\u6790</p><ul><li>\u7B2C\u4E00\u884C\u7684<code>#[derive(Debug)]</code>\u662F\u4E3A\u4E86\u8BA9<code>Stack</code>\u7ED3\u6784\u4F53\u53EF\u4EE5\u6253\u5370\u8C03\u8BD5\u3002</li><li>\u7B2C\u4E8C\u884C\u662F\u5B9A\u4E49\u4E86\u4E00\u4E2A<code>Stack</code>\u7ED3\u6784\u4F53\uFF0C\u8FD9\u4E2A\u7ED3\u6784\u4F53\u5305\u542B\u4E00\u4E2A\u6CDB\u578B\u53C2\u6570<code>T</code>\u3002</li><li>\u7B2C\u4E09\u884C\u6BD4\u8F83\u590D\u6742\uFF0C\u5728\u5B9A\u4E49<code>StackNode</code>\u7684\u65F6\u5019\u4ECB\u7ECD</li></ul><h2 id="\u5B9A\u4E49\u7EC4\u6210\u6808\u7ED3\u6784\u7684\u6808\u70B9stacknode" tabindex="-1"><a class="header-anchor" href="#\u5B9A\u4E49\u7EC4\u6210\u6808\u7ED3\u6784\u7684\u6808\u70B9stacknode" aria-hidden="true">#</a> \u5B9A\u4E49\u7EC4\u6210\u6808\u7ED3\u6784\u7684\u6808\u70B9<code>StackNode</code></h2><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#[derive(Clone,Debug)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">StackNode</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    val<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>
    next<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">StackNode</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u5728\u8FD9\u6BB5\u4EE3\u7801\u7684\u7B2C\u4E09\u884C\uFF0C \u6211\u4EEC\u5B9A\u4E49\u4E86\u4E00\u4E2A<code>val</code>\u4FDD\u5B58<code>StackNode</code>\u7684\u503C\u3002</p><blockquote><p>\u73B0\u5728\u6211\u4EEC\u91CD\u70B9\u6765\u770B\u770B\u7B2C\u56DB\u884C\uFF1A \u6211\u4EEC<strong>\u4ECE\u91CC\u5230\u5916</strong>\u62C6\u5206\u6765\u770B\u770B\uFF0C\u9996\u5148\u662F<code>Box&lt;StackNode&lt;T&gt;</code>\uFF0C\u8FD9\u91CC\u7684<code>Box</code>\u662F Rust \u7528\u6765\u663E\u5F0F\u5206\u914D\u5806\u5185\u5B58\u7684\u7C7B\u578B\uFF1A</p></blockquote>`,14),i=n("code",null,"pub struct Box<T> where T: ?Sized(_);",-1),d=n("br",null,null,-1),m={href:"http://doc.rust-lang.org/nightly/std/boxed/struct.Box.html",target:"_blank",rel:"noopener noreferrer"},b=p("\u8BE6\u7EC6\u6587\u6863\u8BF7\u53C2\u8003Rust\u7684\u6807\u51C6\u5E93"),g=t(`<blockquote><p>\u5728 Rust \u91CC\u9762\u7528\u5F3A\u5927\u7684\u7C7B\u578B\u7CFB\u7EDF\u505A\u4E86\u7EDF\u4E00\u7684\u62BD\u8C61\u3002\u5728\u8FD9\u91CC\u76F8\u5F53\u4E8E\u5728\u5806\u7A7A\u95F4\u91CC\u7533\u8BF7\u4E86\u4E00\u5757\u5185\u5B58\u4FDD\u5B58<code>StackNode&lt;T&gt;</code>\u3002</p></blockquote><blockquote><p><strong>\u4E3A\u4EC0\u4E48\u8981\u8FD9\u4E48\u505A\u4E86\uFF1F\u5982\u679C\u4E0D\u7528Box\u5C01\u88C5\u4F1A\u600E\u4E48\u6837\u5462\uFF1F</strong></p></blockquote><blockquote><p>\u5982\u679C\u4E0D\u7528 Box \u5C01\u88C5\uFF0Crustc \u7F16\u8BD1\u5668\u4F1A\u62A5\u9519\uFF0C\u5728 Rust \u91CC\u9762\uFF0Crustc \u9ED8\u8BA4\u4F7F\u7528\u6808\u7A7A\u95F4\uFF0C\u4F46\u662F\u8FD9\u91CC\u7684<code>StackNode</code>\u5B9A\u4E49\u7684\u65F6\u5019\u4F7F\u7528\u4E86\u9012\u5F52\u7684\u6570\u636E\u7ED3\u6784\uFF0Cnext \u5C5E\u6027\u7684\u7C7B\u578B\u662F <code>StackNode&lt;T&gt;</code>\uFF0C\u800C\u8FD9\u4E2A\u7C7B\u578B\u662F\u65E0\u6CD5\u786E\u5B9A\u5927\u5C0F\u7684\uFF0C\u6240\u6709\u8FD9\u79CD\u65E0\u6CD5\u786E\u5B9A\u5927\u5C0F\u7684\u7C7B\u578B\uFF0C\u90FD\u4E0D\u80FD\u4FDD\u5B58\u5728\u6808\u7A7A\u95F4\u3002\u6240\u4EE5\u9700\u8981\u4F7F\u7528<code>Box</code>\u6765\u5C01\u88C5\u3002\u8FD9\u6837\u7684\u8BDD<code>next</code>\u7684\u7C7B\u578B\u5C31\u662F\u4E00\u4E2A\u6307\u5411\u67D0\u4E00\u5757\u5806\u7A7A\u95F4\u7684\u6307\u9488\uFF0C\u800C\u6307\u9488\u662F\u53EF\u4EE5\u786E\u5B9A\u5927\u5C0F\u7684\uFF0C\u56E0\u6B64\u80FD\u591F\u4FDD\u5B58\u5728\u6808\u7A7A\u95F4\u3002</p></blockquote><blockquote><p><strong>\u90A3\u4E48\u4E3A\u4EC0\u4E48\u8FD8\u9700\u8981\u4F7F\u7528<code>Option</code>\u6765\u5C01\u88C5\u5462\uFF1F</strong></p></blockquote><blockquote><p><code>Option</code>\u662F Rust \u91CC\u9762\u7684\u4E00\u4E2A\u62BD\u8C61\u7C7B\u578B\uFF0C\u5B9A\u4E49\u5982\u4E0B\uFF1A</p></blockquote><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">None</span><span class="token punctuation">,</span>
    <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Option \u91CC\u9762\u5305\u62EC\u5143\u7D20\uFF0CNone \u548C Some(T) \uFF0C\u8FD9\u6837\u5C31\u5F88\u8F7B\u677E\u7684\u63CF\u8FF0\u4E86 next \u6307\u5411\u6808\u5C3E\u7684\u5143\u7D20\u7684\u65F6\u5019\uFF0C\u90FD\u662F\u5728 Option \u7C7B\u578B\u4E0B\uFF0C\u65B9\u4FBF\u4E86\u529F\u80FD\u5B9E\u73B0\uFF0C\u4E5F\u65B9\u4FBF\u4E86\u9519\u8BEF\u5904\u7406\u3002Option \u8FD8\u6709\u5F88\u591A\u5F3A\u5927\u7684\u529F\u80FD\uFF0C\u8BFB\u8005\u53EF\u4EE5\u53C2\u8003\u4E0B\u9762\u51E0\u4E2A\u8FDE\u63A5\uFF1A</p>`,7),f={href:"http://doc.rust-lang.org/nightly/std/option/enum.Option.html",target:"_blank",rel:"noopener noreferrer"},h=p("Option\u6807\u51C6\u5E93\u6587\u6863"),y={href:"http://blog.burntsushi.net/rust-error-handling/",target:"_blank",rel:"noopener noreferrer"},w=p("Error Handling in Rust"),x={href:"https://doc.rust-lang.org/stable/rust-by-example/error.html",target:"_blank",rel:"noopener noreferrer"},S=p("rustbyexample \u7684 Error handling"),_=t(`<h2 id="\u5B9E\u73B0-new-push-pop" tabindex="-1"><a class="header-anchor" href="#\u5B9E\u73B0-new-push-pop" aria-hidden="true">#</a> \u5B9E\u73B0 <code>new( ) push( ) pop( )</code></h2><p>\u63A5\u4E0B\u6765\u662F\u5B9E\u73B0 stack \u7684\u4E3B\u8981\u529F\u80FD\u4E86\u3002</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">Stack</span><span class="token punctuation">{</span> top<span class="token punctuation">:</span> <span class="token class-name">None</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> node <span class="token operator">=</span> <span class="token class-name">StackNode</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> next <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>top<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        node<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">pop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>top<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">match</span> val <span class="token punctuation">{</span>
            <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token class-name">None</span><span class="token punctuation">,</span>
            <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token keyword">mut</span> x<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">self</span><span class="token punctuation">.</span>top <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Some</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><ul><li><p><code>new( )</code>\u6BD4\u8F83\u7B80\u5355\uFF0CStack \u521D\u59CB\u5316\u7684\u65F6\u5019\u4E3A\u7A7A\uFF0C\u6808\u9876\u5143\u7D20 <code>top</code> \u5C31\u6CA1\u6709\u4EFB\u4F55\u503C\uFF0C\u6240\u4EE5 <code>top</code> \u4E3A <code>None</code>\u3002</p></li><li><p><code>push( )</code>\u7684\u4E3B\u8981\u529F\u80FD\u662F\u5F80\u6808\u91CC\u9762\u63A8\u5165\u5143\u7D20\uFF0C\u628A\u65B0\u7684 StackNode \u6307\u5411 Stack \u91CC\u9762\u65E7\u7684\u503C\uFF0C\u540C\u65F6\u66F4\u65B0 Stack \u6808\u9876\u6307\u5411\u65B0\u8FDB\u6765\u7684\u503C\u3002</p></li></ul><blockquote><p>\u8FD9\u91CC\u6709\u4E2A\u9700\u8981\u6CE8\u610F\u7684\u5730\u65B9\u662F\u7B2C8\u884C\u4EE3\u7801\u91CC\u9762\uFF0C<code>let next = self.top.take();</code>\uFF0C\u4F7F\u7528\u4E86 Option \u7C7B\u578B\u7684 take \u65B9\u6CD5\uFF1A<br><code>fn take(&amp;mut self) -&gt; Option&lt;T&gt;</code> \u5B83\u4F1A\u628A Option \u7C7B\u578B\u7684\u503C\u53D6\u8D70\uFF0C\u5E76\u628A\u5B83\u7684\u5143\u7D20\u6539\u4E3A None</p></blockquote><ul><li><code>pop( )</code>\u7684\u529F\u80FD\u662F\u53D6\u51FA\u6808\u9876\u7684\u5143\u7D20\uFF0C\u5982\u679C\u6808\u9876\u4E3A None \u5219\u8FD4\u56DE None\u3002</li></ul><h2 id="\u5B8C\u6574\u4EE3\u7801-\u5305\u542B\u7B80\u5355\u7684\u6D4B\u8BD5" tabindex="-1"><a class="header-anchor" href="#\u5B8C\u6574\u4EE3\u7801-\u5305\u542B\u7B80\u5355\u7684\u6D4B\u8BD5" aria-hidden="true">#</a> \u5B8C\u6574\u4EE3\u7801\uFF08\u5305\u542B\u7B80\u5355\u7684\u6D4B\u8BD5\uFF09</h2><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Stack</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    top<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">StackNode</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[derive(Clone,Debug)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">StackNode</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    val<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>
    next<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">StackNode</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">StackNode</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>val<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">StackNode</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">StackNode</span> <span class="token punctuation">{</span> val<span class="token punctuation">:</span> val<span class="token punctuation">,</span> next<span class="token punctuation">:</span> <span class="token class-name">None</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">Stack</span><span class="token punctuation">{</span> top<span class="token punctuation">:</span> <span class="token class-name">None</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> node <span class="token operator">=</span> <span class="token class-name">StackNode</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> next <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>top<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        node<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">pop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>top<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">match</span> val <span class="token punctuation">{</span>
            <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token class-name">None</span><span class="token punctuation">,</span>
            <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token keyword">mut</span> x<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">self</span><span class="token punctuation">.</span>top <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Some</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token attribute attr-name">#[derive(PartialEq,Eq,Debug)]</span>
    <span class="token keyword">struct</span> <span class="token type-definition class-name">TestStruct</span> <span class="token punctuation">{</span>
        a<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token class-name">TestStruct</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token class-name">TestStruct</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">Stack</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token class-name">TestStruct</span><span class="token operator">&gt;</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">None</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">None</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div>`,8);function v(N,T){const s=e("ExternalLinkIcon");return l(),o(c,null,[k,n("blockquote",null,[n("p",null,[i,d,n("a",m,[b,a(s)])])]),g,n("p",null,[n("a",f,[h,a(s)])]),n("p",null,[n("a",y,[w,a(s)])]),n("p",null,[n("a",x,[S,a(s)])]),_],64)}var B=u(r,[["render",v],["__file","stack.html.vue"]]);export{B as default};
