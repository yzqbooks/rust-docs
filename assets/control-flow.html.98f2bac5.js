import{c as n}from"./app.a489c551.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h1 id="\u63A7\u5236\u6D41-control-flow" tabindex="-1"><a class="header-anchor" href="#\u63A7\u5236\u6D41-control-flow" aria-hidden="true">#</a> \u63A7\u5236\u6D41(control flow)</h1><h2 id="if" tabindex="-1"><a class="header-anchor" href="#if" aria-hidden="true">#</a> If</h2><p>If\u662F\u5206\u652F (branch) \u7684\u4E00\u79CD\u7279\u6B8A\u5F62\u5F0F\uFF0C\u4E5F\u53EF\u4EE5\u4F7F\u7528<code>else</code>\u548C<code>else if</code>\u3002 \u4E0EC\u8BED\u8A00\u4E0D\u540C\u7684\u662F\uFF0C\u903B\u8F91\u6761\u4EF6\u4E0D\u9700\u8981\u7528\u5C0F\u62EC\u53F7\u62EC\u8D77\u6765\uFF0C\u4F46\u662F\u6761\u4EF6\u540E\u9762\u5FC5\u987B\u8DDF\u4E00\u4E2A\u4EE3\u7801\u5757\u3002 Rust\u4E2D\u7684<code>if</code>\u662F\u4E00\u4E2A\u8868\u8FBE\u5F0F (expression)\uFF0C\u53EF\u4EE5\u8D4B\u7ED9\u4E00\u4E2A\u53D8\u91CF\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">5</span> <span class="token punctuation">{</span> <span class="token number">10</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token number">15</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Rust\u662F\u57FA\u4E8E\u8868\u8FBE\u5F0F\u7684\u7F16\u7A0B\u8BED\u8A00\uFF0C\u6709\u4E14\u4EC5\u6709\u4E24\u79CD\u8BED\u53E5 (statement)\uFF1A</p><ol><li><strong>\u58F0\u660E\u8BED\u53E5</strong> (declaration statement)\uFF0C\u6BD4\u5982\u8FDB\u884C\u53D8\u91CF\u7ED1\u5B9A\u7684<code>let</code>\u8BED\u53E5\u3002</li><li><strong>\u8868\u8FBE\u5F0F\u8BED\u53E5</strong> (expression statement)\uFF0C\u5B83\u901A\u8FC7\u5728\u672B\u5C3E\u52A0\u4E0A\u5206\u53F7<code>;</code>\u6765\u5C06\u8868\u8FBE\u5F0F\u53D8\u6210\u8BED\u53E5\uFF0C \u4E22\u5F03\u8BE5\u8868\u8FBE\u5F0F\u7684\u503C\uFF0C\u4E00\u5F8B\u8FD4\u56DEunit<code>()</code>\u3002</li></ol><p>\u8868\u8FBE\u5F0F\u5982\u679C\u8FD4\u56DE\uFF0C\u603B\u662F\u8FD4\u56DE\u4E00\u4E2A\u503C\uFF0C\u4F46\u662F\u8BED\u53E5\u4E0D\u8FD4\u56DE\u503C\u6216\u8005\u8FD4\u56DE<code>()</code>\uFF0C\u6240\u4EE5\u4EE5\u4E0B\u4EE3\u7801\u4F1A\u62A5\u9519\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> z<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">5</span> <span class="token punctuation">{</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u503C\u5F97\u6CE8\u610F\u7684\u662F\uFF0C\u5728Rust\u4E2D\u8D4B\u503C (\u5982<code>x = 5</code>) \u4E5F\u662F\u4E00\u4E2A\u8868\u8FBE\u5F0F\uFF0C\u8FD4\u56DEunit\u7684\u503C<code>()</code>\u3002</p><h2 id="for" tabindex="-1"><a class="header-anchor" href="#for" aria-hidden="true">#</a> For</h2><p>Rust\u4E2D\u7684<code>for</code>\u5FAA\u73AF\u4E0EC\u8BED\u8A00\u7684\u98CE\u683C\u975E\u5E38\u4E0D\u540C\uFF0C\u62BD\u8C61\u7ED3\u6784\u5982\u4E0B\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">for</span> var <span class="token keyword">in</span> expression <span class="token punctuation">{</span>
    code
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u5176\u4E2D<code>expression</code>\u662F\u4E00\u4E2A\u8FED\u4EE3\u5668 (iterator)\uFF0C\u5177\u4F53\u7684\u4F8B\u5B50\u4E3A<code>0..10</code> (\u4E0D\u5305\u542B\u6700\u540E\u4E00\u4E2A\u503C)\uFF0C \u6216\u8005<code>[0, 1, 2].iter()</code>\u3002</p><h2 id="while" tabindex="-1"><a class="header-anchor" href="#while" aria-hidden="true">#</a> While</h2><p>Rust\u4E2D\u7684<code>while</code>\u5FAA\u73AF\u4E0EC\u8BED\u8A00\u4E2D\u7684\u7C7B\u4F3C\u3002\u5BF9\u4E8E\u65E0\u9650\u5FAA\u73AF\uFF0CRust\u6709\u4E00\u4E2A\u4E13\u7528\u7684\u5173\u952E\u5B57<code>loop</code>\u3002 \u5982\u679C\u9700\u8981\u63D0\u524D\u9000\u51FA\u5FAA\u73AF\uFF0C\u53EF\u4EE5\u4F7F\u7528\u5173\u952E\u5B57<code>break</code>\u6216\u8005<code>continue</code>\uFF0C \u8FD8\u5141\u8BB8\u5728\u5FAA\u73AF\u7684\u5F00\u5934\u8BBE\u5B9A\u6807\u7B7E (\u540C\u6837\u9002\u7528\u4E8E<code>for</code>\u5FAA\u73AF)\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token lifetime-annotation symbol">&#39;outer</span><span class="token punctuation">:</span> <span class="token keyword">loop</span> <span class="token punctuation">{</span>
   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Entered the outer loop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token lifetime-annotation symbol">&#39;inner</span><span class="token punctuation">:</span> <span class="token keyword">loop</span> <span class="token punctuation">{</span>
       <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Entered the inner loop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">break</span> <span class="token lifetime-annotation symbol">&#39;outer</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;This point will never be reached&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Exited the outer loop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="match" tabindex="-1"><a class="header-anchor" href="#match" aria-hidden="true">#</a> Match</h2><p>Rust\u4E2D\u7684<code>match</code>\u8868\u8FBE\u5F0F\u975E\u5E38\u5F3A\u5927\uFF0C\u9996\u5148\u770B\u4E00\u4E2A\u4F8B\u5B50\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> day <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token keyword">match</span> day <span class="token punctuation">{</span>
  <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">6</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;weekend&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token number">1</span> <span class="token punctuation">...</span> <span class="token number">5</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;weekday&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  _ <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;invalid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>\u5176\u4E2D<code>|</code>\u7528\u4E8E\u5339\u914D\u591A\u4E2A\u503C\uFF0C<code>...</code>\u5339\u914D\u4E00\u4E2A\u8303\u56F4 (\u5305\u542B\u6700\u540E\u4E00\u4E2A\u503C)\uFF0C\u5E76\u4E14<code>_</code>\u5728\u8FD9\u91CC\u662F\u5FC5\u987B\u7684\uFF0C \u56E0\u4E3A<code>match</code>\u5F3A\u5236\u8FDB\u884C\u7A77\u5C3D\u6027\u68C0\u67E5 (exhaustiveness checking)\uFF0C\u5FC5\u987B\u8986\u76D6\u6240\u6709\u7684\u53EF\u80FD\u503C\u3002 \u5982\u679C\u9700\u8981\u5F97\u5230<code>|</code>\u6216\u8005<code>...</code>\u5339\u914D\u5230\u7684\u503C\uFF0C\u53EF\u4EE5\u4F7F\u7528<code>@</code>\u7ED1\u5B9A\u53D8\u91CF\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">match</span> x <span class="token punctuation">{</span>
    e <span class="token operator">@</span> <span class="token number">1</span> <span class="token punctuation">...</span> <span class="token number">5</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;got a range element {}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span>
    _ <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;anything&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u4F7F\u7528<code>ref</code>\u5173\u952E\u5B57\u6765\u5F97\u5230\u4E00\u4E2A\u5F15\u7528\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token keyword">match</span> x <span class="token punctuation">{</span>
    <span class="token comment">// the \`r\` inside the match has the type \`&amp;i32\`</span>
    <span class="token keyword">ref</span> r <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Got a reference to {}&quot;</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">match</span> y <span class="token punctuation">{</span>
    <span class="token comment">// the \`mr\` inside the match has the type \`&amp;i32\` and is mutable</span>
    <span class="token keyword">ref</span> <span class="token keyword">mut</span> mr <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Got a mutable reference to {}&quot;</span><span class="token punctuation">,</span> mr<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>\u518D\u770B\u4E00\u4E2A\u4F7F\u7528<code>match</code>\u8868\u8FBE\u5F0F\u6765\u89E3\u6784\u5143\u7EC4\u7684\u4F8B\u5B50\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> pair <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">match</span> pair <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;x is \`0\` and \`y\` is \`{:?}\`&quot;</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;\`x\` is \`{:?}\` and y is \`0\`&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span>
    _ <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;It doesn&#39;t matter what they are&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>match</code>\u7684\u8FD9\u79CD\u89E3\u6784\u540C\u6837\u9002\u7528\u4E8E\u7ED3\u6784\u4F53\u6216\u8005\u679A\u4E3E\u3002\u5982\u679C\u6709\u5FC5\u8981\uFF0C\u8FD8\u53EF\u4EE5\u4F7F\u7528<code>..</code>\u6765\u5FFD\u7565\u57DF\u6216\u8005\u6570\u636E\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span> <span class="token punctuation">{</span>
    x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>
    y<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> origin <span class="token operator">=</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">match</span> origin <span class="token punctuation">{</span>
    <span class="token class-name">Point</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> <span class="token punctuation">..</span> <span class="token punctuation">}</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;x is {}&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token type-definition class-name">OptionalInt</span> <span class="token punctuation">{</span>
    <span class="token class-name">Value</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Missing</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token class-name">OptionalInt</span><span class="token punctuation">::</span><span class="token class-name">Value</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">match</span> x <span class="token punctuation">{</span>
    <span class="token comment">// \u8FD9\u91CC\u662F match \u7684 if guard \u8868\u8FBE\u5F0F\uFF0C\u6211\u4EEC\u5C06\u5728\u4EE5\u540E\u7684\u7AE0\u8282\u8FDB\u884C\u8BE6\u7EC6\u4ECB\u7ECD</span>
    <span class="token class-name">OptionalInt</span><span class="token punctuation">::</span><span class="token class-name">Value</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Got an int bigger than five!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">OptionalInt</span><span class="token punctuation">::</span><span class="token class-name">Value</span><span class="token punctuation">(</span><span class="token punctuation">..</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Got an int!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">OptionalInt</span><span class="token punctuation">::</span><span class="token class-name">Missing</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;No such luck.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>\u6B64\u5916\uFF0CRust\u8FD8\u5F15\u5165\u4E86<code>if let</code>\u548C<code>while let</code>\u8FDB\u884C\u6A21\u5F0F\u5339\u914D\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> optional <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// If \`let\` destructures \`number\` into \`Some(i)\`, evaluate the block.</span>
<span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> number <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Matched {:?}!&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Didn&#39;t match a number!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// While \`let\` destructures \`optional\` into \`Some(i)\`, evaluate the block.</span>
<span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> optional <span class="token punctuation">{</span>
    <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">9</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Greater than 9, quit!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        optional <span class="token operator">=</span> <span class="token class-name">None</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;\`i\` is \`{:?}\`. Try again.&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        optional <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>`,29);function t(e,o){return p}var u=s(a,[["render",t],["__file","control-flow.html.vue"]]);export{u as default};
