"use strict";(self.webpackChunkrust_docs=self.webpackChunkrust_docs||[]).push([[7454],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),f=s(t),d=a,m=f["".concat(p,".").concat(d)]||f[d]||c[d]||l;return t?r.createElement(m,i(i({ref:n},u),{},{components:t})):r.createElement(m,i({ref:n},u))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=f;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var s=2;s<l;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},7057:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return c}});var r=t(7462),a=t(3366),l=(t(7294),t(3905)),i=["components"],o={},p="\u7279\u6027",s={unversionedId:"quickstart/trait",id:"quickstart/trait",title:"\u7279\u6027",description:"\u7279\u6027\u4e0e\u63a5\u53e3",source:"@site/docs/quickstart/trait.md",sourceDirName:"quickstart",slug:"/quickstart/trait",permalink:"/rust-docs/docs/quickstart/trait",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/quickstart/trait.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u7ed3\u6784\u4f53\u4e0e\u679a\u4e3e",permalink:"/rust-docs/docs/quickstart/struct-enum"},next:{title:"\u6570\u7ec4\u3001\u52a8\u6001\u6570\u7ec4\u548c\u5b57\u7b26\u4e32",permalink:"/rust-docs/docs/quickstart/vector-string"}},u={},c=[{value:"\u7279\u6027\u4e0e\u63a5\u53e3",id:"\u7279\u6027\u4e0e\u63a5\u53e3",level:2},{value:"\u6cdb\u578b\u548c\u591a\u6001",id:"\u6cdb\u578b\u548c\u591a\u6001",level:2}],f={toc:c};function d(e){var n=e.components,t=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"\u7279\u6027"},"\u7279\u6027"),(0,l.kt)("h2",{id:"\u7279\u6027\u4e0e\u63a5\u53e3"},"\u7279\u6027\u4e0e\u63a5\u53e3"),(0,l.kt)("p",null,"\u4e3a\u4e86\u63cf\u8ff0\u7c7b\u578b\u53ef\u4ee5\u5b9e\u73b0\u7684\u62bd\u8c61\u63a5\u53e3 (abstract interface)\uff0c\nRust\u5f15\u5165\u4e86\u7279\u6027 (trait) \u6765\u5b9a\u4e49\u51fd\u6570\u7c7b\u578b\u7b7e\u540d (function type signature)\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'trait HasArea {\n    fn area(&self) -> f64;\n}\n\nstruct Circle {\n    x: f64,\n    y: f64,\n    radius: f64,\n}\n\nimpl HasArea for Circle {\n    fn area(&self) -> f64 {\n        std::f64::consts::PI * (self.radius * self.radius)\n    }\n}\n\nstruct Square {\n    x: f64,\n    y: f64,\n    side: f64,\n}\n\nimpl HasArea for Square {\n    fn area(&self) -> f64 {\n        self.side * self.side\n    }\n}\n\nfn print_area<T: HasArea>(shape: T) {\n    println!("This shape has an area of {}", shape.area());\n}\n')),(0,l.kt)("p",null,"\u5176\u4e2d\u51fd\u6570",(0,l.kt)("inlineCode",{parentName:"p"},"print_area()"),"\u4e2d\u7684\u6cdb\u578b\u53c2\u6570",(0,l.kt)("inlineCode",{parentName:"p"},"T"),"\u88ab\u6dfb\u52a0\u4e86\u4e00\u4e2a\u540d\u4e3a",(0,l.kt)("inlineCode",{parentName:"p"},"HasArea"),"\u7684\u7279\u6027\u7ea6\u675f (trait constraint)\uff0c\n\u7528\u4ee5\u786e\u4fdd\u4efb\u4f55\u5b9e\u73b0\u4e86",(0,l.kt)("inlineCode",{parentName:"p"},"HasArea"),"\u7684\u7c7b\u578b\u5c06\u62e5\u6709\u4e00\u4e2a",(0,l.kt)("inlineCode",{parentName:"p"},".area()"),"\u65b9\u6cd5\u3002\n\u5982\u679c\u9700\u8981\u591a\u4e2a\u7279\u6027\u9650\u5b9a (multiple trait bounds)\uff0c\u53ef\u4ee5\u4f7f\u7528",(0,l.kt)("inlineCode",{parentName:"p"},"+"),"\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'use std::fmt::Debug;\n\nfn foo<T: Clone, K: Clone + Debug>(x: T, y: K) {\n    x.clone();\n    y.clone();\n    println!("{:?}", y);\n}\n\nfn bar<T, K>(x: T, y: K)\n    where T: Clone,\n          K: Clone + Debug\n{\n    x.clone();\n    y.clone();\n    println!("{:?}", y);\n}\n')),(0,l.kt)("p",null,"\u5176\u4e2d\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u4f7f\u7528\u4e86\u66f4\u7075\u6d3b\u7684",(0,l.kt)("inlineCode",{parentName:"p"},"where"),"\u4ece\u53e5\uff0c\u5b83\u8fd8\u5141\u8bb8\u9650\u5b9a\u7684\u5de6\u4fa7\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\uff0c\n\u800c\u4e0d\u4ec5\u4ec5\u662f\u7c7b\u578b\u53c2\u6570\u3002"),(0,l.kt)("p",null,"\u5b9a\u4e49\u5728\u7279\u6027\u4e2d\u7684\u65b9\u6cd5\u79f0\u4e3a\u9ed8\u8ba4\u65b9\u6cd5 (default method)\uff0c\u53ef\u4ee5\u88ab\u8be5\u7279\u6027\u7684\u5b9e\u73b0\u8986\u76d6\u3002\n\u6b64\u5916\uff0c\u7279\u6027\u4e4b\u95f4\u4e5f\u53ef\u4ee5\u5b58\u5728\u7ee7\u627f (inheritance)\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'trait Foo {\n    fn foo(&self);\n\n    // default method\n    fn bar(&self) { println!("We called bar."); }\n}\n\n// inheritance\ntrait FooBar : Foo {\n    fn foobar(&self);\n}\n\nstruct Baz;\n\nimpl Foo for Baz {\n    fn foo(&self) { println!("foo"); }\n}\n\nimpl FooBar for Baz {\n    fn foobar(&self) { println!("foobar"); }\n}\n')),(0,l.kt)("p",null,"\u5982\u679c\u4e24\u4e2a\u4e0d\u540c\u7279\u6027\u7684\u65b9\u6cd5\u5177\u6709\u76f8\u540c\u7684\u540d\u79f0\uff0c\u53ef\u4ee5\u4f7f\u7528\u901a\u7528\u51fd\u6570\u8c03\u7528\u8bed\u6cd5 (universal function call syntax)\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"// short-hand form\nTrait::method(args);\n\n// expanded form\n<Type as Trait>::method(args);\n")),(0,l.kt)("p",null,"\u5173\u4e8e\u5b9e\u73b0\u7279\u6027\u7684\u51e0\u6761\u9650\u5236\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u5982\u679c\u4e00\u4e2a\u7279\u6027\u4e0d\u5728\u5f53\u524d\u4f5c\u7528\u57df\u5185\uff0c\u5b83\u5c31\u4e0d\u80fd\u88ab\u5b9e\u73b0\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u4e0d\u7ba1\u662f\u7279\u6027\u8fd8\u662f",(0,l.kt)("inlineCode",{parentName:"li"},"impl"),"\uff0c\u90fd\u53ea\u80fd\u5728\u5f53\u524d\u7684\u5305\u88c5\u7bb1\u5185\u8d77\u4f5c\u7528\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u5e26\u6709\u7279\u6027\u7ea6\u675f\u7684\u6cdb\u578b\u51fd\u6570\u4f7f\u7528\u5355\u6001\u5316\u5b9e\u73b0 (monomorphization)\uff0c\n\u6240\u4ee5\u5b83\u662f\u9759\u6001\u6d3e\u5206\u7684 (statically dispatched)\u3002")),(0,l.kt)("p",null,"\u4e0b\u9762\u5217\u4e3e\u51e0\u4e2a\u975e\u5e38\u6709\u7528\u7684\u6807\u51c6\u5e93\u7279\u6027\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Drop"),"\u63d0\u4f9b\u4e86\u5f53\u4e00\u4e2a\u503c\u9000\u51fa\u4f5c\u7528\u57df\u540e\u6267\u884c\u4ee3\u7801\u7684\u529f\u80fd\uff0c\u5b83\u53ea\u6709\u4e00\u4e2a",(0,l.kt)("inlineCode",{parentName:"li"},"drop(&mut self)"),"\u65b9\u6cd5\u3002"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Borrow"),"\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u65f6\u628a\u62e5\u6709\u548c\u501f\u7528\u7684\u503c\u770b\u4f5c\u7b49\u540c\u3002"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"AsRef"),"\u7528\u4e8e\u5728\u6cdb\u578b\u4e2d\u628a\u4e00\u4e2a\u503c\u8f6c\u6362\u4e3a\u5f15\u7528\u3002"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Deref<Target=T>"),"\u7528\u4e8e\u628a",(0,l.kt)("inlineCode",{parentName:"li"},"&U"),"\u7c7b\u578b\u7684\u503c\u81ea\u52a8\u8f6c\u6362\u4e3a",(0,l.kt)("inlineCode",{parentName:"li"},"&T"),"\u7c7b\u578b\u3002"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Iterator"),"\u7528\u4e8e\u5728\u96c6\u5408 (collection) \u548c\u60f0\u6027\u503c\u751f\u6210\u5668 (lazy value generator) \u4e0a\u5b9e\u73b0\u8fed\u4ee3\u5668\u3002"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Sized"),"\u7528\u4e8e\u6807\u8bb0\u8fd0\u884c\u65f6\u957f\u5ea6\u56fa\u5b9a\u7684\u7c7b\u578b\uff0c\u800c\u4e0d\u5b9a\u957f\u7684\u5207\u7247\u548c\u7279\u6027\u5fc5\u987b\u653e\u5728\u6307\u9488\u540e\u9762\u4f7f\u5176\u8fd0\u884c\u65f6\u957f\u5ea6\u5df2\u77e5\uff0c\n\u6bd4\u5982",(0,l.kt)("inlineCode",{parentName:"li"},"&[T]"),"\u548c",(0,l.kt)("inlineCode",{parentName:"li"},"Box<Trait>"),"\u3002")),(0,l.kt)("h2",{id:"\u6cdb\u578b\u548c\u591a\u6001"},"\u6cdb\u578b\u548c\u591a\u6001"),(0,l.kt)("p",null,"\u6cdb\u578b (generics) \u5728\u7c7b\u578b\u7406\u8bba\u4e2d\u79f0\u4f5c\u53c2\u6570\u591a\u6001 (parametric polymorphism)\uff0c\n\u610f\u4e3a\u5bf9\u4e8e\u7ed9\u5b9a\u53c2\u6570\u53ef\u4ee5\u6709\u591a\u79cd\u5f62\u5f0f\u7684\u51fd\u6570\u6216\u7c7b\u578b\u3002\u5148\u770bRust\u4e2d\u7684\u4e00\u4e2a\u6cdb\u578b\u4f8b\u5b50\uff1a  "),(0,l.kt)("p",null,"Option\u5728rust\u6807\u51c6\u5e93\u4e2d\u7684\u5b9a\u4e49:  "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"enum Option<T> {\n    Some(T),\n    None,\n}\n")),(0,l.kt)("p",null,"Option\u7684\u5178\u578b\u7528\u6cd5:  "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"let x: Option<i32> = Some(5);\nlet y: Option<f64> = Some(5.0f64);\n")),(0,l.kt)("p",null,"\u5176\u4e2d",(0,l.kt)("inlineCode",{parentName:"p"},"<T>"),"\u90e8\u5206\u8868\u660e\u5b83\u662f\u4e00\u4e2a\u6cdb\u578b\u6570\u636e\u7c7b\u578b\u3002\u5f53\u7136\uff0c\u6cdb\u578b\u53c2\u6570\u4e5f\u53ef\u4ee5\u7528\u4e8e\u51fd\u6570\u53c2\u6570\u548c\u7ed3\u6784\u4f53\u57df\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'// generic functions\nfn make_pair<T, U>(a: T, b: U) -> (T, U) {\n    (a, b)\n}\nlet couple = make_pair("man", "female");\n\n// generic structs\nstruct Point<T> {\n    x: T,\n    y: T,\n}\nlet int_origin = Point { x: 0, y: 0 };\nlet float_origin = Point { x: 0.0, y: 0.0 };\n')),(0,l.kt)("p",null,"\u5bf9\u4e8e\u591a\u6001\u51fd\u6570\uff0c\u5b58\u5728\u4e24\u79cd\u6d3e\u5206 (dispatch) \u673a\u5236\uff1a\u9759\u6001\u6d3e\u5206\u548c\u52a8\u6001\u6d3e\u5206\u3002\n\u524d\u8005\u7c7b\u4f3c\u4e8eC++\u7684\u6a21\u677f\uff0cRust\u4f1a\u751f\u6210\u9002\u7528\u4e8e\u6307\u5b9a\u7c7b\u578b\u7684\u7279\u6b8a\u51fd\u6570\uff0c\u7136\u540e\u5728\u88ab\u8c03\u7528\u7684\u4f4d\u7f6e\u8fdb\u884c\u66ff\u6362\uff0c\n\u597d\u5904\u662f\u5141\u8bb8\u51fd\u6570\u88ab\u5185\u8054\u8c03\u7528\uff0c\u8fd0\u884c\u6bd4\u8f83\u5feb\uff0c\u4f46\u662f\u4f1a\u5bfc\u81f4\u4ee3\u7801\u81a8\u80c0 (code bloat)\uff1b\n\u540e\u8005\u7c7b\u4f3c\u4e8eJava\u6216Go\u7684",(0,l.kt)("inlineCode",{parentName:"p"},"interface"),"\uff0cRust\u901a\u8fc7\u5f15\u5165\u7279\u6027\u5bf9\u8c61 (trait object) \u6765\u5b9e\u73b0\uff0c\n\u5728\u8fd0\u884c\u671f\u67e5\u627e\u865a\u8868 (vtable) \u6765\u9009\u62e9\u6267\u884c\u7684\u65b9\u6cd5\u3002\u7279\u6027\u5bf9\u8c61",(0,l.kt)("inlineCode",{parentName:"p"},"&Foo"),"\u5177\u6709\u548c\u7279\u6027",(0,l.kt)("inlineCode",{parentName:"p"},"Foo"),"\u76f8\u540c\u7684\u540d\u79f0\uff0c\n\u901a\u8fc7\u8f6c\u6362 (casting) \u6216\u8005\u5f3a\u5236\u591a\u6001\u5316 (coercing) \u4e00\u4e2a\u6307\u5411\u5177\u4f53\u7c7b\u578b\u7684\u6307\u9488\u6765\u521b\u5efa\u3002"),(0,l.kt)("p",null,"\u5f53\u7136\uff0c\u7279\u6027\u4e5f\u53ef\u4ee5\u63a5\u53d7\u6cdb\u578b\u53c2\u6570\u3002\u4f46\u662f\uff0c\u5f80\u5f80\u66f4\u597d\u7684\u5904\u7406\u65b9\u5f0f\u662f\u4f7f\u7528\u5173\u8054\u7c7b\u578b (associated type)\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"// use generic parameters\ntrait Graph<N, E> {\n    fn has_edge(&self, &N, &N) -> bool;\n    fn edges(&self, &N) -> Vec<E>;\n}\n\nfn distance<N, E, G: Graph<N, E>>(graph: &G, start: &N, end: &N) -> u32 {\n\n}\n\n// use associated types\ntrait Graph {\n    type N;\n    type E;\n\n    fn has_edge(&self, &Self::N, &Self::N) -> bool;\n    fn edges(&self, &Self::N) -> Vec<Self::E>;\n}\n\nfn distance<G: Graph>(graph: &G, start: &G::N, end: &G::N) -> uint {\n\n}\n\nstruct Node;\n\nstruct Edge;\n\nstruct SimpleGraph;\n\nimpl Graph for SimpleGraph {\n    type N = Node;\n    type E = Edge;\n\n    fn has_edge(&self, n1: &Node, n2: &Node) -> bool {\n\n    }\n\n    fn edges(&self, n: &Node) -> Vec<Edge> {\n\n    }\n}\n\nlet graph = SimpleGraph;\nlet object = Box::new(graph) as Box<Graph<N=Node, E=Edge>>;\n\n")))}d.isMDXComponent=!0}}]);