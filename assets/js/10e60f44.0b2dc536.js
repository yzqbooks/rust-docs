"use strict";(self.webpackChunkrust_docs=self.webpackChunkrust_docs||[]).push([[9993],{3905:function(n,t,e){e.d(t,{Zo:function(){return l},kt:function(){return d}});var r=e(7294);function a(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function i(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function s(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?i(Object(e),!0).forEach((function(t){a(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):i(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function o(n,t){if(null==n)return{};var e,r,a=function(n,t){if(null==n)return{};var e,r,a={},i=Object.keys(n);for(r=0;r<i.length;r++)e=i[r],t.indexOf(e)>=0||(a[e]=n[e]);return a}(n,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)e=i[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(a[e]=n[e])}return a}var p=r.createContext({}),u=function(n){var t=r.useContext(p),e=t;return n&&(e="function"==typeof n?n(t):s(s({},t),n)),e},l=function(n){var t=u(n.components);return r.createElement(p.Provider,{value:t},n.children)},c={inlineCode:"code",wrapper:function(n){var t=n.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(n,t){var e=n.components,a=n.mdxType,i=n.originalType,p=n.parentName,l=o(n,["components","mdxType","originalType","parentName"]),f=u(e),d=a,m=f["".concat(p,".").concat(d)]||f[d]||c[d]||i;return e?r.createElement(m,s(s({ref:t},l),{},{components:e})):r.createElement(m,s({ref:t},l))}));function d(n,t){var e=arguments,a=t&&t.mdxType;if("string"==typeof n||a){var i=e.length,s=new Array(i);s[0]=f;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=n,o.mdxType="string"==typeof n?n:a,s[1]=o;for(var u=2;u<i;u++)s[u]=e[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,e)}f.displayName="MDXCreateElement"},6527:function(n,t,e){e.r(t),e.d(t,{assets:function(){return l},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return c}});var r=e(7462),a=e(3366),i=(e(7294),e(3905)),s=["components"],o={},p="\u76ee\u5f55\u64cd\u4f5c:\u7b80\u5355grep",u={unversionedId:"std/fs-and-path",id:"std/fs-and-path",title:"\u76ee\u5f55\u64cd\u4f5c:\u7b80\u5355grep",description:"\u4e0a\u4e00\u8282\u6211\u4eec\u5b9e\u73b0\u4e86\u901a\u8fc7Command\u8c03\u7528subprocess\u3002\u8fd9\u4e00\u8282\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u81ea\u5df1\u7684\u4ee3\u7801\u53bb\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684grep\u3002\u5f53\u7136\u4e86\uff0c\u8fd9\u79cd\u57fa\u7840\u7684\u5de5\u5177\u4f60\u662f\u80fd\u627e\u5230\u6e90\u7801\u7684\uff0c\u800c\u6211\u4eec\u7684\u5b9e\u73b0\u4e5f\u5e76\u4e0d\u50cf\u771f\u6b63\u7684grep\u90a3\u6837\u6ce8\u91cd\u6548\u7387\uff0c\u672c\u8282\u7684\u4e3b\u8981\u4f5c\u7528\u5c31\u5728\u4e8e\u6f14\u793a\u6807\u51c6\u5e93API\u7684\u4f7f\u7528\u3002",source:"@site/docs/std/fs-and-path.md",sourceDirName:"std",slug:"/std/fs-and-path",permalink:"/rust-docs/docs/std/fs-and-path",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/std/fs-and-path.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u5b89\u5168\uff08Safety\uff09",permalink:"/rust-docs/docs/safe/safety"},next:{title:"\u7f51\u7edc\u6a21\u5757:W\u732b\u7684\u56de\u97f3",permalink:"/rust-docs/docs/std/net"}},l={},c=[],f={toc:c};function d(n){var t=n.components,e=(0,a.Z)(n,s);return(0,i.kt)("wrapper",(0,r.Z)({},f,e,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u76ee\u5f55\u64cd\u4f5c\u7b80\u5355grep"},"\u76ee\u5f55\u64cd\u4f5c:\u7b80\u5355grep"),(0,i.kt)("p",null,"\u4e0a\u4e00\u8282\u6211\u4eec\u5b9e\u73b0\u4e86\u901a\u8fc7",(0,i.kt)("inlineCode",{parentName:"p"},"Command"),"\u8c03\u7528subprocess\u3002\u8fd9\u4e00\u8282\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u81ea\u5df1\u7684\u4ee3\u7801\u53bb\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684grep\u3002\u5f53\u7136\u4e86\uff0c\u8fd9\u79cd\u57fa\u7840\u7684\u5de5\u5177\u4f60\u662f\u80fd\u627e\u5230\u6e90\u7801\u7684\uff0c\u800c\u6211\u4eec\u7684\u5b9e\u73b0\u4e5f\u5e76\u4e0d\u50cf\u771f\u6b63\u7684grep\u90a3\u6837\u6ce8\u91cd\u6548\u7387\uff0c\u672c\u8282\u7684\u4e3b\u8981\u4f5c\u7528\u5c31\u5728\u4e8e\u6f14\u793a\u6807\u51c6\u5e93API\u7684\u4f7f\u7528\u3002"),(0,i.kt)("p",null,"\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u5f53\u524d\u76ee\u5f55\u8fdb\u884c\u9012\u5f52\uff0c\u904d\u5386\uff0c\u6bcf\u5f53\u67e5\u627e\u5230\u6587\u4ef6\u7684\u65f6\u5019\uff0c\u6211\u4eec\u56de\u8c03\u4e00\u4e2a\u51fd\u6570\u3002"),(0,i.kt)("p",null,"\u4e8e\u662f\uff0c\u6211\u4eec\u5c31\u6709\u4e86\u8fd9\u4e48\u4e2a\u51fd\u6570\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"use std::env::args;\nuse std::io;\nuse std::fs::{self, File, DirEntry};\nuse std::path::Path;\n\nfn visit_dirs(dir: &Path, pattern: &String, cb: &Fn(&DirEntry, &String)) -> io::Result<()> {\n    if try!(fs::metadata(dir)).is_dir() {\n        for entry in try!(fs::read_dir(dir)) {\n            let entry = try!(entry);\n            if try!(fs::metadata(entry.path())).is_dir() {\n                try!(visit_dirs(&entry.path(), pattern, cb));\n            } else {\n                cb(&entry, pattern);\n            }\n        }\n    }else{\n        let entry = try!(try!(fs::read_dir(dir)).next().unwrap());\n        cb(&entry, pattern);\n    }\n    Ok(())\n}\n\n")),(0,i.kt)("p",null,"\u6211\u4eec\u6709\u4e86\u8fd9\u6837\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u6709\u540c\u5b66\u53ef\u80fd\u89c9\u5f97\u8fd9\u4ee3\u7801\u773c\u719f\u3002\u8fd9\u4e0d\u662f\u6807\u51c6\u5e93\u91cc\u7684\u4f8b\u5b50\u6539\u4e86\u4e00\u4e0b\u4e48\uff1f"),(0,i.kt)("p",null,"."),(0,i.kt)("p",null,"."),(0,i.kt)("p",null,"."),(0,i.kt)("p",null,"\u662f\u554a\uff01"),(0,i.kt)("p",null,"\u597d\u4e86\uff0c\u7ee7\u7eed\uff0c\u6211\u4eec\u9700\u8981\u8bfb\u53d6\u6bcf\u4e2a\u67e5\u5230\u7684\u6587\u4ef6\uff0c\u540c\u65f6\u5224\u65ad\u6bcf\u4e00\u884c\u91cc\u6709\u6ca1\u6709\u6240\u67e5\u627e\u7684\u5185\u5bb9\u3002\n\u6211\u4eec\u7528\u4e00\u4e2aBufferIO\u53bb\u8bfb\u53d6\u5404\u4e2a\u6587\u4ef6\uff0c\u540c\u65f6\u7528String\u7684\u81ea\u5e26\u65b9\u6cd5\u6765\u5224\u65ad\u5185\u5bb9\u662f\u5426\u5b58\u5728\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'fn call_back(de: &DirEntry, pt: &String) {\n    let mut f = File::open(de.path()).unwrap();\n    let mut buf = io::BufReader::new(f);\n    for line in io::BufRead::lines(buf) {\n        let line = line.unwrap_or("".to_string());\n        if line.contains(pt) {\n            println!("{}", &line);\n        }\n    }\n}\n')),(0,i.kt)("p",null,"\u6700\u540e\uff0c\u6211\u4eec\u5c06\u6574\u4e2a\u51fd\u6570\u8c03\u7528\u8d77\u6765\uff0c\u5982\u4e0b\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'use std::env::args;\nuse std::io;\nuse std::fs::{self, File, DirEntry};\nuse std::path::Path;\n\nfn visit_dirs(dir: &Path, pattern: &String, cb: &Fn(&DirEntry, &String)) -> io::Result<()> {\n    if try!(fs::metadata(dir)).is_dir() {\n        for entry in try!(fs::read_dir(dir)) {\n            let entry = try!(entry);\n            if try!(fs::metadata(entry.path())).is_dir() {\n                try!(visit_dirs(&entry.path(), pattern, cb));\n            } else {\n                cb(&entry, pattern);\n            }\n        }\n    }else{\n        let entry = try!(try!(fs::read_dir(dir)).next().unwrap());\n        cb(&entry, pattern);\n    }\n    Ok(())\n}\n\nfn call_back(de: &DirEntry, pt: &String) {\n    let mut f = File::open(de.path()).unwrap();\n    let mut buf = io::BufReader::new(f);\n    for line in io::BufRead::lines(buf) {\n        let line = line.unwrap_or("".to_string());\n        if line.contains(pt) {\n            println!("{}", &line);\n        }\n    }\n}\n\n// \u5b9e\u73b0\u8c03\u7528grep\u547d\u4ee4\u641c\u7d22\u6587\u4ef6\nfn main() {\n    let mut arg_iter = args();\n    arg_iter.next();\n    // panic if there is no one\n    let pattern = arg_iter.next().unwrap_or("main".to_string());\n    let pt =  arg_iter.next().unwrap_or("./".to_string());\n    let pt = Path::new(&pt);\n    visit_dirs(&pt, &pattern, &call_back).unwrap();\n}\n\n')),(0,i.kt)("p",null,"\u8c03\u7528\u5982\u4e0b\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'\u279c  demo git:(master) \u2717 ./target/debug/demo "fn main()" ../\nfn main() {\nfn main() { }\nfn main() {\n    pub fn main() {\n    pub fn main() {}\nfn main() {\n    pub fn main() {\n    pub fn main() {}\n')))}d.isMDXComponent=!0}}]);