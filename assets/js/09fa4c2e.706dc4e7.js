"use strict";(self.webpackChunkrust_docs=self.webpackChunkrust_docs||[]).push([[5527],{3905:function(e,t,r){r.d(t,{Zo:function(){return f},kt:function(){return d}});var n=r(7294);function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,l=function(e,t){if(null==e)return{};var r,n,l={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(l[r]=e[r]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(l[r]=e[r])}return l}var u=n.createContext({}),s=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},f=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,l=e.mdxType,o=e.originalType,u=e.parentName,f=i(e,["components","mdxType","originalType","parentName"]),p=s(r),d=l,m=p["".concat(u,".").concat(d)]||p[d]||c[d]||o;return r?n.createElement(m,a(a({ref:t},f),{},{components:r})):n.createElement(m,a({ref:t},f))}));function d(e,t){var r=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=r.length,a=new Array(o);a[0]=p;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:l,a[1]=i;for(var s=2;s<o;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},2830:function(e,t,r){r.r(t),r.d(t,{assets:function(){return f},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return c}});var n=r(7462),l=r(3366),o=(r(7294),r(3905)),a=["components"],i={},u="\u4e8c\u53c9\u6811",s={unversionedId:"data-structure/binary_tree",id:"data-structure/binary_tree",title:"\u4e8c\u53c9\u6811",description:"\u4e8c\u53c9\u6811\u7b80\u4ecb",source:"@site/docs/data-structure/binary_tree.md",sourceDirName:"data-structure",slug:"/data-structure/binary_tree",permalink:"/rust-docs/docs/data-structure/binary_tree",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/data-structure/binary_tree.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u5e76\u53d1\u7f16\u7a0b",permalink:"/rust-docs/docs/concurrency-parallel-thread/thread"},next:{title:"\u56fe",permalink:"/rust-docs/docs/data-structure/graph"}},f={},c=[{value:"\u4e8c\u53c9\u6811\u7b80\u4ecb",id:"\u4e8c\u53c9\u6811\u7b80\u4ecb",level:2},{value:"\u4e8c\u53c9\u6811\u4e0e\u6811\u7684\u533a\u522b",id:"\u4e8c\u53c9\u6811\u4e0e\u6811\u7684\u533a\u522b",level:2},{value:"\u5b9a\u4e49\u4e8c\u53c9\u6811\u7684\u7ed3\u6784",id:"\u5b9a\u4e49\u4e8c\u53c9\u6811\u7684\u7ed3\u6784",level:2},{value:"\u5b9e\u73b0\u4e8c\u53c9\u6811\u7684\u521d\u59cb\u5316\u4e0e\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u63d2\u5165",id:"\u5b9e\u73b0\u4e8c\u53c9\u6811\u7684\u521d\u59cb\u5316\u4e0e\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u63d2\u5165",level:2},{value:"\u4e8c\u53c9\u6811\u7684\u904d\u5386",id:"\u4e8c\u53c9\u6811\u7684\u904d\u5386",level:2},{value:"\u6d4b\u8bd5\u4ee3\u7801",id:"\u6d4b\u8bd5\u4ee3\u7801",level:2},{value:"\u7ec3\u4e60",id:"\u7ec3\u4e60",level:2}],p={toc:c};function d(e){var t=e.components,r=(0,l.Z)(e,a);return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u4e8c\u53c9\u6811"},"\u4e8c\u53c9\u6811"),(0,o.kt)("h2",{id:"\u4e8c\u53c9\u6811\u7b80\u4ecb"},"\u4e8c\u53c9\u6811\u7b80\u4ecb"),(0,o.kt)("p",null,"\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c\u4e8c\u53c9\u6811\u662f\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u6709\u4e24\u4e2a\u5b50\u6811\u7684\u6811\u7ed3\u6784\u3002\u901a\u5e38\u5b50\u6811\u88ab\u79f0\u4f5c\u201c\u5de6\u5b50\u6811\u201d\uff08left subtree\uff09\u548c\u201c\u53f3\u5b50\u6811\u201d\uff08right subtree\uff09\u3002\u4e8c\u53c9\u6811\u5e38\u88ab\u7528\u4e8e\u5b9e\u73b0\u4e8c\u53c9\u67e5\u627e\u6811\u548c\u4e8c\u53c9\u5806\u3002"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u5b50\u8282\u70b9\u4e0e\u7236\u8282\u70b9\u7684\u952e\u4e00\u822c\u6ee1\u8db3\u4e00\u5b9a\u7684\u987a\u5e8f\u5173\u7cfb\uff0c\u4e60\u60ef\u4e0a\uff0c\u5de6\u8282\u70b9\u7684\u952e\u5c11\u4e8e\u7236\u4eb2\u8282\u70b9\u7684\u952e\uff0c\u53f3\u8282\u70b9\u7684\u952e\u5927\u4e8e\u7236\u4eb2\u8282\u70b9\u7684\u952e\u3002")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u4e8c\u53c9\u5806\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5806\uff0c\u4e8c\u53c9\u5806\u662f\u5b8c\u5168\u4e8c\u5143\u6811\uff08\u4e8c\u53c9\u6811\uff09\u6216\u8005\u662f\u8fd1\u4f3c\u5b8c\u5168\u4e8c\u5143\u6811\uff08\u4e8c\u53c9\u6811\uff09\u3002\u4e8c\u53c9\u5806\u6709\u4e24\u79cd\uff1a\u6700\u5927\u5806\u548c\u6700\u5c0f\u5806\u3002\u6700\u5927\u5806\uff1a\u7236\u7ed3\u70b9\u7684\u952e\u603b\u662f\u5927\u4e8e\u6216\u7b49\u4e8e\u4efb\u4f55\u4e00\u4e2a\u5b50\u8282\u70b9\u7684\u952e\uff1b\u6700\u5c0f\u5806\uff1a\u7236\u7ed3\u70b9\u7684\u952e\u603b\u662f\u5c0f\u4e8e\u6216\u7b49\u4e8e\u4efb\u4f55\u4e00\u4e2a\u5b50\u8282\u70b9\u7684\u952e\u3002")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u4e8c\u53c9\u6811\u7684\u6bcf\u4e2a\u7ed3\u70b9\u81f3\u591a\u53ea\u6709\u4e8c\u68f5\u5b50\u6811(\u4e0d\u5b58\u5728\u5ea6\u5927\u4e8e2\u7684\u7ed3\u70b9)\uff0c\u4e8c\u53c9\u6811\u7684\u5b50\u6811\u6709\u5de6\u53f3\u4e4b\u5206\uff0c\u6b21\u5e8f\u4e0d\u80fd\u98a0\u5012\u3002\u4e8c\u53c9\u6811\u7684\u7b2ci\u5c42\u81f3\u591a\u67092^{i-1}\u4e2a\u7ed3\u70b9\uff1b\u6df1\u5ea6\u4e3ak\u7684\u4e8c\u53c9\u6811\u81f3\u591a\u67092^k-1\u4e2a\u7ed3\u70b9\uff1b\u5bf9\u4efb\u4f55\u4e00\u68f5\u4e8c\u53c9\u6811T\uff0c\u5982\u679c\u5176\u7ec8\u7aef\u7ed3\u70b9\u6570\u4e3an_0\uff0c\u5ea6\u4e3a2\u7684\u7ed3\u70b9\u6570\u4e3an_2\uff0c\u5219n_0=n_2+1\u3002")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u4e00\u68f5\u6df1\u5ea6\u4e3ak\uff0c\u4e14\u67092^k-1\u4e2a\u8282\u70b9\u79f0\u4e4b\u4e3a\u6ee1\u4e8c\u53c9\u6811\uff1b\u6df1\u5ea6\u4e3ak\uff0c\u6709n\u4e2a\u8282\u70b9\u7684\u4e8c\u53c9\u6811\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u4e0e\u6df1\u5ea6\u4e3ak\u7684\u6ee1\u4e8c\u53c9\u6811\u4e2d\uff0c\u5e8f\u53f7\u4e3a1\u81f3n\u7684\u8282\u70b9\u5bf9\u5e94\u65f6\uff0c\u79f0\u4e4b\u4e3a\u5b8c\u5168\u4e8c\u53c9\u6811\u3002")),(0,o.kt)("h2",{id:"\u4e8c\u53c9\u6811\u4e0e\u6811\u7684\u533a\u522b"},"\u4e8c\u53c9\u6811\u4e0e\u6811\u7684\u533a\u522b"),(0,o.kt)("p",null,"\u4e8c\u53c9\u6811",(0,o.kt)("em",{parentName:"p"},"\u4e0d\u662f"),"\u6811\u7684\u4e00\u79cd\u7279\u6b8a\u60c5\u5f62\uff0c\u5c3d\u7ba1\u5176\u4e0e\u6811\u6709\u8bb8\u591a\u76f8\u4f3c\u4e4b\u5904\uff0c\u4f46\u6811\u548c\u4e8c\u53c9\u6811\u6709\u4e24\u4e2a\u4e3b\u8981\u5dee\u522b\uff1a"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u6811\u4e2d\u7ed3\u70b9\u7684\u6700\u5927\u5ea6\u6570\u6ca1\u6709\u9650\u5236\uff0c\u800c\u4e8c\u53c9\u6811\u7ed3\u70b9\u7684\u6700\u5927\u5ea6\u6570\u4e3a2\u3002"),(0,o.kt)("li",{parentName:"ol"},"\u6811\u7684\u7ed3\u70b9\u65e0\u5de6\u3001\u53f3\u4e4b\u5206\uff0c\u800c\u4e8c\u53c9\u6811\u7684\u7ed3\u70b9\u6709\u5de6\u3001\u53f3\u4e4b\u5206\u3002")),(0,o.kt)("h2",{id:"\u5b9a\u4e49\u4e8c\u53c9\u6811\u7684\u7ed3\u6784"},"\u5b9a\u4e49\u4e8c\u53c9\u6811\u7684\u7ed3\u6784"),(0,o.kt)("p",null,"\u4e8c\u53c9\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u7531\u952ekey\u3001\u503cvalue\u4e0e\u5de6\u53f3\u5b50\u6811left/right\u7ec4\u6210\uff0c\u8fd9\u91cc\u6211\u4eec\u628a\u8282\u70b9\u58f0\u660e\u4e3a\u4e00\u4e2a\u6cdb\u578b\u7ed3\u6784\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"type TreeNode<K,V> = Option<Box<Node<K,V>>>;\n#[derive(Debug)]\nstruct Node<K,V: std::fmt::Display> {\n   left: TreeNode<K,V>,\n   right: TreeNode<K,V>,\n   key: K,\n   value: V,\n}\n")),(0,o.kt)("h2",{id:"\u5b9e\u73b0\u4e8c\u53c9\u6811\u7684\u521d\u59cb\u5316\u4e0e\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u63d2\u5165"},"\u5b9e\u73b0\u4e8c\u53c9\u6811\u7684\u521d\u59cb\u5316\u4e0e\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u63d2\u5165"),(0,o.kt)("p",null,"\u7531\u4e8e\u4e8c\u53c9\u67e5\u627e\u6811\u8981\u6c42\u952e\u53ef\u6392\u5e8f\uff0c\u6211\u4eec\u8981\u6c42K\u5b9e\u73b0PartialOrd"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"trait BinaryTree<K,V> {\n    fn pre_order(&self);\n    fn in_order(&self);\n    fn pos_order(&self);\n}\ntrait BinarySearchTree<K:PartialOrd,V>:BinaryTree<K,V> {\n    fn insert(&mut self, key:K,value: V);\n}\nimpl<K,V:std::fmt::Display> Node<K,V> {\n    fn new(key: K,value: V) -> Self {\n        Node{\n            left: None,\n            right: None,\n            value: value,\n            key: key,\n        }\n    }\n}\nimpl<K:PartialOrd,V:std::fmt::Display> BinarySearchTree<K,V> for Node<K,V>{\n    fn insert(&mut self, key:K,value:V) {\n        if self.key < key {\n            if let Some(ref mut right) = self.right {\n                right.insert(key,value);\n            } else {\n                self.right = Some(Box::new(Node::new(key,value)));\n            }\n        } else {\n            if let Some(ref mut left) = self.left {\n                left.insert(key,value);\n            } else {\n                self.left = Some(Box::new(Node::new(key,value)));\n            }\n        }\n    }\n}\n")),(0,o.kt)("h2",{id:"\u4e8c\u53c9\u6811\u7684\u904d\u5386"},"\u4e8c\u53c9\u6811\u7684\u904d\u5386"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u5148\u5e8f\u904d\u5386\uff1a\u9996\u5148\u8bbf\u95ee\u6839\uff0c\u518d\u5148\u5e8f\u904d\u5386\u5de6\uff08\u53f3\uff09\u5b50\u6811\uff0c\u6700\u540e\u5148\u5e8f\u904d\u5386\u53f3\uff08\u5de6\uff09\u5b50\u6811\u3002"),(0,o.kt)("li",{parentName:"ul"},"\u4e2d\u5e8f\u904d\u5386\uff1a\u9996\u5148\u4e2d\u5e8f\u904d\u5386\u5de6\uff08\u53f3\uff09\u5b50\u6811\uff0c\u518d\u8bbf\u95ee\u6839\uff0c\u6700\u540e\u4e2d\u5e8f\u904d\u5386\u53f3\uff08\u5de6\uff09\u5b50\u6811\u3002"),(0,o.kt)("li",{parentName:"ul"},"\u540e\u5e8f\u904d\u5386\uff1a\u9996\u5148\u540e\u5e8f\u904d\u5386\u5de6\uff08\u53f3\uff09\u5b50\u6811\uff0c\u518d\u540e\u5e8f\u904d\u5386\u53f3\uff08\u5de6\uff09\u5b50\u6811\uff0c\u6700\u540e\u8bbf\u95ee\u6839\u3002")),(0,o.kt)("p",null,"\u4e0b\u9762\u662f\u4ee3\u7801\u5b9e\u73b0\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'impl<K,V:std::fmt::Display> BinaryTree<K,V> for Node<K,V> {\n    fn pre_order(&self) {\n        println!("{}", self.value);\n\n        if let Some(ref left) = self.left {\n            left.pre_order();\n        }\n        if let Some(ref right) = self.right {\n            right.pre_order();\n        }\n    }\n\n    fn in_order(&self) {\n        if let Some(ref left) = self.left {\n            left.in_order();\n        }\n        println!("{}", self.value);\n        if let Some(ref right) = self.right {\n            right.in_order();\n        }\n    }\n    fn pos_order(&self) {\n        if let Some(ref left) = self.left {\n            left.pos_order();\n        }\n        if let Some(ref right) = self.right {\n            right.pos_order();\n        }\n        println!("{}", self.value);\n    }\n}\n')),(0,o.kt)("h2",{id:"\u6d4b\u8bd5\u4ee3\u7801"},"\u6d4b\u8bd5\u4ee3\u7801"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'type BST<K,V> = Node<K,V>;\n\nfn test_insert() {\n    let mut root = BST::<i32,i32>::new(3,4);\n    root.insert(2,3);\n    root.insert(4,6);\n    root.insert(5,5);\n    root.insert(6,6);\n    root.insert(1,8);\n    if let Some(ref left) = root.left {\n        assert_eq!(left.value, 3);\n    }\n\n    if let Some(ref right) = root.right {\n        assert_eq!(right.value, 6);\n        if let Some(ref right) = right.right {\n            assert_eq!(right.value, 5);\n        }\n    }\n    println!("Pre Order traversal");\n    root.pre_order();\n    println!("In Order traversal");\n    root.in_order();\n    println!("Pos Order traversal");\n    root.pos_order();\n}\n\nfn main() {\n    test_insert();\n}\n')),(0,o.kt)("h2",{id:"\u7ec3\u4e60"},"\u7ec3\u4e60"),(0,o.kt)("p",null,"\u57fa\u4e8e\u4ee5\u4e0a\u4ee3\u7801\uff0c\u4fee\u6539\u6210\u4e8c\u53c9\u5806\u7684\u5f62\u5f0f\u3002"))}d.isMDXComponent=!0}}]);