"use strict";(self.webpackChunkrust_docs=self.webpackChunkrust_docs||[]).push([[9753],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return k}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),s=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(o.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=s(t),k=a,c=d["".concat(o,".").concat(k)]||d[k]||m[k]||l;return t?r.createElement(c,i(i({ref:n},u),{},{components:t})):r.createElement(c,i({ref:n},u))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=d;var p={};for(var o in n)hasOwnProperty.call(n,o)&&(p[o]=n[o]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var s=2;s<l;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1145:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return o},default:function(){return k},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return m}});var r=t(7462),a=t(3366),l=(t(7294),t(3905)),i=["components"],p={},o="17.\u9519\u8bef\u5904\u7406",s={unversionedId:"error-handling/option-result",id:"error-handling/option-result",title:"17.\u9519\u8bef\u5904\u7406",description:"\u9519\u8bef\u5904\u7406\u662f\u4fdd\u8bc1\u7a0b\u5e8f\u5065\u58ee\u6027\u7684\u524d\u63d0\uff0c\u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\u9519\u8bef\u5904\u7406\u7684\u65b9\u5f0f\u5927\u81f4\u5206\u4e3a\u4e24\u79cd\uff1a\u629b\u51fa\u5f02\u5e38\uff08exceptions\uff09\u548c\u4f5c\u4e3a\u503c\u8fd4\u56de\u3002",source:"@site/docs/error-handling/option-result.md",sourceDirName:"error-handling",slug:"/error-handling/option-result",permalink:"/rust-docs/docs/error-handling/option-result",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/error-handling/option-result.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"VS Code \u5b89\u88c5\u914d\u7f6e",permalink:"/rust-docs/docs/editors/vscode"},next:{title:"\u8c03\u7528ffi\u51fd\u6570",permalink:"/rust-docs/docs/ffi/calling-ffi-function"}},u={},m=[{value:"17.1 Option\u548cResult",id:"171-option\u548cresult",level:2},{value:"Option",id:"option",level:3},{value:"unwrap",id:"unwrap",level:4},{value:"map",id:"map",level:4},{value:"unwrap_or",id:"unwrap_or",level:4},{value:"and_then",id:"and_then",level:4},{value:"Result",id:"result",level:3},{value:"unwrap",id:"unwrap-1",level:4},{value:"Result\u6211\u4eec\u4ece\u4f8b\u5b50\u5f00\u59cb",id:"result\u6211\u4eec\u4ece\u4f8b\u5b50\u5f00\u59cb",level:4},{value:"Result\u522b\u540d",id:"result\u522b\u540d",level:4},{value:"\u7ec4\u5408Option\u548cResult",id:"\u7ec4\u5408option\u548cresult",level:3},{value:"\u590d\u6742\u7684\u4f8b\u5b50",id:"\u590d\u6742\u7684\u4f8b\u5b50",level:4},{value:"try!",id:"try",level:3},{value:"\u7ec4\u5408\u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b",id:"\u7ec4\u5408\u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b",level:4},{value:"\u603b\u7ed3",id:"\u603b\u7ed3",level:3}],d={toc:m};function k(e){var n=e.components,t=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"17\u9519\u8bef\u5904\u7406"},"17.\u9519\u8bef\u5904\u7406"),(0,l.kt)("p",null,"\u9519\u8bef\u5904\u7406\u662f\u4fdd\u8bc1\u7a0b\u5e8f\u5065\u58ee\u6027\u7684\u524d\u63d0\uff0c\u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\u9519\u8bef\u5904\u7406\u7684\u65b9\u5f0f\u5927\u81f4\u5206\u4e3a\u4e24\u79cd\uff1a\u629b\u51fa\u5f02\u5e38\uff08exceptions\uff09\u548c\u4f5c\u4e3a\u503c\u8fd4\u56de\u3002"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Rust")," \u5c06\u9519\u8bef\u4f5c\u4e3a\u503c\u8fd4\u56de\u5e76\u4e14\u63d0\u4f9b\u4e86\u539f\u751f\u7684\u4f18\u96c5\u7684\u9519\u8bef\u5904\u7406\u65b9\u6848\u3002"),(0,l.kt)("p",null,"\u719f\u7ec3\u638c\u63e1\u9519\u8bef\u5904\u7406\u662f\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\u975e\u5e38\u91cd\u8981\u7684\u73af\u8282\uff0c\u8ba9\u6211\u4e00\u8d77\u6765\u770b\u770b",(0,l.kt)("strong",{parentName:"p"},"Rust"),"\u5c55\u73b0\u7ed9\u6211\u4eec\u7684\u9519\u8bef\u5904\u7406\u827a\u672f\u3002"),(0,l.kt)("h2",{id:"171-option\u548cresult"},"17.1 Option\u548cResult"),(0,l.kt)("p",null,"\u8c28\u614e\u4f7f\u7528",(0,l.kt)("inlineCode",{parentName:"p"},"panic"),"\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'fn guess(n: i32) -> bool {\n    if n < 1 || n > 10 {\n        panic!("Invalid number: {}", n);\n    }\n    n == 5\n}\n\nfn main() {\n    guess(11);\n}\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"panic"),"\u4f1a\u5bfc\u81f4\u5f53\u524d\u7ebf\u7a0b\u7ed3\u675f\uff0c\u751a\u81f3\u662f\u6574\u4e2a\u7a0b\u5e8f\u7684\u7ed3\u675f\uff0c\u8fd9\u5f80\u5f80\u662f\u4e0d\u88ab\u671f\u671b\u770b\u5230\u7684\u7ed3\u679c\u3002\uff08\u7f16\u5199\u793a\u4f8b\u6216\u8005\u7b80\u77ed\u4ee3\u7801\u7684\u65f6\u5019",(0,l.kt)("inlineCode",{parentName:"p"},"panic"),"\u4e0d\u5931\u4e3a\u4e00\u4e2a\u597d\u7684\u5efa\u8bae\uff09"),(0,l.kt)("h3",{id:"option"},"Option"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"enum Option<T> {\n    None,\n    Some(T),\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Option")," \u662fRust\u7684\u7cfb\u7edf\u7c7b\u578b\uff0c\u7528\u6765\u8868\u793a\u503c\u4e0d\u5b58\u5728\u7684\u53ef\u80fd\uff0c\u8fd9\u5728\u7f16\u7a0b\u4e2d\u662f\u4e00\u4e2a\u597d\u7684\u5b9e\u8df5\uff0c\u5b83\u5f3a\u5236",(0,l.kt)("strong",{parentName:"p"},"Rust"),"\u68c0\u6d4b\u548c\u5904\u7406\u503c\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\u3002\u4f8b\u5982\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"fn find(haystack: &str, needle: char) -> Option<usize> {\n    for (offset, c) in haystack.char_indices() {\n        if c == needle {\n            return Some(offset);\n        }\n    }\n    None\n}\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"find"),"\u5728\u5b57\u7b26\u4e32",(0,l.kt)("inlineCode",{parentName:"p"},"haystack"),"\u4e2d\u67e5\u627e",(0,l.kt)("inlineCode",{parentName:"p"},"needle"),"\u5b57\u7b26\uff0c\u4e8b\u5b9e\u4e0a\u7ed3\u679c\u4f1a\u51fa\u73b0\u4e24\u79cd\u53ef\u80fd\uff0c\u6709\uff08",(0,l.kt)("inlineCode",{parentName:"p"},"Some(usize)"),")\u6216\u65e0\uff08",(0,l.kt)("inlineCode",{parentName:"p"},"None"),"\uff09\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n    let file_name = "foobar.rs";\n    match find(file_name, \'.\') {\n        None => println!("No file extension found."),\n        Some(i) => println!("File extension: {}", &file_name[i+1..]),\n    }\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Rust")," \u4f7f\u7528\u6a21\u5f0f\u5339\u914d\u6765\u5904\u7406\u8fd4\u56de\u503c\uff0c\u8c03\u7528\u8005\u5fc5\u987b\u5904\u7406\u7ed3\u679c\u4e3a",(0,l.kt)("inlineCode",{parentName:"p"},"None"),"\u7684\u60c5\u51b5\u3002\u8fd9\u5f80\u5f80\u662f\u4e00\u4e2a\u597d\u7684\u7f16\u7a0b\u4e60\u60ef\uff0c\u53ef\u4ee5\u51cf\u5c11\u6f5c\u5728\u7684bug\u3002",(0,l.kt)("strong",{parentName:"p"},"Option")," \u5305\u542b\u4e00\u4e9b\u65b9\u6cd5\u6765\u7b80\u5316\u6a21\u5f0f\u5339\u914d\uff0c\u6bd5\u7adf\u8fc7\u591a\u7684",(0,l.kt)("inlineCode",{parentName:"p"},"match"),"\u4f1a\u4f7f\u4ee3\u7801\u53d8\u5f97\u81c3\u80bf\uff0c\u8fd9\u4e5f\u662f\u6ecb\u751fbug\u7684\u539f\u56e0\u4e4b\u4e00\u3002"),(0,l.kt)("h4",{id:"unwrap"},"unwrap"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'impl<T> Option<T> {\n    fn unwrap(self) -> T {\n        match self {\n            Option::Some(val) => val,\n            Option::None =>\n              panic!("called `Option::unwrap()` on a `None` value"),\n        }\n    }\n}\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"unwrap"),"\u5f53\u9047\u5230",(0,l.kt)("inlineCode",{parentName:"p"},"None"),"\u503c\u65f6\u4f1apanic\uff0c\u5982\u524d\u9762\u6240\u8bf4\u8fd9\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u5de5\u7a0b\u5b9e\u8df5\u3002\u4e0d\u8fc7\u6709\u4e9b\u65f6\u5019\u5374\u975e\u5e38\u6709\u7528\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"\u5728\u4f8b\u5b50\u548c\u7b80\u5355\u5feb\u901f\u7684\u7f16\u7801\u4e2d")," \u6709\u7684\u65f6\u5019\u4f60\u53ea\u662f\u9700\u8981\u4e00\u4e2a\u5c0f\u4f8b\u5b50\u6216\u8005\u4e00\u4e2a\u7b80\u5355\u7684\u5c0f\u7a0b\u5e8f\uff0c\u8f93\u5165\u8f93\u51fa\u5df2\u7ecf\u786e\u5b9a\uff0c\u4f60\u6839\u672c\u6ca1\u5fc5\u8981\u82b1\u592a\u591a\u65f6\u95f4\u8003\u8651\u9519\u8bef\u5904\u7406\uff0c\u4f7f\u7528",(0,l.kt)("inlineCode",{parentName:"li"},"unwrap"),"\u53d8\u5f97\u975e\u5e38\u5408\u9002\u3002"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"\u5f53\u7a0b\u5e8f\u9047\u5230\u4e86\u81f4\u547d\u7684bug\uff0cpanic\u662f\u6700\u4f18\u9009\u62e9"))),(0,l.kt)("h4",{id:"map"},"map"),(0,l.kt)("p",null,"\u5047\u5982\u6211\u4eec\u8981\u5728\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u627e\u5230\u6587\u4ef6\u7684\u6269\u5c55\u540d\uff0c\u6bd4\u5982",(0,l.kt)("inlineCode",{parentName:"p"},"foo.rs"),"\u4e2d\u7684",(0,l.kt)("inlineCode",{parentName:"p"},"rs"),"\uff0c \u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'fn extension_explicit(file_name: &str) -> Option<&str> {\n    match find(file_name, \'.\') {\n        None => None,\n        Some(i) => Some(&file_name[i+1..]),\n    }\n}\n\nfn main() {\n    match extension_explicit("foo.rs") {\n        None => println!("no extension"),\n        Some(ext) =>  assert_eq!(ext, "rs"),\n    }\n}\n')),(0,l.kt)("p",null,"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528",(0,l.kt)("inlineCode",{parentName:"p"},"map"),"\u7b80\u5316\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"// map\u662f\u6807\u51c6\u5e93\u4e2d\u7684\u65b9\u6cd5\nfn map<F, T, A>(option: Option<T>, f: F) -> Option<A> where F: FnOnce(T) -> A {\n    match option {\n        None => None,\n        Some(value) => Some(f(value)),\n    }\n}\n// \u4f7f\u7528map\u53bb\u6389match\nfn extension(file_name: &str) -> Option<&str> {\n    find(file_name, '.').map(|i| &file_name[i+1..])\n}\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"map"),"\u5982\u679c\u6709\u503c",(0,l.kt)("inlineCode",{parentName:"p"},"Some(T)"),"\u4f1a\u6267\u884c",(0,l.kt)("inlineCode",{parentName:"p"},"f"),"\uff0c\u53cd\u4e4b\u76f4\u63a5\u8fd4\u56de",(0,l.kt)("inlineCode",{parentName:"p"},"None"),"\u3002"),(0,l.kt)("h4",{id:"unwrap_or"},"unwrap_or"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"fn unwrap_or<T>(option: Option<T>, default: T) -> T {\n    match option {\n        None => default,\n        Some(value) => value,\n    }\n}\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"unwrap_or"),"\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9ed8\u8ba4\u503c",(0,l.kt)("inlineCode",{parentName:"p"},"default"),"\uff0c\u5f53\u503c\u4e3a",(0,l.kt)("inlineCode",{parentName:"p"},"None"),"\u65f6\u8fd4\u56de",(0,l.kt)("inlineCode",{parentName:"p"},"default"),"\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n    assert_eq!(extension("foo.rs").unwrap_or("rs"), "rs");\n    assert_eq!(extension("foo").unwrap_or("rs"), "rs");\n}\n')),(0,l.kt)("h4",{id:"and_then"},"and_then"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"fn and_then<F, T, A>(option: Option<T>, f: F) -> Option<A>\n        where F: FnOnce(T) -> Option<A> {\n    match option {\n        None => None,\n        Some(value) => f(value),\n    }\n}\n")),(0,l.kt)("p",null,"\u770b\u8d77\u6765",(0,l.kt)("inlineCode",{parentName:"p"},"and_then"),"\u548c",(0,l.kt)("inlineCode",{parentName:"p"},"map"),"\u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7",(0,l.kt)("inlineCode",{parentName:"p"},"map"),"\u53ea\u662f\u628a\u503c\u4e3a",(0,l.kt)("inlineCode",{parentName:"p"},"Some(t)"),"\u91cd\u65b0\u6620\u5c04\u4e86\u4e00\u904d\uff0c",(0,l.kt)("inlineCode",{parentName:"p"},"and_then"),"\u5219\u4f1a\u8fd4\u56de\u53e6\u4e00\u4e2a",(0,l.kt)("inlineCode",{parentName:"p"},"Option"),"\u3002\u5982\u679c\u6211\u4eec\u5728\u4e00\u4e2a\u6587\u4ef6\u8def\u5f84\u4e2d\u627e\u5230\u5b83\u7684\u6269\u5c55\u540d\uff0c\u8fd9\u65f6\u5019\u5c31\u4f1a\u53d8\u5f97\u5c24\u4e3a\u91cd\u8981\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"use std::path::Path;\nfn file_name(file_path: &str) -> Option<&str> {\n    let path = Path::new(file_path);\n    path.file_name().to_str()\n}\nfn file_path_ext(file_path: &str) -> Option<&str> {\n    file_name(file_path).and_then(extension)\n}\n")),(0,l.kt)("h3",{id:"result"},"Result"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"enum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Result"),"\u662f",(0,l.kt)("inlineCode",{parentName:"p"},"Option"),"\u7684\u66f4\u901a\u7528\u7684\u7248\u672c\uff0c\u6bd4\u8d77",(0,l.kt)("inlineCode",{parentName:"p"},"Option"),"\u7ed3\u679c\u4e3a",(0,l.kt)("inlineCode",{parentName:"p"},"None"),"\u5b83\u89e3\u91ca\u4e86\u7ed3\u679c\u9519\u8bef\u7684\u539f\u56e0\uff0c\u6240\u4ee5\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"type Option<T> = Result<T, ()>;\n")),(0,l.kt)("p",null,"\u8fd9\u6837\u7684\u522b\u540d\u662f\u4e00\u6837\u7684\uff08",(0,l.kt)("inlineCode",{parentName:"p"},"()"),"\u6807\u793a\u7a7a\u5143\u7ec4\uff0c\u5b83\u65e2\u662f",(0,l.kt)("inlineCode",{parentName:"p"},"()"),"\u7c7b\u578b\u4e5f\u53ef\u4ee5\u662f",(0,l.kt)("inlineCode",{parentName:"p"},"()"),"\u503c\uff09"),(0,l.kt)("h4",{id:"unwrap-1"},"unwrap"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'impl<T, E: ::std::fmt::Debug> Result<T, E> {\n    fn unwrap(self) -> T {\n        match self {\n            Result::Ok(val) => val,\n            Result::Err(err) =>\n              panic!("called `Result::unwrap()` on an `Err` value: {:?}", err),\n        }\n    }\n}\n')),(0,l.kt)("p",null,"\u6ca1\u9519\u548c",(0,l.kt)("inlineCode",{parentName:"p"},"Option"),"\u4e00\u6837\uff0c\u4e8b\u5b9e\u4e0a\u5b83\u4eec\u62e5\u6709\u5f88\u591a\u7c7b\u4f3c\u7684\u65b9\u6cd5\uff0c\u4e0d\u540c\u7684\u662f\uff0c",(0,l.kt)("inlineCode",{parentName:"p"},"Result"),"\u5305\u62ec\u4e86\u9519\u8bef\u7684\u8be6\u7ec6\u63cf\u8ff0\uff0c\u8fd9\u5bf9\u4e8e\u8c03\u8bd5\u4eba\u5458\u6765\u8bf4\uff0c\u8fd9\u662f\u53cb\u597d\u7684\u3002"),(0,l.kt)("h4",{id:"result\u6211\u4eec\u4ece\u4f8b\u5b50\u5f00\u59cb"},"Result\u6211\u4eec\u4ece\u4f8b\u5b50\u5f00\u59cb"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'fn double_number(number_str: &str) -> i32 {\n    2 * number_str.parse::<i32>().unwrap()\n}\n\nfn main() {\n    let n: i32 = double_number("10");\n    assert_eq!(n, 20);\n}\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"double_number"),"\u4ece\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u89e3\u6790\u51fa\u4e00\u4e2a",(0,l.kt)("inlineCode",{parentName:"p"},"i32"),"\u7684\u6570\u5b57\u5e76",(0,l.kt)("inlineCode",{parentName:"p"},"*2"),"\uff0c",(0,l.kt)("inlineCode",{parentName:"p"},"main"),"\u4e2d\u8c03\u7528\u770b\u8d77\u6765\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u4f46\u662f\u5982\u679c\u628a",(0,l.kt)("inlineCode",{parentName:"p"},'"10"'),"\u6362\u6210\u5176\u4ed6\u89e3\u6790\u4e0d\u4e86\u7684\u5b57\u7b26\u4e32\u7a0b\u5e8f\u4fbf\u4f1apanic"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"impl str {\n    fn parse<F: FromStr>(&self) -> Result<F, F::Err>;\n}\n\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"parse"),"\u8fd4\u56de\u4e00\u4e2a",(0,l.kt)("inlineCode",{parentName:"p"},"Result"),"\uff0c\u4f46\u8ba9\u6211\u4eec\u4e5f\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a",(0,l.kt)("inlineCode",{parentName:"p"},"Option"),"\uff0c\u6bd5\u7adf\u4e00\u4e2a\u5b57\u7b26\u4e32\u8981\u4e48\u80fd\u89e3\u6790\u6210\u4e00\u4e2a\u6570\u5b57\u8981\u4e48\u4e0d\u80fd\uff0c\u4f46\u662f",(0,l.kt)("inlineCode",{parentName:"p"},"Result"),"\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u4fe1\u606f\uff08\u8981\u4e48\u662f\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\uff0c\u4e00\u4e2a\u65e0\u6548\u7684\u6570\u4f4d\uff0c\u592a\u5927\u6216\u592a\u5c0f\uff09\uff0c\u8fd9\u5bf9\u4e8e\u4f7f\u7528\u8005\u662f\u53cb\u597d\u7684\u3002\u5f53\u4f60\u9762\u5bf9\u4e00\u4e2aOption\u548cResult\u4e4b\u95f4\u7684\u9009\u62e9\u65f6\u3002\u5982\u679c\u4f60\u53ef\u4ee5\u63d0\u4f9b\u8be6\u7ec6\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u90a3\u4e48\u5927\u6982\u4f60\u4e5f\u5e94\u8be5\u63d0\u4f9b\u3002"),(0,l.kt)("p",null,"\u8fd9\u91cc\u9700\u8981\u7406\u89e3\u4e00\u4e0b",(0,l.kt)("inlineCode",{parentName:"p"},"FromStr"),"\u8fd9\u4e2a",(0,l.kt)("strong",{parentName:"p"},"trait"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"pub trait FromStr {\n    type Err;\n    fn from_str(s: &str) -> Result<Self, Self::Err>;\n}\n\nimpl FromStr for i32 {\n    type Err = ParseIntError;\n    fn from_str(src: &str) -> Result<i32, ParseIntError> {\n\n    }\n}\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"number_str.parse::<i32>()"),"\u4e8b\u5b9e\u4e0a\u8c03\u7528\u7684\u662f",(0,l.kt)("inlineCode",{parentName:"p"},"i32"),"\u7684",(0,l.kt)("inlineCode",{parentName:"p"},"FromStr"),"\u5b9e\u73b0\u3002"),(0,l.kt)("p",null,"\u6211\u4eec\u9700\u8981\u6539\u5199\u8fd9\u4e2a\u4f8b\u5b50\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'use std::num::ParseIntError;\n\nfn double_number(number_str: &str) -> Result<i32, ParseIntError> {\n    number_str.parse::<i32>().map(|n| 2 * n)\n}\n\nfn main() {\n    match double_number("10") {\n        Ok(n) => assert_eq!(n, 20),\n        Err(err) => println!("Error: {:?}", err),\n    }\n}\n')),(0,l.kt)("p",null,"\u4e0d\u4ec5\u4ec5\u662f",(0,l.kt)("inlineCode",{parentName:"p"},"map"),"\uff0c",(0,l.kt)("inlineCode",{parentName:"p"},"Result"),"\u540c\u6837\u5305\u542b\u4e86",(0,l.kt)("inlineCode",{parentName:"p"},"unwrap_or"),"\u548c",(0,l.kt)("inlineCode",{parentName:"p"},"and_then"),"\u3002\u4e5f\u6709\u4e00\u4e9b\u7279\u6709\u7684\u9488\u5bf9\u9519\u8bef\u7c7b\u578b\u7684\u65b9\u6cd5",(0,l.kt)("inlineCode",{parentName:"p"},"map_err"),"\u548c",(0,l.kt)("inlineCode",{parentName:"p"},"or_else"),"\u3002"),(0,l.kt)("h4",{id:"result\u522b\u540d"},"Result\u522b\u540d"),(0,l.kt)("p",null,"\u5728",(0,l.kt)("strong",{parentName:"p"},"Rust"),"\u7684\u6807\u51c6\u5e93\u4e2d\u4f1a\u7ecf\u5e38\u51fa\u73b0Result\u7684\u522b\u540d\uff0c\u7528\u6765\u9ed8\u8ba4\u786e\u8ba4\u5176\u4e2d",(0,l.kt)("inlineCode",{parentName:"p"},"Ok(T)"),"\u6216\u8005",(0,l.kt)("inlineCode",{parentName:"p"},"Err(E)"),"\u7684\u7c7b\u578b\uff0c\u8fd9\u80fd\u51cf\u5c11\u91cd\u590d\u7f16\u7801\u3002\u6bd4\u5982",(0,l.kt)("inlineCode",{parentName:"p"},"io::Result")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"use std::num::ParseIntError;\nuse std::result;\n\ntype Result<T> = result::Result<T, ParseIntError>;\n\nfn double_number(number_str: &str) -> Result<i32> {\n    unimplemented!();\n}\n")),(0,l.kt)("h3",{id:"\u7ec4\u5408option\u548cresult"},"\u7ec4\u5408Option\u548cResult"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Option"),"\u7684\u65b9\u6cd5",(0,l.kt)("inlineCode",{parentName:"p"},"ok_or"),"\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"fn ok_or<T, E>(option: Option<T>, err: E) -> Result<T, E> {\n    match option {\n        Some(val) => Ok(val),\n        None => Err(err),\n    }\n}\n")),(0,l.kt)("p",null,"\u53ef\u4ee5\u5728\u503c\u4e3a",(0,l.kt)("inlineCode",{parentName:"p"},"None"),"\u7684\u65f6\u5019\u8fd4\u56de\u4e00\u4e2a",(0,l.kt)("inlineCode",{parentName:"p"},"Result::Err(E)"),"\uff0c\u503c\u4e3a",(0,l.kt)("inlineCode",{parentName:"p"},"Some(T)"),"\u7684\u65f6\u5019\u8fd4\u56de",(0,l.kt)("inlineCode",{parentName:"p"},"Ok(T)"),"\uff0c\u5229\u7528\u5b83\u6211\u4eec\u53ef\u4ee5\u7ec4\u5408",(0,l.kt)("inlineCode",{parentName:"p"},"Option"),"\u548c",(0,l.kt)("inlineCode",{parentName:"p"},"Result"),"\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'use std::env;\n\nfn double_arg(mut argv: env::Args) -> Result<i32, String> {\n    argv.nth(1)\n        .ok_or("Please give at least one argument".to_owned())\n        .and_then(|arg| arg.parse::<i32>().map_err(|err| err.to_string()))\n        .map(|n| 2 * n)\n}\n\nfn main() {\n    match double_arg(env::args()) {\n        Ok(n) => println!("{}", n),\n        Err(err) => println!("Error: {}", err),\n    }\n}\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"double_arg"),"\u5c06\u4f20\u5165\u7684\u547d\u4ee4\u884c\u53c2\u6570\u8f6c\u5316\u4e3a\u6570\u5b57\u5e76\u7ffb\u500d\uff0c",(0,l.kt)("inlineCode",{parentName:"p"},"ok_or"),"\u5c06",(0,l.kt)("inlineCode",{parentName:"p"},"Option"),"\u7c7b\u578b\u8f6c\u6362\u6210",(0,l.kt)("inlineCode",{parentName:"p"},"Result"),"\uff0c",(0,l.kt)("inlineCode",{parentName:"p"},"map_err"),"\u5f53\u503c\u4e3a",(0,l.kt)("inlineCode",{parentName:"p"},"Err(E)"),"\u65f6\u8c03\u7528\u4f5c\u4e3a\u53c2\u6570\u7684\u51fd\u6570\u5904\u7406\u9519\u8bef"),(0,l.kt)("h4",{id:"\u590d\u6742\u7684\u4f8b\u5b50"},"\u590d\u6742\u7684\u4f8b\u5b50"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'use std::fs::File;\nuse std::io::Read;\nuse std::path::Path;\n\nfn file_double<P: AsRef<Path>>(file_path: P) -> Result<i32, String> {\n    File::open(file_path)\n         .map_err(|err| err.to_string())\n         .and_then(|mut file| {\n              let mut contents = String::new();\n              file.read_to_string(&mut contents)\n                  .map_err(|err| err.to_string())\n                  .map(|_| contents)\n         })\n         .and_then(|contents| {\n              contents.trim().parse::<i32>()\n                      .map_err(|err| err.to_string())\n         })\n         .map(|n| 2 * n)\n}\n\nfn main() {\n    match file_double("foobar") {\n        Ok(n) => println!("{}", n),\n        Err(err) => println!("Error: {}", err),\n    }\n}\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"file_double"),"\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5185\u5bb9\u5e76\u5c06\u5176\u8f6c\u5316\u6210",(0,l.kt)("inlineCode",{parentName:"p"},"i32"),"\u7c7b\u578b\u518d\u7ffb\u500d\u3002\n\u8fd9\u4e2a\u4f8b\u5b50\u770b\u8d77\u6765\u5df2\u7ecf\u5f88\u590d\u6742\u4e86\uff0c\u5b83\u4f7f\u7528\u4e86\u591a\u4e2a\u7ec4\u5408\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4f20\u7edf\u7684",(0,l.kt)("inlineCode",{parentName:"p"},"match"),"\u548c",(0,l.kt)("inlineCode",{parentName:"p"},"if let"),"\u6765\u6539\u5199\u5b83\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'use std::fs::File;\nuse std::io::Read;\nuse std::path::Path;\n\nfn file_double<P: AsRef<Path>>(file_path: P) -> Result<i32, String> {\n    let mut file = match File::open(file_path) {\n        Ok(file) => file,\n        Err(err) => return Err(err.to_string()),\n    };\n    let mut contents = String::new();\n    if let Err(err) = file.read_to_string(&mut contents) {\n        return Err(err.to_string());\n    }\n    let n: i32 = match contents.trim().parse() {\n        Ok(n) => n,\n        Err(err) => return Err(err.to_string()),\n    };\n    Ok(2 * n)\n}\n\nfn main() {\n    match file_double("foobar") {\n        Ok(n) => println!("{}", n),\n        Err(err) => println!("Error: {}", err),\n    }\n}\n')),(0,l.kt)("p",null,"\u8fd9\u4e24\u79cd\u65b9\u6cd5\u4e2a\u4eba\u8ba4\u4e3a\u90fd\u662f\u53ef\u4ee5\u7684\uff0c\u4f9d\u5177\u4f53\u60c5\u51b5\u6765\u53d6\u820d\u3002"),(0,l.kt)("h3",{id:"try"},"try!"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"macro_rules! try {\n    ($e:expr) => (match $e {\n        Ok(val) => val,\n        Err(err) => return Err(::std::convert::From::from(err)),\n    });\n}\n\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"try!"),"\u4e8b\u5b9e\u4e0a\u5c31\u662f",(0,l.kt)("inlineCode",{parentName:"p"},"match Result"),"\u7684\u5c01\u88c5\uff0c\u5f53\u9047\u5230",(0,l.kt)("inlineCode",{parentName:"p"},"Err(E)"),"\u65f6\u4f1a\u63d0\u65e9\u8fd4\u56de\uff0c\n",(0,l.kt)("inlineCode",{parentName:"p"},"::std::convert::From::from(err)"),"\u53ef\u4ee5\u5c06\u4e0d\u540c\u7684\u9519\u8bef\u7c7b\u578b\u8fd4\u56de\u6210\u6700\u7ec8\u9700\u8981\u7684\u9519\u8bef\u7c7b\u578b\uff0c\u56e0\u4e3a\u6240\u6709\u7684\u9519\u8bef\u90fd\u80fd\u901a\u8fc7",(0,l.kt)("inlineCode",{parentName:"p"},"From"),"\u8f6c\u5316\u6210",(0,l.kt)("inlineCode",{parentName:"p"},"Box<Error>"),"\uff0c\u6240\u4ee5\u4e0b\u9762\u7684\u4ee3\u7801\u662f\u6b63\u786e\u7684\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"use std::error::Error;\nuse std::fs::File;\nuse std::io::Read;\nuse std::path::Path;\n\nfn file_double<P: AsRef<Path>>(file_path: P) -> Result<i32, Box<Error>> {\n    let mut file = try!(File::open(file_path));\n    let mut contents = String::new();\n    try!(file.read_to_string(&mut contents));\n    let n = try!(contents.trim().parse::<i32>());\n    Ok(2 * n)\n}\n\n")),(0,l.kt)("h4",{id:"\u7ec4\u5408\u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b"},"\u7ec4\u5408\u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"use std::fs::File;\nuse std::io::{self, Read};\nuse std::num;\nuse std::io;\nuse std::path::Path;\n\n// We derive `Debug` because all types should probably derive `Debug`.\n// This gives us a reasonable human readable description of `CliError` values.\n#[derive(Debug)]\nenum CliError {\n    Io(io::Error),\n    Parse(num::ParseIntError),\n}\n\nimpl From<io::Error> for CliError {\n    fn from(err: io::Error) -> CliError {\n        CliError::Io(err)\n    }\n}\n\nimpl From<num::ParseIntError> for CliError {\n    fn from(err: num::ParseIntError) -> CliError {\n        CliError::Parse(err)\n    }\n}\n\nfn file_double_verbose<P: AsRef<Path>>(file_path: P) -> Result<i32, CliError> {\n    let mut file = try!(File::open(file_path).map_err(CliError::Io));\n    let mut contents = String::new();\n    try!(file.read_to_string(&mut contents).map_err(CliError::Io));\n    let n: i32 = try!(contents.trim().parse().map_err(CliError::Parse));\n    Ok(2 * n)\n}\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"CliError"),"\u5206\u522b\u4e3a",(0,l.kt)("inlineCode",{parentName:"p"},"io::Error"),"\u548c",(0,l.kt)("inlineCode",{parentName:"p"},"num::ParseIntError"),"\u5b9e\u73b0\u4e86",(0,l.kt)("inlineCode",{parentName:"p"},"From"),"\u8fd9\u4e2atrait\uff0c\u6240\u6709\u8c03\u7528",(0,l.kt)("inlineCode",{parentName:"p"},"try!"),"\u7684\u65f6\u5019\u8fd9\u4e24\u79cd\u9519\u8bef\u7c7b\u578b\u90fd\u80fd\u8f6c\u5316\u6210",(0,l.kt)("inlineCode",{parentName:"p"},"CliError"),"\u3002"),(0,l.kt)("h3",{id:"\u603b\u7ed3"},"\u603b\u7ed3"),(0,l.kt)("p",null,"\u719f\u7ec3\u4f7f\u7528",(0,l.kt)("inlineCode",{parentName:"p"},"Option"),"\u548c",(0,l.kt)("inlineCode",{parentName:"p"},"Result"),"\u662f\u7f16\u5199 ",(0,l.kt)("strong",{parentName:"p"},"Rust")," \u4ee3\u7801\u7684\u5173\u952e\uff0c",(0,l.kt)("strong",{parentName:"p"},"Rust")," \u4f18\u96c5\u7684\u9519\u8bef\u5904\u7406\u79bb\u4e0d\u5f00\u503c\u8fd4\u56de\u7684\u9519\u8bef\u5f62\u5f0f\uff0c\u7f16\u5199\u4ee3\u7801\u65f6\u63d0\u4f9b\u7ed9\u4f7f\u7528\u8005\u8be6\u7ec6\u7684\u9519\u8bef\u4fe1\u606f\u662f\u503c\u5f97\u63a8\u5d07\u7684\u3002"))}k.isMDXComponent=!0}}]);