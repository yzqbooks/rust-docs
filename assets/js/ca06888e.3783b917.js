"use strict";(self.webpackChunkrust_docs=self.webpackChunkrust_docs||[]).push([[3587],{3905:function(n,e,t){t.d(e,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function l(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var i=r.createContext({}),u=function(n){var e=r.useContext(i),t=e;return n&&(t="function"==typeof n?n(e):l(l({},e),n)),t},p=function(n){var e=u(n.components);return r.createElement(i.Provider,{value:e},n.children)},c={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,a=n.originalType,i=n.parentName,p=s(n,["components","mdxType","originalType","parentName"]),d=u(t),m=o,g=d["".concat(i,".").concat(m)]||d[m]||c[m]||a;return t?r.createElement(g,l(l({ref:e},p),{},{components:t})):r.createElement(g,l({ref:e},p))}));function m(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var a=t.length,l=new Array(a);l[0]=d;var s={};for(var i in e)hasOwnProperty.call(e,i)&&(s[i]=e[i]);s.originalType=n,s.mdxType="string"==typeof n?n:o,l[1]=s;for(var u=2;u<a;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6577:function(n,e,t){t.r(e),t.d(e,{assets:function(){return p},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return c}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),l=["components"],s={},i="rust\u6570\u636e\u5e93\u64cd\u4f5c",u={unversionedId:"action/db/readme",id:"action/db/readme",title:"rust\u6570\u636e\u5e93\u64cd\u4f5c",description:"\u7f16\u7a0b\u65f6\uff0c\u6211\u4eec\u4f9d\u8d56\u6570\u636e\u5e93\u6765\u5b58\u50a8\u76f8\u5e94\u7684\u6570\u636e\uff0c\u5f88\u591a\u7f16\u7a0b\u8bed\u8a00\u90fd\u652f\u6301\u5bf9\u6570\u636e\u5e93\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u5f53\u7136\u53ef\u4ee5\u4f7f\u7528Rust\u64cd\u4f5c\u6570\u636e\u5e93\u3002",source:"@site/docs/action/db/readme.md",sourceDirName:"action/db",slug:"/action/db/",permalink:"/rust-docs/docs/action/db/",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/action/db/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"TOC",permalink:"/rust-docs/docs/TOC"},next:{title:"Rust json\u5904\u7406",permalink:"/rust-docs/docs/action/json_data/"}},p={},c=[],d={toc:c};function m(n){var e=n.components,t=(0,o.Z)(n,l);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"rust\u6570\u636e\u5e93\u64cd\u4f5c"},"rust\u6570\u636e\u5e93\u64cd\u4f5c"),(0,a.kt)("p",null,"\u7f16\u7a0b\u65f6\uff0c\u6211\u4eec\u4f9d\u8d56\u6570\u636e\u5e93\u6765\u5b58\u50a8\u76f8\u5e94\u7684\u6570\u636e\uff0c\u5f88\u591a\u7f16\u7a0b\u8bed\u8a00\u90fd\u652f\u6301\u5bf9\u6570\u636e\u5e93\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u5f53\u7136\u53ef\u4ee5\u4f7f\u7528Rust\u64cd\u4f5c\u6570\u636e\u5e93\u3002"),(0,a.kt)("p",null,"\u4e0d\u8fc7\u5728\u6211\u81ea\u5df1\u64cd\u4f5c\u65f6\uff0c\u53d1\u73b0\u5f88\u591a\u95ee\u9898\uff0c\u4e3b\u8981\u56e0\u4e3a\u6211\u4e0d\u4e86\u89e3Rust\u5728\u64cd\u4f5c\u6570\u636e\u5e93\u65f6\uff0c\u5e94\u8be5\u6ce8\u610f\u7684\u4e8b\u60c5\uff0c\u4ece\u800c\u6d6a\u8d39\u4e86\u5f88\u591a\u7684\u65f6\u95f4\uff0c\u5728\u8fdb\u884c\u6570\u636e\u67e5\u8be2\u65f6\u3002\n\u5177\u4f53\u9047\u5230\u7684\u5751\uff0c\u6211\u4f1a\u505a\u4e00\u4e9b\u6f14\u793a\uff0c\u4ece\u800c\u8ba9\u5927\u5bb6\u907f\u514d\u8fd9\u4e9b\u60c5\u51b5\u3002"),(0,a.kt)("p",null,"\u9996\u5148\u4f7f\u7528Rust\u64cd\u4f5cPostgreSQL,\u56e0\u4e3aPostgreSQL\u662f\u6211\u6700\u559c\u6b22\u7684\u6570\u636e\u5e93\u3002"),(0,a.kt)("p",null,"\u9996\u5148\u521b\u5efa\u65b0\u9879\u76ee ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo new db --bin")),(0,a.kt)("p",null,"\u5728cargo.toml\u4e2d\u6dfb\u52a0 ",(0,a.kt)("inlineCode",{parentName:"p"},"postgres")," \u5982\u4e0b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'[package]\nname = "db"\nversion = "0.1.0"\nauthors = ["vagrant"]\n\n[dependencies]\npostgres="*"\n')),(0,a.kt)("p",null,"\u5f53\u7136\u6211\u4eec\u8fd8\u662f\u8fdb\u884c\u6700\u7b80\u5355\u7684\u64cd\u4f5c\uff0c\u76f4\u63a5\u7c98\u8d34\u590d\u5236\uff0c",(0,a.kt)("a",{parentName:"p",href:"https://github.com/sfackler/rust-postgres#overview"},"\u4ee3\u7801\u6765\u6e90")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'\nextern crate postgres;\n\nuse postgres::{Connection, SslMode};\n\nstruct Person {\n    id: i32,\n    name: String,\n    data: Option<Vec<u8>>\n}\n\nfn main() {\n    let conn = Connection::connect("postgres://postgres@localhost", SslMode::None)\n            .unwrap();\n\n    conn.execute("CREATE TABLE person (\n                    id              SERIAL PRIMARY KEY,\n                    name            VARCHAR NOT NULL,\n                    data            BYTEA\n                  )", &[]).unwrap();\n    let me = Person {\n        id: 0,\n        name: "Steven".to_string(),\n        data: None\n    };\n    conn.execute("INSERT INTO person (name, data) VALUES ($1, $2)",\n                 &[&me.name, &me.data]).unwrap();\n\n    for row in &conn.query("SELECT id, name, data FROM person", &[]).unwrap() {\n        let person = Person {\n            id: row.get(0),\n            name: row.get(1),\n            data: row.get(2)\n        };\n        println!("Found person {}", person.name);\n    }\n}\n\n')),(0,a.kt)("p",null,"\u8fd9\u4e9b\u7b80\u5355\u7684\uff0c\u5f53\u7136\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u4e1c\u897f\uff0c\u6211\u4eec\u60f3\u8981\u7684\u662f\u80fd\u591f\u8fdb\u884c\u4e00\u4e9b\u5206\u5c42\uff0c\u4e5f\u5c31\u662f\n\u57fa\u672c\u7684\u4e00\u4e9b\u51fd\u6570\u903b\u8f91\u5212\u5206\uff0c\u800c\u4e0d\u662f\u5728\u4e00\u4e2amain\u51fd\u6570\u4e2d\uff0c\u5b8c\u6210\u6240\u6709\u7684\u4e00\u5207\u3002"),(0,a.kt)("p",null,"##\u521b\u5efalib.rs\u6587\u4ef6"),(0,a.kt)("p",null,"\u4ece\u4e0a\u5230\u4e0b\u6765\u770b\u6587\u4ef6\uff1a"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u9996\u5148\u5bfc\u5165postgres\u7684\u5404\u79cd\u5e93"),(0,a.kt)("li",{parentName:"ol"},"\u521b\u5efa\u4e00\u4e2aPerson \u7684struct\uff0c\u6309\u7167\u9700\u6c42\u7684\u5b57\u6bb5\u548c\u7c7b\u578b\u3002"),(0,a.kt)("li",{parentName:"ol"},"\u521b\u5efa\u4e00\u4e2a\u8fde\u63a5\u51fd\u6570\uff0c\u8fd4\u56de\u8fde\u63a5\u5bf9\u8c61\u3002"),(0,a.kt)("li",{parentName:"ol"},"\u521b\u5efa\u4e00\u4e2a\u63d2\u5165\u51fd\u6570\uff0c\u7528\u6765\u63d2\u5165\u6570\u636e"),(0,a.kt)("li",{parentName:"ol"},"\u521b\u5efa\u4e00\u4e2a\u67e5\u8be2\u51fd\u6570\uff0c\u7528\u6765\u67e5\u8be2\u6570\u636e"),(0,a.kt)("li",{parentName:"ol"},"\u521b\u5efa\u4e00\u4e2a\u67e5\u8be2\u51fd\u6570\uff0c\u7528\u6765\u67e5\u8be2\u6240\u6709\u7684\u6570\u636e\u3002")),(0,a.kt)("p",null,"\u5f53\u7136\u8fd9\u4e9b\u51fd\u6570\u90fd\u662f\u6709\u4e00\u5b9a\u7684\u529f\u80fd\u5c40\u9650\u6027\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'\nextern crate postgres;\n\nuse postgres::{Connection, SslMode};\nuse postgres::types::FromSql;\nuse postgres::Result as PgResult;\n\n\nstruct Person {\n    id: i32,\n    name: String,\n    data: Option<Vec<u8>>\n}\n\n\npub fn connect() -> Connection{\n    let dsn = "postgresql://postgres:2015@localhost/rust_example";\n    Connection::connect(dsn, SslMode::None).unwrap()\n}\n\npub fn insert_info(conn : &Connection,title : &str, body: &str){\n\n    let stmt = match conn.prepare("insert into blog (title, body) values ($1, $2)") {\n        Ok(stmt) => stmt,\n        Err(e) => {\n            println!("Preparing query failed: {:?}", e);\n            return;\n        }\n    };\n        stmt.execute(&[&title, &body]).expect("Inserting blogposts failed");\n}\n\n\npub fn query<T>(conn: &Connection,query: &str) ->PgResult<T>\n        where T: FromSql {\n            println!("Executing query: {}", query);\n            let stmt = try!(conn.prepare(query));\n            let rows = try!(stmt.query(&[]));\n            &rows.iter().next().unwrap();\n            let row = &rows.iter().next().unwrap();\n                //rows.iter().next().unwrap()\n            row.get_opt(2).unwrap()\n\n}\n\npub fn query_all(conn: &Connection,query: &str){\n            println!("Executing query: {}", query);\n            for row in &conn.query(query,&[]).unwrap(){\n                let person = Person{\n                    id: row.get(0),\n                    name: row.get(1),\n                    data: row.get(2)\n            };\n            println!("Found person {}", person.name);\n            }\n\n}\n\n')),(0,a.kt)("p",null,"\u7136\u540e\u5728main.rs \u4e2d\u8c03\u7528\u76f8\u5e94\u7684\u51fd\u6570\u4ee3\u7801\u5982\u4e0b"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"extern db ,\u5f15\u5165db\uff0c\u4e5f\u5c31\u662f\u5c06\u9879\u76ee\u672c\u8eab\u5f15\u5165"),(0,a.kt)("li",{parentName:"ol"},"use db \u4f7f\u7528db\uff0c\u4e2d\u7684\u53ef\u4ee5\u88ab\u5f15\u5165\u7684\u51fd\u6570"),(0,a.kt)("li",{parentName:"ol"},"\u5b9a\u4e49Blog,\u7531\u4e8e\u4e2a\u4eba\u4f7f\u7528blog\u8868\uff0c\u662f\u81ea\u5df1\u521b\u5efa\uff0c\u6240\u4ee5\u5982\u679c\u62a5\u9519\u8bf4\u4e0d\u5b58\u5728\u8868\uff0c\u9700\u8981\u4f60\u81ea\u5df1\u53bb\u521b\u5efa"),(0,a.kt)("li",{parentName:"ol"},"\u4f7f\u7528lib\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\uff0c\u8fdb\u884c\u6700\u57fa\u672c\u7684\u4e00\u4e9b\u64cd\u4f5c")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'extern crate postgres;\nextern crate db;\n\nuse postgres::{Connection, SslMode};\n\nuse db::*;\n\nstruct Blog {\n    title: String,\n    body:  String,\n}\n\nfn main() {\n    let conn:Connection=connect();\n\n    let blog = Blog{\n        title: String::from("title"),\n        body: String::from("body"),\n    };\n    let title = blog.title.to_string();\n    let body = blog.body.to_string();\n    insert_info(&conn,&title,&body);\n\n   for row in query::<String>(&conn,"select * from blog"){\n        println!("{:?}",row);\n    }\n    let sql = "select * from person";\n    query_all(&conn,&sql);\n}\n\n')),(0,a.kt)("p",null,"\u81ea\u5df1\u9047\u5230\u7684\u5751"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u521b\u5efa\u8fde\u63a5\u51fd\u6570\u65f6\uff0c\u8fde\u63a5\u5fc5\u987b\u6709\u4e00\u4e2a\u8fd4\u56de\u503c\uff0c\u6240\u4ee5\u5fc5\u987b\u6307\u5b9a\u8fd4\u56de\u503c\u7684\u7c7b\u578b\uff0c\n\u5bf9\u4e8e\u4e00\u4e2a\u5199Python\u7684\u4eba\u800c\u8a00\uff0c\u6211\u89c9\u5f97\u662f\u75db\u82e6\u7684\uff0c\u6211\u60f3\u6309\u7167\u5b98\u65b9\u7684\u5199\u6cd5match\n\u4e00\u4e0b\uff0c\u53d1\u73b0\u53ef\u80fd\u4ea7\u751f\u591a\u4e2a\u8fd4\u56de\u503c\u3002\u5728\u7f16\u8bd1\u65f6\u76f4\u63a5\u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1\uff0c\u6240\u4ee5\u6700\u7ec8\n\u4f7f\u7528\u4e86unwrap,\u89e3\u51b3\u95ee\u9898\uff0c\u4e0d\u8fc7\u6211\u8fd8\u662f\u6ca1\u6709\u5b66\u4f1a\uff0c\u51fd\u6570\u591a\u503c\u8fd4\u56de\u65f6\u6211\u5982\u4f55\n\u5b9a\u4e49\u8fd4\u56de\u503c")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u5728\u4f7f\u7528",(0,a.kt)("inlineCode",{parentName:"p"},"&conn.query(query,&[]).unwrap()"),"\u65f6\uff0c\u6211\u6309\u7167\u6587\u6863\u64cd\u4f5c\uff0c\u6587\u6863\u8bf4\n\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u7684\u6570\u636e\uff0c\u90a3\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u53ef\u4ee5\u4f7f\u7528for\u5faa\u73af\uff0c\u5c06\u6570\u636e\u6253\u5370\uff0c\n\u4f46\u662f\u53d1\u73b0\u600e\u4e48\u4e5f\u4e0d\u80fd\u5b9e\u73b0\uff1a"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'\npub fn query_all(conn: &Connection,query: &str){\n            println!("Executing query: {}", query);\n            for row in &conn.query(query,&[]).unwrap(){\n                  println!("Found person {:?}", row.get_opt(1));\n            }\n}\n\n')),(0,a.kt)("p",null,"\u62a5\u9519\u5982\u4e0b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'vagrant@ubuntu-14:~/tmp/test/rustprimer/db$ cargo run\n   Compiling db v0.1.0 (file:///home/vagrant/tmp/test/rustprimer/db)\nsrc/lib.rs:53:37: 53:47 error: unable to infer enough type information about `_`; type annotations or generic parameter binding required [E0282]\nsrc/lib.rs:53   println!("Found person {:?}", row.get_opt(1));\n                                                  ^~~~~~~~~~\n<std macros>:2:25: 2:56 note: in this expansion of format_args!\n<std macros>:3:1: 3:54 note: in this expansion of print! (defined in <std macros>)\nsrc/lib.rs:53:3: 53:49 note: in this expansion of println! (defined in <std macros>)\nsrc/lib.rs:53:37: 53:47 help: run `rustc --explain E0282` to see a detailed explanation\nerror: aborting due to previous error\nCould not compile `db`.\n\n')),(0,a.kt)("p",null,"\u7136\u540e\u53bb\u67e5\u770b\u4e86\u5173\u4e8epostgres\u6a21\u5757\u7684\u6240\u6709\u51fd\u6570\uff0c\u5c1d\u8bd5\u4e86\u65e0\u6570\u79cd\u529e\u6cd5\uff0c\u4f9d\u65e7\u6ca1\u6709\u89e3\u51b3\u3002"),(0,a.kt)("p",null,"\u53ef\u80fd\u81ea\u5df1\u773c\u9ad8\u624b\u4f4e\uff0c\u5982\u679c\u4ece\u5934\u518d\u628aRust\u7684\u76f8\u5173\u6559\u7a0b\u770b\u4e00\u4e0b\uff0c\u53ef\u80fd\u5f88\u65e9\u5c31\u53d1\u73b0\u8fd9\u4e2a\u95ee\u9898\uff0c\n\u4e5f\u6709\u53ef\u80fd\u662f\u56e0\u4e3a\u4e60\u60ef\u4e86\u5199Python\uff0c\u5bfc\u81f4\u81ea\u5df1\u4f7f\u7528\u56fa\u6709\u7684\u601d\u7ef4\u6765\u770b\u5f85\u95ee\u9898\u548c\u94bb\u725b\u89d2\u5c16\uff0c\u624d\n\u5bfc\u81f4\u51fa\u73b0\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u6d6a\u8d39\u5f88\u591a\u7684\u65f6\u95f4\u3002"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u6539\u53d8\u601d\u7ef4\uff0c\u628a\u81ea\u5df1\u5f53\u4f5c\u4e00\u4e2a\u5168\u65b0\u7684\u65b0\u624b\uff0c\u65e2\u8981\u5229\u7528\u5df2\u6709\u7684\u601d\u60f3\u6765\u5b66\u4e60\u65b0\u7684\u8bed\u8a00\uff0c\u540c\u6837\u4e0d\u8981\n\u88ab\u81ea\u5df1\u5f88\u7cbe\u901a\u7684\u8bed\u8a00\uff0c\u56fa\u5316\u81ea\u5df1\u7684\u601d\u7ef4\u3002")))}m.isMDXComponent=!0}}]);