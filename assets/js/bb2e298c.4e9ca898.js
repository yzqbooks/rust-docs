"use strict";(self.webpackChunkrust_docs=self.webpackChunkrust_docs||[]).push([[1237],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=u(n),m=a,d=c["".concat(p,".").concat(m)]||c[m]||f[m]||l;return n?r.createElement(d,i(i({ref:t},s),{},{components:n})):r.createElement(d,i({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7571:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return f}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),i=["components"],o={},p="10.1 trait\u5173\u952e\u5b57",u={unversionedId:"trait/trait",id:"trait/trait",title:"10.1 trait\u5173\u952e\u5b57",description:"trait\u4e0e\u5177\u4f53\u7c7b\u578b",source:"@site/docs/trait/trait.md",sourceDirName:"trait",slug:"/trait/",permalink:"/rust-docs/docs/trait/",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/trait/trait.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u6d4b\u8bd5",permalink:"/rust-docs/docs/testing/threearchtest"},next:{title:"trait \u548c trait\u5bf9\u8c61",permalink:"/rust-docs/docs/trait/overview"}},s={},f=[{value:"trait\u4e0e\u5177\u4f53\u7c7b\u578b",id:"trait\u4e0e\u5177\u4f53\u7c7b\u578b",level:2},{value:"trait\u4e0e\u6cdb\u578b",id:"trait\u4e0e\u6cdb\u578b",level:2},{value:"\u6cdb\u578b\u7684trait\u7ea6\u675f",id:"\u6cdb\u578b\u7684trait\u7ea6\u675f",level:4},{value:"\u591atrait\u7ea6\u675f",id:"\u591atrait\u7ea6\u675f",level:4},{value:"where\u5173\u952e\u5b57",id:"where\u5173\u952e\u5b57",level:4},{value:"trait\u4e0e\u5185\u7f6e\u7c7b\u578b",id:"trait\u4e0e\u5185\u7f6e\u7c7b\u578b",level:2},{value:"trait\u7684\u9ed8\u8ba4\u65b9\u6cd5",id:"trait\u7684\u9ed8\u8ba4\u65b9\u6cd5",level:2},{value:"trait\u7684\u7ee7\u627f",id:"trait\u7684\u7ee7\u627f",level:2},{value:"derive\u5c5e\u6027",id:"derive\u5c5e\u6027",level:2},{value:"impl Trait",id:"impl-trait",level:2},{value:"impl Trait \u7684\u666e\u904d\u7528\u4f8b",id:"impl-trait-\u7684\u666e\u904d\u7528\u4f8b",level:4},{value:"\u5176\u4ed6\u53d7\u76ca\u7684\u7528\u4f8b",id:"\u5176\u4ed6\u53d7\u76ca\u7684\u7528\u4f8b",level:4}],c={toc:f};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"101-trait\u5173\u952e\u5b57"},"10.1 trait\u5173\u952e\u5b57"),(0,l.kt)("h2",{id:"trait\u4e0e\u5177\u4f53\u7c7b\u578b"},"trait\u4e0e\u5177\u4f53\u7c7b\u578b"),(0,l.kt)("p",null,"\u4f7f\u7528",(0,l.kt)("strong",{parentName:"p"},"trait"),"\u5b9a\u4e49\u4e00\u4e2a\u7279\u5f81\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"trait HasArea {\n    fn area(&self) -> f64;\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"trait"),"\u91cc\u9762\u7684\u51fd\u6570\u53ef\u4ee5\u6ca1\u6709\u51fd\u6570\u4f53\uff0c\u5b9e\u73b0\u4ee3\u7801\u4ea4\u7ed9\u5177\u4f53\u5b9e\u73b0\u5b83\u7684\u7c7b\u578b\u53bb\u8865\u5145\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'struct Circle {\n    x: f64,\n    y: f64,\n    radius: f64,\n}\n\nimpl HasArea for Circle {\n    fn area(&self) -> f64 {\n        std::f64::consts::PI * (self.radius * self.radius)\n    }\n}\n\nfn main() {\n    let c = Circle {\n        x: 0.0f64,\n        y: 0.0f64,\n        radius: 1.0f64,\n    };\n    println!("circle c has an area of {}", c.area());\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u6ce8"),": ",(0,l.kt)("strong",{parentName:"p"},"&self"),"\u8868\u793a\u7684\u662f",(0,l.kt)("strong",{parentName:"p"},"area"),"\u8fd9\u4e2a\u51fd\u6570\u4f1a\u5c06\u8c03\u7528\u8005\u7684\u501f\u4ee3\u5f15\u7528\u4f5c\u4e3a\u53c2\u6570"),(0,l.kt)("p",null,"\u8fd9\u4e2a\u7a0b\u5e8f\u4f1a\u8f93\u51fa\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"circle c has an area of 3.141592653589793\n")),(0,l.kt)("h2",{id:"trait\u4e0e\u6cdb\u578b"},"trait\u4e0e\u6cdb\u578b"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u6211\u4eec\u4e86\u89e3\u4e86Rust\u4e2dtrait\u7684\u5b9a\u4e49\u548c\u4f7f\u7528\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u4ecb\u7ecd\u4e00\u4e0b\u5b83\u7684\u4f7f\u7528\u573a\u666f\uff0c\u4ece\u4e2d\u6211\u4eec\u53ef\u4ee5\u7aa5\u63a2\u51fa\u63a5\u53e3\u8fd9\u7279\u6027\u5e26\u6765\u7684\u60ca\u559c")),(0,l.kt)("p",null,"\u6211\u4eec\u77e5\u9053\u6cdb\u578b\u53ef\u4ee5\u6307\u4efb\u610f\u7c7b\u578b\uff0c\u4f46\u6709\u65f6\u8fd9\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\uff0c\u9700\u8981\u7ed9\u5b83\u4e00\u4e9b\u7ea6\u675f\u3002"),(0,l.kt)("h4",{id:"\u6cdb\u578b\u7684trait\u7ea6\u675f"},"\u6cdb\u578b\u7684trait\u7ea6\u675f"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'use std::fmt::Debug;\nfn foo<T: Debug>(s: T) {\n    println!("{:?}", s);\n}\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Debug"),"\u662f",(0,l.kt)("strong",{parentName:"p"},"Rust"),'\u5185\u7f6e\u7684\u4e00\u4e2atrait\uff0c\u4e3a"{:?}"\u5b9e\u73b0\u6253\u5370\u5185\u5bb9\uff0c\u51fd\u6570',(0,l.kt)("inlineCode",{parentName:"p"},"foo"),"\u63a5\u53d7\u4e00\u4e2a\u6cdb\u578b\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u4e14\u7ea6\u5b9a\u5176\u9700\u8981\u5b9e\u73b0",(0,l.kt)("inlineCode",{parentName:"p"},"Debug")),(0,l.kt)("h4",{id:"\u591atrait\u7ea6\u675f"},"\u591atrait\u7ea6\u675f"),(0,l.kt)("p",null,"\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2atrait\u5bf9\u6cdb\u578b\u8fdb\u884c\u7ea6\u675f\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'use std::fmt::Debug;\nfn foo<T: Debug + Clone>(s: T) {\n    s.clone();\n    println!("{:?}", s);\n}\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"<T: Debug + Clone>"),"\u4e2d",(0,l.kt)("inlineCode",{parentName:"p"},"Debug"),"\u548c",(0,l.kt)("inlineCode",{parentName:"p"},"Clone"),"\u4f7f\u7528",(0,l.kt)("inlineCode",{parentName:"p"},"+"),"\u8fde\u63a5\uff0c\u6807\u793a\u6cdb\u578b",(0,l.kt)("inlineCode",{parentName:"p"},"T"),"\u9700\u8981\u540c\u65f6\u5b9e\u73b0\u8fd9\u4e24\u4e2atrait\u3002"),(0,l.kt)("h4",{id:"where\u5173\u952e\u5b57"},"where\u5173\u952e\u5b57"),(0,l.kt)("p",null,"\u7ea6\u675f\u7684trait\u589e\u52a0\u540e\uff0c\u4ee3\u7801\u770b\u8d77\u6765\u5c31\u53d8\u5f97\u8be1\u5f02\u4e86\uff0c\u8fd9\u65f6\u5019\u9700\u8981\u4f7f\u7528",(0,l.kt)("inlineCode",{parentName:"p"},"where"),"\u4ece\u53e5\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'use std::fmt::Debug;\nfn foo<T: Clone, K: Clone + Debug>(x: T, y: K) {\n    x.clone();\n    y.clone();\n    println!("{:?}", y);\n}\n\n// where \u4ece\u53e5\nfn foo<T, K>(x: T, y: K) where T: Clone, K: Clone + Debug {\n    x.clone();\n    y.clone();\n    println!("{:?}", y);\n}\n\n// \u6216\u8005\nfn foo<T, K>(x: T, y: K)\n    where T: Clone,\n          K: Clone + Debug {\n    x.clone();\n    y.clone();\n    println!("{:?}", y);\n}\n')),(0,l.kt)("h2",{id:"trait\u4e0e\u5185\u7f6e\u7c7b\u578b"},"trait\u4e0e\u5185\u7f6e\u7c7b\u578b"),(0,l.kt)("p",null,"\u5185\u7f6e\u7c7b\u578b\u5982\uff1a",(0,l.kt)("inlineCode",{parentName:"p"},"i32"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"i64"),"\u7b49\u4e5f\u53ef\u4ee5\u6dfb\u52a0trait\u5b9e\u73b0\uff0c\u4e3a\u5176\u5b9a\u5236\u4e00\u4e9b\u529f\u80fd\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"trait HasArea {\n    fn area(&self) -> f64;\n}\n\nimpl HasArea for i32 {\n    fn area(&self) -> f64 {\n        *self as f64\n    }\n}\n\n5.area();\n")),(0,l.kt)("p",null,"\u8fd9\u6837\u7684\u505a\u6cd5\u662f\u6709\u9650\u5236\u7684\u3002Rust \u6709\u4e00\u4e2a\u201c\u5b64\u513f\u89c4\u5219\u201d\uff1a\u5f53\u4f60\u4e3a\u67d0\u7c7b\u578b\u5b9e\u73b0\u67d0 trait \u7684\u65f6\u5019\uff0c\u5fc5\u987b\u8981\u6c42\u7c7b\u578b\u6216\u8005 trait \u81f3\u5c11\u6709\u4e00\u4e2a\u662f\u5728\u5f53\u524d crate \u4e2d\u5b9a\u4e49\u7684\u3002\u4f60\u4e0d\u80fd\u4e3a\u7b2c\u4e09\u65b9\u7684\u7c7b\u578b\u5b9e\u73b0\u7b2c\u4e09\u65b9\u7684 trait \u3002"),(0,l.kt)("p",null,"\u5728\u8c03\u7528 trait \u4e2d\u5b9a\u4e49\u7684\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u8981\u8bb0\u5f97\u8ba9\u8fd9\u4e2a trait \u53ef\u88ab\u8bbf\u95ee\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'let mut f = std::fs::File::open("foo.txt").ok().expect("Couldn\u2019t open foo.txt");\nlet buf = b"whatever"; //  buf: &[u8; 8]\nlet result = f.write(buf);\n# result.unwrap();\n')),(0,l.kt)("p",null,"\u8fd9\u91cc\u662f\u9519\u8bef\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"error: type `std::fs::File` does not implement any method in scope named `write`\nlet result = f.write(buf);\n               ^~~~~~~~~~\n")),(0,l.kt)("p",null,"\u6211\u4eec\u9700\u8981\u5148use\u8fd9\u4e2aWrite trait\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'use std::io::Write;\n\nlet mut f = std::fs::File::open("foo.txt").expect("Couldn\u2019t open foo.txt");\nlet buf = b"whatever";\nlet result = f.write(buf);\n# result.unwrap(); // ignore the error\n')),(0,l.kt)("p",null,"\u8fd9\u6837\u5c31\u80fd\u65e0\u9519\u8bef\u5730\u7f16\u8bd1\u4e86\u3002"),(0,l.kt)("h2",{id:"trait\u7684\u9ed8\u8ba4\u65b9\u6cd5"},"trait\u7684\u9ed8\u8ba4\u65b9\u6cd5"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"trait Foo {\n    fn is_valid(&self) -> bool;\n\n    fn is_invalid(&self) -> bool { !self.is_valid() }\n}\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"is_invalid"),"\u662f\u9ed8\u8ba4\u65b9\u6cd5\uff0c",(0,l.kt)("inlineCode",{parentName:"p"},"Foo"),"\u7684\u5b9e\u73b0\u8005\u5e76\u4e0d\u8981\u6c42\u5b9e\u73b0\u5b83\uff0c\u5982\u679c\u9009\u62e9\u5b9e\u73b0\u5b83\uff0c\u4f1a\u8986\u76d6\u6389\u5b83\u7684\u9ed8\u8ba4\u884c\u4e3a\u3002"),(0,l.kt)("h2",{id:"trait\u7684\u7ee7\u627f"},"trait\u7684\u7ee7\u627f"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"trait Foo {\n    fn foo(&self);\n}\n\ntrait FooBar : Foo {\n    fn foobar(&self);\n}\n")),(0,l.kt)("p",null,"\u8fd9\u6837",(0,l.kt)("inlineCode",{parentName:"p"},"FooBar"),"\u7684\u5b9e\u73b0\u8005\u4e5f\u8981\u540c\u65f6\u5b9e\u73b0",(0,l.kt)("inlineCode",{parentName:"p"},"Foo"),"\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'struct Baz;\n\nimpl Foo for Baz {\n    fn foo(&self) { println!("foo"); }\n}\n\nimpl FooBar for Baz {\n    fn foobar(&self) { println!("foobar"); }\n}\n')),(0,l.kt)("h2",{id:"derive\u5c5e\u6027"},"derive\u5c5e\u6027"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Rust"),"\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5c5e\u6027",(0,l.kt)("inlineCode",{parentName:"p"},"derive"),"\u6765\u81ea\u52a8\u5b9e\u73b0\u4e00\u4e9btrait\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u91cd\u590d\u7e41\u7410\u5730\u5b9e\u73b0\u4ed6\u4eec\uff0c\u80fd\u88ab",(0,l.kt)("inlineCode",{parentName:"p"},"derive"),"\u4f7f\u7528\u7684trait\u5305\u62ec\uff1a",(0,l.kt)("inlineCode",{parentName:"p"},"Clone"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"Copy"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"Debug"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"Default"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"Eq"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"Hash"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"Ord"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"PartialEq"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"PartialOrd")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Debug)]\nstruct Foo;\n\nfn main() {\n    println!("{:?}", Foo);\n}\n')),(0,l.kt)("h2",{id:"impl-trait"},"impl Trait"),(0,l.kt)("p",null,"\u5728\u7248\u672c1.26 \u5f00\u59cb\uff0cRust\u63d0\u4f9b\u4e86",(0,l.kt)("inlineCode",{parentName:"p"},"impl Trait"),"\u7684\u5199\u6cd5\uff0c\u4f5c\u4e3a\u548cScala \u5bf9\u7b49\u7684",(0,l.kt)("inlineCode",{parentName:"p"},"\u65e2\u5b58\u578b\u522b(Existential Type)"),"\u7684\u5199\u6cd5\u3002"),(0,l.kt)("p",null,"\u5728\u4e0b\u9762\u8fd9\u4e2a\u5199\u6cd5\u4e2d\uff0c",(0,l.kt)("inlineCode",{parentName:"p"},"fn foo()"),"\u5c06\u8fd4\u56de\u4e00\u4e2a\u5b9e\u4f5c\u4e86",(0,l.kt)("inlineCode",{parentName:"p"},"Trait"),"\u7684trait\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"//before\nfn foo() -> Box<Trait> {\n    // ...\n}\n\n//after\nfn foo() -> impl Trait {\n    // ...\n}\n")),(0,l.kt)("p",null,"\u76f8\u8f83\u4e8e1.25 \u7248\u672c\u4ee5\u524d\u7684\u5199\u6cd5\uff0c\u65b0\u7684\u5199\u6cd5\u4f1a\u5728\u5f88\u591a\u573a\u5408\u4e2d\u66f4\u6709\u5229\u4e8e\u5f00\u53d1\u548c\u6267\u884c\u6548\u7387\u3002"),(0,l.kt)("h4",{id:"impl-trait-\u7684\u666e\u904d\u7528\u4f8b"},"impl Trait \u7684\u666e\u904d\u7528\u4f8b"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"trait Trait {\n    fn method(&self);\n}\n\nimpl Trait for i32 {\n    // implementation goes here\n}\n\nimpl Trait for f32 {\n    // implementation goes here\n}\n")),(0,l.kt)("p",null,"\u5229\u7528Box \u4f1a\u610f\u5473\uff1a\u5373\u4fbf\u56de\u4f20\u7684\u5185\u5bb9\u662f\u56fa\u5b9a\u7684\uff0c\u4f46\u4e5f\u4f1a\u4f7f\u7528\u5230\u52a8\u6001\u5185\u5b58\u5206\u914d\u3002\u5229\u7528",(0,l.kt)("inlineCode",{parentName:"p"},"impl Trait")," \u7684\u5199\u6cd5\u53ef\u4ee5\u907f\u514d\u4fbf\u7528Box\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"//before\nfn foo() -> Box<Trait> {\n    Box::new(5) as Box<Trait>\n}\n\n//after\nfn foo() -> impl Trait {\n    5\n}\n")),(0,l.kt)("h4",{id:"\u5176\u4ed6\u53d7\u76ca\u7684\u7528\u4f8b"},"\u5176\u4ed6\u53d7\u76ca\u7684\u7528\u4f8b"),(0,l.kt)("p",null,"\u95ed\u5305:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"// before\nfn foo() -> Box<Fn(i32) -> i32> {\n    Box::new(|x| x + 1)\n}\n\n// after\nfn foo() -> impl Fn(i32) -> i32 {\n    |x| x + 1\n}\n")),(0,l.kt)("p",null,"\u4f20\u53c2\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"// before\nfn foo<T: Trait>(x: T) {\n\n// after\nfn foo(x: impl Trait) {\n")))}m.isMDXComponent=!0}}]);