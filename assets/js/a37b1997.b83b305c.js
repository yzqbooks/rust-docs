"use strict";(self.webpackChunkrust_docs=self.webpackChunkrust_docs||[]).push([[2880],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=o.createContext({}),c=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=c(e.components);return o.createElement(p.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),f=c(t),m=r,d=f["".concat(p,".").concat(m)]||f[m]||s[m]||i;return t?o.createElement(d,a(a({ref:n},u),{},{components:t})):o.createElement(d,a({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=f;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var c=2;c<i;c++)a[c]=t[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},3847:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return s}});var o=t(7462),r=t(3366),i=(t(7294),t(3905)),a=["components"],l={},p="\u5c06Rust\u7f16\u8bd1\u6210\u5e93",c={unversionedId:"ffi/compiling-rust-to-lib",id:"ffi/compiling-rust-to-lib",title:"\u5c06Rust\u7f16\u8bd1\u6210\u5e93",description:"\u4e0a\u4e00\u7ae0\u8bb2\u8ff0\u4e86\u5982\u4f55\u4ecerust\u4e2d\u8c03\u7528c\u5e93\uff0c\u8fd9\u4e00\u7ae0\u6211\u4eec\u8bb2\u5982\u4f55\u628arust\u7f16\u8bd1\u6210\u5e93\u8ba9\u522b\u7684\u8bed\u8a00\u901a\u8fc7cffi\u8c03\u7528\u3002",source:"@site/docs/ffi/compiling-rust-to-lib.md",sourceDirName:"ffi",slug:"/ffi/compiling-rust-to-lib",permalink:"/rust-docs/docs/ffi/compiling-rust-to-lib",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ffi/compiling-rust-to-lib.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u8c03\u7528ffi\u51fd\u6570",permalink:"/rust-docs/docs/ffi/calling-ffi-function"},next:{title:"FFI",permalink:"/rust-docs/docs/ffi/preface"}},u={},s=[{value:"\u8c03\u7528\u7ea6\u5b9a\u548cmangle",id:"\u8c03\u7528\u7ea6\u5b9a\u548cmangle",level:2},{value:"\u6307\u5b9a<code>crate</code>\u7c7b\u578b",id:"\u6307\u5b9acrate\u7c7b\u578b",level:2},{value:"\u5c0f\u6280\u5de7: <code>Any</code>",id:"\u5c0f\u6280\u5de7-any",level:2}],f={toc:s};function m(e){var n=e.components,t=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u5c06rust\u7f16\u8bd1\u6210\u5e93"},"\u5c06Rust\u7f16\u8bd1\u6210\u5e93"),(0,i.kt)("p",null,"\u4e0a\u4e00\u7ae0\u8bb2\u8ff0\u4e86\u5982\u4f55\u4ecerust\u4e2d\u8c03\u7528c\u5e93\uff0c\u8fd9\u4e00\u7ae0\u6211\u4eec\u8bb2\u5982\u4f55\u628arust\u7f16\u8bd1\u6210\u5e93\u8ba9\u522b\u7684\u8bed\u8a00\u901a\u8fc7cffi\u8c03\u7528\u3002"),(0,i.kt)("h2",{id:"\u8c03\u7528\u7ea6\u5b9a\u548cmangle"},"\u8c03\u7528\u7ea6\u5b9a\u548cmangle"),(0,i.kt)("p",null,"\u6b63\u5982\u4e0a\u4e00\u7ae0\u8bb2\u8ff0\u7684\uff0c\u4e3a\u4e86\u80fd\u8ba9rust\u7684\u51fd\u6570\u901a\u8fc7ffi\u88ab\u8c03\u7528\uff0c\u9700\u8981\u52a0\u4e0a",(0,i.kt)("inlineCode",{parentName:"p"},'extern "C"'),"\u5bf9\u51fd\u6570\u8fdb\u884c\u4fee\u9970\u3002"),(0,i.kt)("p",null,"\u4f46\u7531\u4e8erust\u652f\u6301\u91cd\u8f7d\uff0c\u6240\u4ee5\u51fd\u6570\u540d\u4f1a\u88ab\u7f16\u8bd1\u5668\u8fdb\u884c\u6df7\u6dc6\uff0c\u5c31\u50cfc++\u4e00\u6837\u3002\u56e0\u6b64\u5f53\u4f60\u7684\u51fd\u6570\u88ab\u7f16\u8bd1\u5b8c\u6bd5\u540e\uff0c\u51fd\u6570\u540d\u4f1a\u5e26\u4e0a\u4e00\u4e32\u8868\u660e\u51fd\u6570\u7b7e\u540d\u7684\u5b57\u7b26\u4e32\u3002"),(0,i.kt)("p",null,"\u6bd4\u5982\uff1a",(0,i.kt)("inlineCode",{parentName:"p"},"fn test() {}"),"\u4f1a\u53d8\u6210",(0,i.kt)("inlineCode",{parentName:"p"},"_ZN4test20hf06ae59e934e5641haaE"),".\n\u8fd9\u6837\u7684\u51fd\u6570\u540d\u4e3affi\u8c03\u7528\u5e26\u6765\u4e86\u56f0\u96be\uff0c\u56e0\u6b64\uff0crust\u63d0\u4f9b\u4e86",(0,i.kt)("inlineCode",{parentName:"p"},"#[no_mangle]"),"\u5c5e\u6027\u4e3a\u51fd\u6570\u4fee\u9970\u3002\n\u5bf9\u4e8e\u5e26\u6709",(0,i.kt)("inlineCode",{parentName:"p"},"#[no_mangle]"),"\u5c5e\u6027\u7684\u51fd\u6570\uff0crust\u7f16\u8bd1\u5668\u4e0d\u4f1a\u4e3a\u5b83\u8fdb\u884c\u51fd\u6570\u540d\u6df7\u6dc6\u3002\u5982\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'#[no_mangle]\nextern "C" fn test() {}\n')),(0,i.kt)("p",null,"\u5728nm\u4e2d\u89c2\u5bdf\u5230\u4e3a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"...\n00000000001a7820 T test\n...\n")),(0,i.kt)("p",null,"\u81f3\u6b64\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"test"),"\u51fd\u6570\u5c06\u80fd\u591f\u88ab\u6b63\u5e38\u7684\u7531",(0,i.kt)("inlineCode",{parentName:"p"},"cffi"),"\u8c03\u7528\u3002"),(0,i.kt)("h2",{id:"\u6307\u5b9acrate\u7c7b\u578b"},"\u6307\u5b9a",(0,i.kt)("inlineCode",{parentName:"h2"},"crate"),"\u7c7b\u578b"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"rustc"),"\u9ed8\u8ba4\u7f16\u8bd1\u4ea7\u751f",(0,i.kt)("inlineCode",{parentName:"p"},"rust"),"\u81ea\u7528\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"rlib"),"\u683c\u5f0f\u5e93\uff0c\u8981\u8ba9",(0,i.kt)("inlineCode",{parentName:"p"},"rustc"),"\u4ea7\u751f\u52a8\u6001\u94fe\u63a5\u5e93\u6216\u8005\u9759\u6001\u94fe\u63a5\u5e93\uff0c\u9700\u8981\u663e\u5f0f\u6307\u5b9a\u3002"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"\u65b9\u6cd51: \u5728\u6587\u4ef6\u4e2d\u6307\u5b9a\u3002\n\u5728\u6587\u4ef6\u5934\u52a0\u4e0a",(0,i.kt)("inlineCode",{parentName:"li"},'#![crate_type = "foo"]'),", \u5176\u4e2d",(0,i.kt)("inlineCode",{parentName:"li"},"foo"),"\u7684\u53ef\u9009\u7c7b\u578b\u6709",(0,i.kt)("inlineCode",{parentName:"li"},"bin"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"lib"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"rlib"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"dylib"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"staticlib"),".\u5206\u522b\u5bf9\u5e94\u53ef\u6267\u884c\u6587\u4ef6\uff0c\n\u9ed8\u8ba4(\u5c06\u7531",(0,i.kt)("inlineCode",{parentName:"li"},"rustc"),"\u81ea\u5df1\u51b3\u5b9a), ",(0,i.kt)("inlineCode",{parentName:"li"},"rlib"),"\u683c\u5f0f\uff0c\u52a8\u6001\u94fe\u63a5\u5e93\uff0c\u9759\u6001\u94fe\u63a5\u5e93\u3002"),(0,i.kt)("li",{parentName:"ol"},"\u65b9\u6cd52: \u7f16\u8bd1\u65f6\u7ed9rustc \u4f20",(0,i.kt)("inlineCode",{parentName:"li"},"--crate-type"),"\u53c2\u6570\u3002\u53c2\u6570\u5185\u5bb9\u540c\u4e0a\u3002"),(0,i.kt)("li",{parentName:"ol"},"\u65b9\u6cd53: \u4f7f\u7528cargo\uff0c\u6307\u5b9a",(0,i.kt)("inlineCode",{parentName:"li"},'crate-type = ["foo"] '),", ",(0,i.kt)("inlineCode",{parentName:"li"},"foo"),"\u53ef\u9009\u7c7b\u578b\u540c1")),(0,i.kt)("h2",{id:"\u5c0f\u6280\u5de7-any"},"\u5c0f\u6280\u5de7: ",(0,i.kt)("inlineCode",{parentName:"h2"},"Any")),(0,i.kt)("p",null,"\u7531\u4e8e\u5728\u8de8\u8d8a",(0,i.kt)("inlineCode",{parentName:"p"},"ffi"),"\u8fc7\u7a0b\u4e2d\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"rust"),"\u7c7b\u578b\u4fe1\u606f\u4f1a\u4e22\u5931\uff0c\u6bd4\u5982\u5f53\u7528",(0,i.kt)("inlineCode",{parentName:"p"},"rust"),"\u63d0\u4f9b\u4e00\u4e2a",(0,i.kt)("inlineCode",{parentName:"p"},"OpaqueStruct"),"\u7ed9\u522b\u7684\u8bed\u8a00\u65f6\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'use std::mem::transmute;\n\n#[derive(Debug)]\nstruct Foo<T> {\n  t: T\n}\n\n#[no_mangle]\nextern "C" fn new_foo_vec() -> *const c_void {\n    Box::into_raw(Box::new(Foo {t: vec![1,2,3]})) as *const c_void\n}\n\n#[no_mangle]\nextern "C" fn new_foo_int() -> *const c_void {\n    Box::into_raw(Box::new(Foo {t: 1})) as *const c_void\n}\n\nfn push_foo_element(t: &mut Foo<Vec<i32>>) {\n    t.t.push(1);\n}\n\n#[no_mangle]\nextern "C" fn push_foo_element_c(foo: *mut c_void){\n    let foo2 = unsafe {\n        &mut *(foo as *mut Foo<Vec<i32>>) // \u8fd9\u4e48\u786e\u5b9a\u662fFoo<Vec<i32>>? \u4e07\u4e00foo\u662fFoo<i32>\u600e\u4e48\u529e\uff1f\n    };\n    push_foo_element(foo3);\n}\n')),(0,i.kt)("p",null,"\u4ee5\u4e0a\u4ee3\u7801\u4e2d\u5b8c\u5168\u4e0d\u77e5\u9053",(0,i.kt)("inlineCode",{parentName:"p"},"foo"),"\u662f\u4e00\u4e2a\u4ec0\u4e48\u4e1c\u897f\u3002\u5b89\u5168\u4e5f\u65e0\u4ece\u8bf4\u8d77\u4e86\uff0c\u53ea\u80fd\u9760\u6587\u6863\u3002\n\u56e0\u6b64\u5728",(0,i.kt)("inlineCode",{parentName:"p"},"ffi"),"\u8c03\u7528\u65f6\u5f80\u5f80\u4f1a\u4e27\u5931\u6389",(0,i.kt)("inlineCode",{parentName:"p"},"rust"),"\u7c7b\u578b\u7cfb\u7edf\u5e26\u6765\u7684\u65b9\u4fbf\u548c\u5b89\u5168\u3002\u5728\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u5c0f\u6280\u5de7:\u4f7f\u7528",(0,i.kt)("inlineCode",{parentName:"p"},"Box<Box<Any>>"),"\u6765\u5305\u88c5\u4f60\u7684\u7c7b\u578b\u3002"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"rust"),"\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"Any"),"\u7c7b\u578b\u4e3a",(0,i.kt)("inlineCode",{parentName:"p"},"rust"),"\u5e26\u6765\u4e86\u8fd0\u884c\u65f6\u53cd\u5c04\u7684\u80fd\u529b\uff0c\u4f7f\u7528",(0,i.kt)("inlineCode",{parentName:"p"},"Any"),"\u8de8\u8d8a",(0,i.kt)("inlineCode",{parentName:"p"},"ffi"),"\u8fb9\u754c\u5c06\u6781\u5927\u63d0\u9ad8\u7a0b\u5e8f\u5b89\u5168\u6027\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'use std::any::Any;\n\n#[derive(Debug)]\nstruct Foo<T> {\n  t: T\n}\n\n#[no_mangle]\nextern "C" fn new_foo_vec() -> *const c_void {\n    Box::into_raw(Box::new(Box::new(Foo {t: vec![1,2,3]}) as Box<Any>)) as *const c_void\n}\n\n#[no_mangle]\nextern "C" fn new_foo_int() -> *const c_void {\n    Box::into_raw(Box::new(Box::new(Foo {t: 1}) as Box<Any>)) as *const c_void\n}\n\nfn push_foo_element(t: &mut Foo<Vec<i32>>) {\n    t.t.push(1);\n}\n\n#[no_mangle]\nextern "C" fn push_foo_element_c(foo: *mut c_void){\n    let foo2 = unsafe {\n        &mut *(foo as *mut Box<Any>)\n    };\n    let foo3: Option<&mut Foo<Vec<i32>>> = foo2.downcast_mut(); // \u5982\u679cfoo2\u4e0d\u662f*const Box<Foo<Vec<i32>>>, \u5219foo3\u5c06\u4f1a\u662fNone\n    if let Some(value) = foo3 {\n      push_foo_element(value);\n    }\n}\n')),(0,i.kt)("p",null,"\u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u975e\u5e38\u4e0d\u5bb9\u6613\u51fa\u9519\u4e86\u3002"))}m.isMDXComponent=!0}}]);