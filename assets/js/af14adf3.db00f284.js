"use strict";(self.webpackChunkrust_docs=self.webpackChunkrust_docs||[]).push([[1252],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function u(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?u(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):u(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},u=Object.keys(e);for(r=0;r<u.length;r++)t=u[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(r=0;r<u.length;r++)t=u[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var a=r.createContext({}),o=function(e){var n=r.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=o(e.components);return r.createElement(a.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,u=e.originalType,a=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=o(t),f=i,d=m["".concat(a,".").concat(f)]||m[f]||c[f]||u;return t?r.createElement(d,l(l({ref:n},p),{},{components:t})):r.createElement(d,l({ref:n},p))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var u=t.length,l=new Array(u);l[0]=m;var s={};for(var a in n)hasOwnProperty.call(n,a)&&(s[a]=n[a]);s.originalType=e,s.mdxType="string"==typeof e?e:i,l[1]=s;for(var o=2;o<u;o++)l[o]=t[o];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2889:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return a},default:function(){return f},frontMatter:function(){return s},metadata:function(){return o},toc:function(){return c}});var r=t(7462),i=t(3366),u=(t(7294),t(3905)),l=["components"],s={},a="\u4f18\u5148\u961f\u5217",o={unversionedId:"data-structure/priority_queue",id:"data-structure/priority_queue",title:"\u4f18\u5148\u961f\u5217",description:"\u7b80\u4ecb",source:"@site/docs/data-structure/priority_queue.md",sourceDirName:"data-structure",slug:"/data-structure/priority_queue",permalink:"/rust-docs/docs/data-structure/priority_queue",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/data-structure/priority_queue.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u5e38\u7528\u6570\u636e\u7ed3\u6784\u5b9e\u73b0",permalink:"/rust-docs/docs/data-structure/preface"},next:{title:"\u961f\u5217",permalink:"/rust-docs/docs/data-structure/queue"}},p={},c=[{value:"\u7b80\u4ecb",id:"\u7b80\u4ecb",level:2},{value:"\u4f18\u5148\u961f\u5217\u7684\u5b9e\u73b0\uff1a",id:"\u4f18\u5148\u961f\u5217\u7684\u5b9e\u73b0",level:2},{value:"\u6d4b\u8bd5\u4ee3\u7801\uff1a",id:"\u6d4b\u8bd5\u4ee3\u7801",level:2},{value:"\u7ec3\u4e60",id:"\u7ec3\u4e60",level:2}],m={toc:c};function f(e){var n=e.components,t=(0,i.Z)(e,l);return(0,u.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,u.kt)("h1",{id:"\u4f18\u5148\u961f\u5217"},"\u4f18\u5148\u961f\u5217"),(0,u.kt)("h2",{id:"\u7b80\u4ecb"},"\u7b80\u4ecb"),(0,u.kt)("p",null,"\u666e\u901a\u7684\u961f\u5217\u662f\u4e00\u79cd\u5148\u8fdb\u5148\u51fa\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5143\u7d20\u5728\u961f\u5217\u5c3e\u8ffd\u52a0\uff0c\u800c\u4ece\u961f\u5217\u5934\u5220\u9664\u3002\u5728\u4f18\u5148\u961f\u5217\u4e2d\uff0c\u5143\u7d20\u88ab\u8d4b\u4e88\u4f18\u5148\u7ea7\u3002\u5f53\u8bbf\u95ee\u5143\u7d20\u65f6\uff0c\u5177\u6709\u6700\u9ad8\u4f18\u5148\u7ea7\u7684\u5143\u7d20\u6700\u5148\u5220\u9664\u3002\u4f18\u5148\u961f\u5217\u5177\u6709\u6700\u9ad8\u7ea7\u5148\u51fa \uff08largest-in\uff0cfirst-out\uff09\u7684\u884c\u4e3a\u7279\u5f81\u3002"),(0,u.kt)("blockquote",null,(0,u.kt)("p",{parentName:"blockquote"},"\u4f18\u5148\u961f\u5217\u662f0\u4e2a\u6216\u591a\u4e2a\u5143\u7d20\u7684\u96c6\u5408\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u6709\u4e00\u4e2a\u4f18\u5148\u6743\u6216\u503c\uff0c\u5bf9\u4f18\u5148\u961f\u5217\u6267\u884c\u7684\u64cd\u4f5c\u6709\uff1a")),(0,u.kt)("ol",null,(0,u.kt)("li",{parentName:"ol"},"\u67e5\u627e;"),(0,u.kt)("li",{parentName:"ol"},"\u63d2\u5165\u4e00\u4e2a\u65b0\u5143\u7d20;"),(0,u.kt)("li",{parentName:"ol"},"\u5220\u9664\u3002")),(0,u.kt)("p",null,"\u5728\u6700\u5c0f\u4f18\u5148\u961f\u5217(min priority queue)\u4e2d\uff0c\u67e5\u627e\u64cd\u4f5c\u7528\u6765\u641c\u7d22\u4f18\u5148\u6743\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u5220\u9664\u64cd\u4f5c\u7528\u6765\u5220\u9664\u8be5\u5143\u7d20\uff1b\u5bf9\u4e8e\u6700\u5927\u4f18\u5148\u961f\u5217(max priority queue)\uff0c\u67e5\u627e\u64cd\u4f5c\u7528\u6765\u641c\u7d22\u4f18\u5148\u6743\u6700\u5927\u7684\u5143\u7d20\uff0c\u5220\u9664\u64cd\u4f5c\u7528\u6765\u5220\u9664\u8be5\u5143\u7d20\u3002\u4f18\u5148\u6743\u961f\u5217\u4e2d\u7684\u5143\u7d20\u53ef\u4ee5\u6709\u76f8\u540c\u7684\u4f18\u5148\u6743\uff0c\u67e5\u627e\u4e0e\u5220\u9664\u64cd\u4f5c\u53ef\u6839\u636e\u4efb\u610f\u4f18\u5148\u6743\u8fdb\u884c\u3002"),(0,u.kt)("h2",{id:"\u4f18\u5148\u961f\u5217\u7684\u5b9e\u73b0"},"\u4f18\u5148\u961f\u5217\u7684\u5b9e\u73b0\uff1a"),(0,u.kt)("p",null,"\u9996\u5148\u5b9a\u4e49 PriorityQueue \u7ed3\u6784\u4f53"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug)]\nstruct PriorityQueue<T> where T: PartialOrd + Clone {\n    pq: Vec<T>\n}\n")),(0,u.kt)("p",null,"\u7b2c\u4e8c\u884c\u7684",(0,u.kt)("inlineCode",{parentName:"p"},"where T: PartialOrd + Clone"),"\u6307\u7684\u662f PriorityQueue \u5b58\u50a8\u7684\u6cdb\u578b T \u662f\u6ee1\u8db3 ",(0,u.kt)("inlineCode",{parentName:"p"},"PartialOrd")," \u548c ",(0,u.kt)("inlineCode",{parentName:"p"},"Clone")," trait \u7ea6\u675f\u7684\uff0c\u610f\u5473\u7740\u6cdb\u578b T \u662f\u53ef\u6392\u5e8f\u548c\u514b\u9686\u7684\u3002"),(0,u.kt)("p",null,"\u540e\u9762\u662f\u4e00\u4e9b\u57fa\u672c\u7684\u65b9\u6cd5\u5b9e\u73b0\uff0c\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u76f4\u63a5\u770b\u4ee3\u7801\u5427\u3002\u8fd9\u4e2a\u4f18\u5148\u961f\u5217\u662f\u57fa\u4e8eVec\u5b9e\u73b0\u7684\uff0c\u6709O(1)\u7684\u63d2\u5165\u548cO(n)\u7684\u6700\u5927/\u6700\u5c0f\u503c\u51fa\u5217\u3002"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-rust"},"impl<T> PriorityQueue<T> where T: PartialOrd + Clone {\n    fn new() -> PriorityQueue<T> {\n        PriorityQueue { pq: Vec::new() }\n    }\n\n    fn len(&self) -> usize {\n        self.pq.len()\n    }\n\n    fn is_empty(&self) -> bool {\n        self.pq.len() == 0\n    }\n\n    fn insert(&mut self, value: T) {\n        self.pq.push(value);\n    }\n\n    fn max(&self) -> Option<T> {\n        if self.is_empty() { return None }\n        let max = self.max_index();\n        Some(self.pq[max].clone())\n    }\n\n    fn min(&self) -> Option<T> {\n        if self.is_empty() { return None }\n        let min = self.min_index();\n        Some(self.pq[min].clone())\n    }\n\n    fn delete_max(&mut self) -> Option<T> {\n        if self.is_empty() { return None; }\n        let max = self.max_index();\n        Some(self.pq.remove(max).clone())\n    }\n\n    fn delete_min(&mut self) -> Option<T> {\n        if self.is_empty() { return None; }\n        let min = self.min_index();\n        Some(self.pq.remove(min).clone())\n    }\n\n    fn max_index(&self) -> usize {\n        let mut max = 0;\n        for i in 1..self.pq.len() - 1 {\n            if self.pq[max] < self.pq[i] {\n                max = i;\n            }\n        }\n        max\n    }\n\n    fn min_index(&self) -> usize {\n        let mut min = 0;\n        for i in 0..self.pq.len() - 1 {\n            if self.pq[i] < self.pq[i + 1] {\n                min = i;\n            }\n        }\n        min\n    }\n}\n")),(0,u.kt)("h2",{id:"\u6d4b\u8bd5\u4ee3\u7801"},"\u6d4b\u8bd5\u4ee3\u7801\uff1a"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-rust"},"fn test_keep_min() {\n    let mut pq = PriorityQueue::new();\n    pq.insert(3);\n    pq.insert(2);\n    pq.insert(1);\n    pq.insert(4);\n    assert!(pq.min().unwrap() == 1);\n}\n\nfn test_keep_max() {\n    let mut pq = PriorityQueue::new();\n    pq.insert(2);\n    pq.insert(4);\n    pq.insert(1);\n    pq.insert(3);\n    assert!(pq.max().unwrap() == 4);\n}\n\nfn test_is_empty() {\n    let mut pq = PriorityQueue::new();\n    assert!(pq.is_empty());\n    pq.insert(1);\n    assert!(!pq.is_empty());\n}\n\nfn test_len() {\n    let mut pq = PriorityQueue::new();\n    assert!(pq.len() == 0);\n    pq.insert(2);\n    pq.insert(4);\n    pq.insert(1);\n    assert!(pq.len() == 3);\n}\n\nfn test_delete_min() {\n    let mut pq = PriorityQueue::new();\n    pq.insert(3);\n    pq.insert(2);\n    pq.insert(1);\n    pq.insert(4);\n    assert!(pq.len() == 4);\n    assert!(pq.delete_min().unwrap() == 1);\n    assert!(pq.len() == 3);\n}\n\nfn test_delete_max() {\n    let mut pq = PriorityQueue::new();\n    pq.insert(2);\n    pq.insert(10);\n    pq.insert(1);\n    pq.insert(6);\n    pq.insert(3);\n    assert!(pq.len() == 5);\n    assert!(pq.delete_max().unwrap() == 10);\n    assert!(pq.len() == 4);\n}\n\nfn main() {\n    test_len();\n    test_delete_max();\n    test_delete_min();\n    test_is_empty();\n    test_keep_max();\n    test_keep_min();\n}\n")),(0,u.kt)("h2",{id:"\u7ec3\u4e60"},"\u7ec3\u4e60"),(0,u.kt)("p",null,"\u57fa\u4e8e\u4e8c\u53c9\u5806\u5b9e\u73b0\u4e00\u4e2a\u4f18\u5148\u961f\u5217\uff0c\u4ee5\u8fbe\u5230O(1)\u7684\u51fa\u5217\u548cO(log n)\u7684\u5165\u5217"))}f.isMDXComponent=!0}}]);