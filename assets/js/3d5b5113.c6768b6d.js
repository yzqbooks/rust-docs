"use strict";(self.webpackChunkrust_docs=self.webpackChunkrust_docs||[]).push([[609],{3905:function(e,n,t){t.d(n,{Zo:function(){return i},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function u(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?u(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):u(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},u=Object.keys(e);for(r=0;r<u.length;r++)t=u[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(r=0;r<u.length;r++)t=u[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},i=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,u=e.originalType,s=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),d=l(t),f=o,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||u;return t?r.createElement(m,a(a({ref:n},i),{},{components:t})):r.createElement(m,a({ref:n},i))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var u=t.length,a=new Array(u);a[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var l=2;l<u;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1503:function(e,n,t){t.r(n),t.d(n,{assets:function(){return i},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return p}});var r=t(7462),o=t(3366),u=(t(7294),t(3905)),a=["components"],c={},s="\u7f51\u7edc\u6a21\u5757:W\u732b\u7684\u56de\u97f3",l={unversionedId:"std/net",id:"std/net",title:"\u7f51\u7edc\u6a21\u5757:W\u732b\u7684\u56de\u97f3",description:"\u672c\u4f8b\u5b50\u4e2d\uff0cW\u732b\u5c06\u5e26\u5927\u5bb6\u5199\u4e00\u4e2a\u5927\u5bb6\u90fd\u5199\u8fc7\u4f46\u662f\u6ca1\u4ec0\u4e48\u4eba\u7528\u8fc7\u7684TCP ECHO\u8f6f\u4ef6\uff0c\u4f5c\u4e3a\u672c\u7ae0\u7684\u7ed3\u5c3e\u3002\u672c\u7a0b\u5e8f\u4ec5\u4f5c\u4e3a\u5b9e\u4f8b\u7a0b\u5e8f\uff0c\u6211\u4e2a\u4eba\u4f30\u8ba1\u4e5f\u6ca1\u6709\u4eba\u5728\u5b9e\u9645\u7684\u751f\u6d3b\u4e2d\u53bb\u4f7f\u7528\u5979\u3002\u4e0d\u8fc7\uff0c\u4f5c\u4e3a\u6807\u51c6\u5e93\u7684\u793a\u4f8b\u6765\u8bf4\uff0c\u5df2\u7ecf\u8db3\u591f\u3002",source:"@site/docs/std/net.md",sourceDirName:"std",slug:"/std/net",permalink:"/rust-docs/docs/std/net",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/std/net.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u76ee\u5f55\u64cd\u4f5c:\u7b80\u5355grep",permalink:"/rust-docs/docs/std/fs-and-path"},next:{title:"\u6807\u51c6\u5e93\u793a\u4f8b",permalink:"/rust-docs/docs/std/overview"}},i={},p=[],d={toc:p};function f(e){var n=e.components,t=(0,o.Z)(e,a);return(0,u.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,u.kt)("h1",{id:"\u7f51\u7edc\u6a21\u5757w\u732b\u7684\u56de\u97f3"},"\u7f51\u7edc\u6a21\u5757:W\u732b\u7684\u56de\u97f3"),(0,u.kt)("p",null,"\u672c\u4f8b\u5b50\u4e2d\uff0cW\u732b\u5c06\u5e26\u5927\u5bb6\u5199\u4e00\u4e2a\u5927\u5bb6\u90fd\u5199\u8fc7\u4f46\u662f\u6ca1\u4ec0\u4e48\u4eba\u7528\u8fc7\u7684TCP ECHO\u8f6f\u4ef6\uff0c\u4f5c\u4e3a\u672c\u7ae0\u7684\u7ed3\u5c3e\u3002\u672c\u7a0b\u5e8f\u4ec5\u4f5c\u4e3a\u5b9e\u4f8b\u7a0b\u5e8f\uff0c\u6211\u4e2a\u4eba\u4f30\u8ba1\u4e5f\u6ca1\u6709\u4eba\u5728\u5b9e\u9645\u7684\u751f\u6d3b\u4e2d\u53bb\u4f7f\u7528\u5979\u3002\u4e0d\u8fc7\uff0c\u4f5c\u4e3a\u6807\u51c6\u5e93\u7684\u793a\u4f8b\u6765\u8bf4\uff0c\u5df2\u7ecf\u8db3\u591f\u3002"),(0,u.kt)("p",null,"\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u4e00\u4e2a\u670d\u52a1\u5668\u7aef\u3002"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-rust"},'fn server<A: ToSocketAddrs>(addr: A) -> io::Result<()> {\n    // \u5efa\u7acb\u4e00\u4e2a\u76d1\u542c\u7a0b\u5e8f\n    let listener = try!(TcpListener::bind(&addr)) ;\n    // \u8fd9\u4e2a\u7a0b\u5e8f\u4e00\u6b21\u53ea\u9700\u5904\u7406\u4e00\u4e2a\u94fe\u63a5\u5c31\u597d\n    for stream in listener.incoming() {\n        // \u901a\u8fc7match\u518d\u6b21\u89e3\u5305 stream\u5230\n        match stream {\n            // \u8fd9\u91cc\u5339\u914d\u7684\u91cd\u70b9\u662f\u5982\u4f55\u5c06\u4e00\u4e2amut\u7684\u5339\u914d\u4f20\u7ed9\u4e00\u4e2aResult\n            Ok(mut st) => {\n                // \u6211\u4eec\u603b\u662f\u8981\u6c42client\u7aef\u5148\u53d1\u9001\u6570\u636e\n                // \u51c6\u5907\u4e00\u4e2a\u8d85\u5927\u7684\u7f13\u51b2\u533a\n                // \u5f53\u7136\u4e86\uff0c\u5728\u5b9e\u9645\u7684\u751f\u6d3b\u4e2d\u6211\u4eec\u4e00\u822c\u4f1a\u91c7\u7528\u73af\u5f62\u7f13\u51b2\u6765\u91cd\u590d\u5229\u7528\u5185\u5b58\u3002\n                // \u8fd9\u91cc\u4ec5\u4f5c\u6f14\u793a\uff0c\u662f\u4e00\u79cd\u5f88\u4f4e\u6548\u7684\u505a\u6cd5\n                let mut buf: Vec<u8> = vec![0u8; 1024];\n                // \u901a\u8fc7try!\u65b9\u6cd5\u6765\u89e3\u5305\n                // try!\u65b9\u6cd5\u7684\u91cd\u70b9\u662f\u9700\u8981\u6709\u7279\u5b9a\u7684Error\u7c7b\u578b\u4e0e\u4e4b\u914d\u5408\n                let rcount = try!(st.read(&mut buf));\n                // \u53ea\u8f93\u51fa\u7f13\u51b2\u533a\u91cc\u8bfb\u53d6\u5230\u7684\u5185\u5bb9\n                println!("{:?}", &buf[0..rcount]);\n                // \u56de\u5199\u5185\u5bb9\n                let wcount = try!(st.write(&buf[0..rcount]));\n                // \u4ee5\u4e0b\u4ee3\u7801\u5b9e\u9645\u4e0a\u7b97\u662f\u903b\u8f91\u5904\u7406\n                // \u5e76\u975e\u6807\u51c6\u5e93\u7684\u4e00\u90e8\u5206\u4e86\n                if rcount != wcount {\n                    panic!("Not Fully Echo!, r={}, w={}", rcount, wcount);\n                }\n                // \u6e05\u9664\u6389\u5df2\u7ecf\u8bfb\u5230\u7684\u5185\u5bb9\n                buf.clear();\n            }\n            Err(e) => {\n                panic!("{}", e);\n            }\n        }\n    }\n    // \u5173\u95ed\u6389Serve\u7aef\u7684\u94fe\u63a5\n    drop(listener);\n    Ok(())\n}\n\n')),(0,u.kt)("p",null,"\u7136\u540e\uff0c\u6211\u4eec\u51c6\u5907\u4e00\u4e2a\u6a21\u62dfTCP\u77ed\u94fe\u63a5\u7684\u5ba2\u6237\u7aef\uff1a"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-rust"},'fn client<A: ToSocketAddrs>(addr: A) -> io::Result<()> {\n\n    let mut buf = vec![0u8;1024];\n    loop {\n        // \u5bf9\u6bd4Listener\uff0cTcpStream\u5c31\u7b80\u5355\u5f88\u591a\u4e86\n        // \u672c\u6b21\u6a21\u62df\u7684\u662ftcp\u77ed\u94fe\u63a5\u7684\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u5178\u578b\u7684HTTP\u4ea4\u4e92\u7684\u57fa\u7840IO\u6a21\u62df\n        // \u5f53\u7136\uff0c\u8fd9\u4e2a\u901a\u8baf\u91cc\u9762\u5e76\u6ca1\u6709HTTP\u534f\u8bae XD\uff01\n        let mut stream = TcpStream::connect(&addr).unwrap();\n        let msg = "WaySLOG comming!".as_bytes();\n        // \u907f\u514d\u53d1\u9001\u6570\u636e\u592a\u5feb\u800c\u5237\u5c4f\n        thread::sleep_ms(100);\n        let rcount = try!(stream.write(&msg));\n        let _ = try!(stream.read(&mut buf));\n        println!("{:?}", &buf[0..rcount]);\n        buf.clear();\n    }\n    Ok(())\n}\n\n')),(0,u.kt)("p",null,"\u5c06\u6211\u4eec\u7684\u7a0b\u5e8f\u62fc\u63a5\u8d77\u6765\u5982\u4e0b\uff1a"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-rust"},'use std::net::*;\nuse std::io;\nuse std::io::{Read, Write};\nuse std::env;\nuse std::thread;\n\nfn server<A: ToSocketAddrs>(addr: A) -> io::Result<()> { .. }\n\n\nfn client<A: ToSocketAddrs>(addr: A) -> io::Result<()> { .. }\n\n\nfn main() {\n    let mut args = env::args();\n    args.next();\n    let action = args.next().unwrap();\n    if action == "s" {\n        server(&args.next().unwrap()).unwrap();\n    } else {\n        client(&args.next().unwrap()).unwrap();\n    }\n}\n\n')),(0,u.kt)("p",null,"\u5404\u4f4d\u53ef\u4ee5\u81ea\u5df1\u8bd5\u4e00\u4e0b\u7ed3\u679c"),(0,u.kt)("p",null,"\u5199\u7f51\u7edc\u7a0b\u5e8f\uff0c\u6ce8\u5b9a\u4e86\u8981\u5904\u7406\u5404\u79cd\u795e\u5947\u7684\u6761\u4ef6\u548c\u9519\u8bef\uff0c\u5b9a\u4e49\u81ea\u5df1\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7c98\u5305\u95ee\u9898\u7b49\u90fd\u662f\u9700\u8981\u6211\u4eec\u53bb\u5904\u7406\u548c\u5173\u6ce8\u7684\u3002\u76f8\u8f83\u800c\u8a00\uff0cRust\u672c\u8eab\u5728\u7f51\u7edc\u65b9\u9762\u7684\u57fa\u7840\u8bbe\u65bd\u5efa\u8bbe\u5e76\u4e0d\u5c3d\u5982\u4eba\u610f\uff0c\u751a\u81f3\u8fde\u7f51\u7edcI/O\u90fd\u53ea\u63d0\u4f9b\u4e86\u5982\u4e0a\u7684block I/O \u3002\u53ef\u80fd\u5176\u56e2\u961f\u66f4\u5173\u6ce8\u4e8e\u8bed\u8a00\u57fa\u7840\u8bed\u6cd5\u7279\u6027\u548c\u7f16\u8bd1\u7684\u6539\u8fdb\uff0c\u4f46\u5176\u5b9e\uff0c\u6709\u7740\u5b98\u65b9\u51fa\u54c1\u7684\u8fd9\u79cd\u7f51\u7edc\u5e93\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002\u540c\u65f6\uff0c\u6211\u4e5f\u5e0c\u671bRust\u80fd\u591f\u6d8c\u73b0\u51fa\u66f4\u591a\u7684\u7f51\u7edc\u5e93\u65b9\u6848\uff0c\u8ba9Rust\u7684\u660e\u5929\u66f4\u597d\u66f4\u5149\u660e\u3002"))}f.isMDXComponent=!0}}]);