"use strict";(self.webpackChunkrust_docs=self.webpackChunkrust_docs||[]).push([[4156],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(n),f=o,m=d["".concat(i,".").concat(f)]||d[f]||c[f]||a;return n?r.createElement(m,p(p({ref:t},s),{},{components:n})):r.createElement(m,p({ref:t},s))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,p=new Array(a);p[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,p[1]=l;for(var u=2;u<a;u++)p[u]=n[u];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3958:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return i},default:function(){return f},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),p=["components"],l={},i="\u8fd0\u7b97\u7b26\u91cd\u8f7d",u={unversionedId:"operator-overloading/operator",id:"operator-overloading/operator",title:"\u8fd0\u7b97\u7b26\u91cd\u8f7d",description:"Rust\u53ef\u4ee5\u8ba9\u6211\u4eec\u5bf9\u67d0\u4e9b\u8fd0\u7b97\u7b26\u8fdb\u884c\u91cd\u8f7d\uff0c\u8fd9\u5176\u4e2d\u5927\u90e8\u5206\u7684\u91cd\u8f7d\u90fd\u662f\u5bf9std::ops\u4e0b\u7684trait\u8fdb\u884c\u91cd\u8f7d\u800c\u5b9e\u73b0\u7684\u3002",source:"@site/docs/operator-overloading/operator.md",sourceDirName:"operator-overloading",slug:"/operator-overloading/operator",permalink:"/rust-docs/docs/operator-overloading/operator",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/operator-overloading/operator.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"pub restricted",permalink:"/rust-docs/docs/module/pub-restricted"},next:{title:"\u5f15\u7528&\u501f\u7528\uff08References&Borrowing\uff09",permalink:"/rust-docs/docs/ownership-system/borrowing_reference"}},s={},c=[{value:"\u91cd\u8f7d\u52a0\u6cd5",id:"\u91cd\u8f7d\u52a0\u6cd5",level:2},{value:"\u795e\u5947\u7684Output\u4ee5\u53ca\u52a8\u6001\u5206\u53d1",id:"\u795e\u5947\u7684output\u4ee5\u53ca\u52a8\u6001\u5206\u53d1",level:2},{value:"\u5bf9\u8303\u578b\u7684\u9650\u5236",id:"\u5bf9\u8303\u578b\u7684\u9650\u5236",level:2}],d={toc:c};function f(e){var t=e.components,n=(0,o.Z)(e,p);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u8fd0\u7b97\u7b26\u91cd\u8f7d"},"\u8fd0\u7b97\u7b26\u91cd\u8f7d"),(0,a.kt)("p",null,"Rust\u53ef\u4ee5\u8ba9\u6211\u4eec\u5bf9\u67d0\u4e9b\u8fd0\u7b97\u7b26\u8fdb\u884c\u91cd\u8f7d\uff0c\u8fd9\u5176\u4e2d\u5927\u90e8\u5206\u7684\u91cd\u8f7d\u90fd\u662f\u5bf9",(0,a.kt)("inlineCode",{parentName:"p"},"std::ops"),"\u4e0b\u7684trait\u8fdb\u884c\u91cd\u8f7d\u800c\u5b9e\u73b0\u7684\u3002"),(0,a.kt)("h2",{id:"\u91cd\u8f7d\u52a0\u6cd5"},"\u91cd\u8f7d\u52a0\u6cd5"),(0,a.kt)("p",null,"\u6211\u4eec\u73b0\u5728\u6765\u5b9e\u73b0\u4e00\u4e2a\u53ea\u652f\u6301\u52a0\u6cd5\u7684\u9609\u5272\u7248",(0,a.kt)("a",{parentName:"p",href:"https://zh.wikipedia.org/wiki/%E5%A4%8D%E6%95%B0_%28%E6%95%B0%E5%AD%A6%29"},"\u590d\u6570"),"\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use std::ops::Add;\n\n#[derive(Debug)]\nstruct Complex {\n    a: f64,\n    b: f64,\n}\n\nimpl Add for Complex {\n    type Output = Complex;\n    fn add(self, other: Complex) -> Complex {\n        Complex {a: self.a+other.a, b: self.b+other.b}\n    }\n}\n\nfn main() {\n    let cp1 = Complex{a: 1f64, b: 2.0};\n    let cp2 = Complex{a: 5.0, b:8.1};\n    let cp3 = cp1 + cp2;\n    print!("{:?}", cp3);\n}\n')),(0,a.kt)("p",null,"\u8f93\u51fa:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Complex { a: 6, b: 10.1}\n")),(0,a.kt)("p",null,"\u8fd9\u91cc\u6211\u4eec\u5b9e\u73b0\u4e86",(0,a.kt)("inlineCode",{parentName:"p"},"std::ops::Add"),"\u8fd9\u4e2atrait\u3002\u8fd9\u65f6\u5019\u6709\u540c\u5b66\u4e00\u62cd\u8111\u95e8\uff0c\u539f\u6765\u5982\u6b64\uff0c\u6ca1\u9519\u2026\u2026\u5176\u5b9eRust\u7684\u5927\u90e8\u5206\u8fd0\u7b97\u7b26\u90fd\u662f",(0,a.kt)("inlineCode",{parentName:"p"},"std::ops"),"\u4e0b\u7684trait\u7684\u8bed\u6cd5\u7cd6\uff01"),(0,a.kt)("p",null,"\u6211\u4eec\u6765\u770b\u770b",(0,a.kt)("inlineCode",{parentName:"p"},"std::ops::Add"),"\u7684\u5177\u4f53\u7ed3\u6784"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl Add<i32> for Point {\n    type Output = f64;\n\n    fn add(self, rhs: i32) -> f64 {\n        // add an i32 to a Point and get an f64\n    }\n}\n")),(0,a.kt)("h2",{id:"\u795e\u5947\u7684output\u4ee5\u53ca\u52a8\u6001\u5206\u53d1"},"\u795e\u5947\u7684Output\u4ee5\u53ca\u52a8\u6001\u5206\u53d1"),(0,a.kt)("p",null,"\u6709\u7684\u540c\u5b66\u4f1a\u95ee\u4e86\uff0c\u8fd9\u4e2a",(0,a.kt)("inlineCode",{parentName:"p"},"Output"),"\u662f\u80bf\u4e48\u56de\u4e8b\uff1f\u7b54\uff0c\u7c7b\u578b\u8f6c\u6362\u54df\u4eb2\uff01\n\u4e3e\u4e2a\u4e0d\u592a\u6070\u5f53\u7684\u6817\u5b50\uff0c\u6211\u4eec\u5728\u73b0\u5b9e\u4e2d\u4f1a\u51fa\u73b0",(0,a.kt)("inlineCode",{parentName:"p"},"0.5+0.5=1"),"\u8fd9\u6837\u7684\u7b97\u5f0f\uff0c\u7528Rust\u7684\u8bed\u8a00\u6765\u63cf\u8ff0\u5c31\u662f\uff1a \u4e24\u4e2a",(0,a.kt)("inlineCode",{parentName:"p"},"f32"),"\u76f8\u52a0\u5f97\u5230\u4e86\u4e00\u4e2a",(0,a.kt)("inlineCode",{parentName:"p"},"i8"),"\u3002\u663e\u800c\u6613\u89c1\uff0cOutput\u5c31\u662f\u4e3a\u8fd9\u79cd\u60c5\u51b5\u8bbe\u8ba1\u7684\u3002"),(0,a.kt)("p",null,"\u8fd8\u662f\u770b\u4ee3\u7801\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use std::ops::Add;\n\n#[derive(Debug)]\nstruct Complex {\n    a: f64,\n    b: f64,\n}\n\nimpl Add for Complex {\n    type Output = Complex;\n    fn add(self, other: Complex) -> Complex {\n        Complex {a: self.a+other.a, b: self.b+other.b}\n    }\n}\n\nimpl Add<i32> for Complex {\n    type Output = f64;\n    fn add(self, other: i32) -> f64 {\n        self.a + self.b + (other as f64)\n    }\n}\n\nfn main() {\n    let cp1 = Complex{a: 1f64, b: 2.0};\n    let cp2 = Complex{a: 5.0, b:8.1};\n    let cp3 = Complex{a: 9.0, b:20.0};\n    let complex_add_result = cp1 + cp2;\n    print!("{:?}\\n", complex_add_result);\n    print!("{:?}", cp3 + 10i32);\n}\n')),(0,a.kt)("p",null,"\u8f93\u51fa\u7ed3\u679c\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Complex { a: 6, b: 10.1 }\n39\n")),(0,a.kt)("h2",{id:"\u5bf9\u8303\u578b\u7684\u9650\u5236"},"\u5bf9\u8303\u578b\u7684\u9650\u5236"),(0,a.kt)("p",null,"Rust\u7684\u8fd0\u7b97\u7b26\u662f\u57fa\u4e8etrait\u7cfb\u7edf\u7684\uff0c\u540c\u6837\u7684\uff0c\u8fd0\u7b97\u7b26\u53ef\u4ee5\u88ab\u5f53\u6210\u4e00\u79cd\u5bf9\u8303\u578b\u7684\u9650\u5236\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u8981\u6c42",(0,a.kt)("inlineCode",{parentName:"p"},"\u8303\u578bT\u5fc5\u987b\u5b9e\u73b0\u4e86trait Mul<Output=T>"),"\u3002\n\u4e8e\u662f\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u5982\u4e0b\u7684\u4e00\u4efd\u4ee3\u7801\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use std::ops::Mul;\n\ntrait HasArea<T> {\n    fn area(&self) -> T;\n}\n\nstruct Square<T> {\n    x: T,\n    y: T,\n    side: T,\n}\n\nimpl<T> HasArea<T> for Square<T>\n        where T: Mul<Output=T> + Copy {\n    fn area(&self) -> T {\n        self.side * self.side\n    }\n}\n\nfn main() {\n    let s = Square {\n        x: 0.0f64,\n        y: 0.0f64,\n        side: 12.0f64,\n    };\n\n    println!("Area of s: {}", s.area());\n}\n')),(0,a.kt)("p",null,"\u5bf9\u4e8etrait ",(0,a.kt)("inlineCode",{parentName:"p"},"HasArea<T>"),"\u548c struct ",(0,a.kt)("inlineCode",{parentName:"p"},"Square<T>"),"\uff0c\u6211\u4eec\u901a\u8fc7",(0,a.kt)("inlineCode",{parentName:"p"},"where T: Mul<Output=T> + Copy")," \u9650\u5236\u4e86",(0,a.kt)("inlineCode",{parentName:"p"},"T"),"\u5fc5\u987b\u5b9e\u73b0\u4e58\u6cd5\u3002\u540c\u65f6Copy\u5219\u9650\u5236\u4e86Rust\u4e0d\u518d\u5c06self.side\u7ed9move\u5230\u8fd4\u56de\u503c\u91cc\u53bb\u3002"),(0,a.kt)("p",null,"\u5199\u6cd5\u7b80\u5355\uff0c\u8f7b\u677e\u6109\u5feb\u3002"))}f.isMDXComponent=!0}}]);