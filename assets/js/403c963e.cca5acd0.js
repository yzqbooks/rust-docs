"use strict";(self.webpackChunkrust_docs=self.webpackChunkrust_docs||[]).push([[4433],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,g=m["".concat(i,".").concat(d)]||m[d]||c[d]||s;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<s;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6421:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c}});var r=n(7462),a=n(3366),s=(n(7294),n(3905)),o=["components"],l={},i="rust web \u5f00\u53d1",u={unversionedId:"action/mysite/readme",id:"action/mysite/readme",title:"rust web \u5f00\u53d1",description:"rust\u65e2\u7136\u662f\u7cfb\u7edf\u7ea7\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u6240\u4ee5\u5f53\u7136\u4e5f\u80fd\u7528\u6765\u5f00\u53d1 web,\u4e0d\u8fc7\u60f3\u6211\u8fd9\u6837\u51e1\u592b\u4fd7\u5b50\uff0c\u80af\u5b9a\u4e0d\u80fd\u4ece\u5934\u81ea\u5df1\u5199\u4e00\u4e2a web",source:"@site/docs/action/mysite/readme.md",sourceDirName:"action/mysite",slug:"/action/mysite/",permalink:"/rust-docs/docs/action/mysite/",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/action/mysite/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Rust json\u5904\u7406",permalink:"/rust-docs/docs/action/json_data/"},next:{title:"\u5b9e\u6218\u7bc7",permalink:"/rust-docs/docs/action/preface"}},p={},c=[],m={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"rust-web-\u5f00\u53d1"},"rust web \u5f00\u53d1"),(0,s.kt)("p",null,"rust\u65e2\u7136\u662f\u7cfb\u7edf\u7ea7\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u6240\u4ee5\u5f53\u7136\u4e5f\u80fd\u7528\u6765\u5f00\u53d1 web,\u4e0d\u8fc7\u60f3\u6211\u8fd9\u6837\u51e1\u592b\u4fd7\u5b50\uff0c\u80af\u5b9a\u4e0d\u80fd\u4ece\u5934\u81ea\u5df1\u5199\u4e00\u4e2a web\n\u670d\u52a1\u5668\uff0c\u80af\u5b9a\u8981\u4f9d\u8d56\u5df2\u7ecf\u5b58\u5728\u7684 rust web\u5f00\u53d1\u6846\u67b6\u6765\u5b8c\u6210 web \u5f00\u53d1\u3002"),(0,s.kt)("p",null,"rust\u76ee\u524d\u6bd4\u8f83\u6709\u540d\u7684\u6846\u67b6\u662firon\u548cnickel\uff0c\u6211\u4eec\u4e24\u4e2a\u90fd\u5199\u4e00\u4e0b\u7b80\u5355\u7684\u4f7f\u7528\u6559\u7a0b\u3002"),(0,s.kt)("p",null,"##iron"),(0,s.kt)("p",null,"\u63a5\u4e0a\u4e00\u7bc7\uff0c\u4f7f\u7528cargo\u83b7\u53d6\u7b2c\u4e09\u65b9\u5e93\u3002",(0,s.kt)("inlineCode",{parentName:"p"},"cargo new mysite --bin")),(0,s.kt)("p",null,"\u5728cargo.toml\u4e2d\u6dfb\u52a0iron\u7684\u4f9d\u8d56\uff0c"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\niron = "*"\n')),(0,s.kt)("p",null,"\u7136\u540ebuild\u5c06\u4f9d\u8d56\u4e0b\u8f7d\u5230\u672c\u5730 ",(0,s.kt)("inlineCode",{parentName:"p"},"cargo build")),(0,s.kt)("p",null,"\u5982\u679c\u62a5ssl\u9519\u8bef\uff0c\u90a3\u53ef\u80fd\u4f60\u9700\u8981\u5b89\u88c5linux\u7684ssl\u5f00\u53d1\u5e93\u3002"),(0,s.kt)("p",null,"\u9996\u5148\u8fd8\u662f\u4ece hello world \u5f00\u59cb\u5427,\u7ee7\u7eed\u6284\u88ad\u5b98\u65b9\u7684\u4f8b\u5b50\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'extern crate iron;\n\nuse iron::prelude::*;\nuse iron::status;\n\nfn main() {\n    Iron::new(|_: &mut Request| {\n        Ok(Response::with((status::Ok, "Hello World!")))\n    }).http("localhost:3000").unwrap();\n}\n')),(0,s.kt)("p",null,"\u7136\u540e\u8fd0\u884c"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"cargo run")),(0,s.kt)("p",null,"\u4f7f\u7528curl\u76f4\u63a5\u5c31\u53ef\u4ee5\u8bbf\u95ee\u4f60\u7684\u7f51\u7ad9\u4e86\u3002"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"curl localhost:3000")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Hello World!")),(0,s.kt)("p",null,"\u4ed4\u7ec6\u4e00\u770b\uff0c\u53d1\u73b0\u8fd9\u4e2a\u4f8b\u5b50\u5f88\u65e0\u5398\u5934\u554a\uff0c\u5bf9\u4e8e\u4e60\u60ef\u4e86\u5199python\u7684\u6211\u6765\u8bf4\uff0c\u786e\u5b9e\u4e0d\u4e60\u60ef\u3002\n\u7b80\u5355\u70b9\u770b\uff1a"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},'iron::new().http("localhost:3000").unwrap()'),"\n\u8fd9\u53e5\u662f\u670d\u52a1\u5668\u7684\u57fa\u672c\u7684\u5b9a\u4e49\uff0cnew\u5185\u90e8\u662f\u4e00\u4e2a",(0,s.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/book/closures.html"},"rust lambda \u8868\u8fbe\u5f0f")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"let plus_one = |x: i32| x + 1;\n\nassert_eq!(2, plus_one(1));\n")),(0,s.kt)("p",null,"\u5177\u4f53\u7684\u600e\u4e48\u4f7f\u7528 \uff0c\u53ef\u4ee5\u6682\u65f6\u4e0d\u7528\u7406\u4f1a\uff0c\u56e0\u4e3a\u4f60\u53ea\u8981\u77e5\u9053\u5982\u4f55\u5b8c\u6210web\uff0c\u56e0\u4e3a\u6211\u4e5f\u4e0d\u4f1a\u3002\u3002\n\u7ed3\u5408\u4e4b\u524d\u4e00\u7ae0\u8282\u7684json\u5904\u7406\uff0c\u6211\u4eec\u6765\u770b\u770bweb\u63a5\u53e3\u600e\u4e48\u8fd4\u56dejson,\u5f53\u7136\u4e5f\u8981 rustc_serialize \u653e\u5230 cargo.toml \u4e2d"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"\u4e0b\u9762\u7684\u4ee3\u7801\u76f4\u63a5\u53c2\u8003\u5f00\u6e90\u4ee3\u7801",(0,s.kt)("a",{parentName:"em",href:"https://github.com/brson/httptest#lets-make-a-web-service-and-client-in-rust"},"\u5730\u5740"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'extern crate iron;\nextern crate rustc_serialize;\n\nuse iron::prelude::*;\nuse iron::status;\nuse rustc_serialize::json;\n\n#[derive(RustcEncodable)]\nstruct Greeting {\n    msg: String\n}\n\nfn main() {\n    fn hello_world(_: &mut Request) -> IronResult<Response> {\n        let greeting = Greeting { msg: "Hello, World".to_string() };\n        let payload = json::encode(&greeting).unwrap();\n        Ok(Response::with((status::Ok, payload)))\n    }\n\n    Iron::new(hello_world).http("localhost:3000").unwrap();\n    println!("On 3000");\n}\n')),(0,s.kt)("p",null,"\u6267\u884c cargo run \u4f7f\u7528 curl \u6d4b\u8bd5\u7ed3\u679c:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'curl localhost:3000\n{"msg":"Hello, World"}\n')),(0,s.kt)("p",null,"\u5f53\u7136\u53ef\u4ee5\u53ef\u4ee5\u5b9e\u73b0\u66f4\u591a\u7684\u4e1a\u52a1\u9700\u6c42\uff0c\u901a\u8fc7\u63a7\u5236\u81ea\u5df1\u7684json\u3002"),(0,s.kt)("p",null,"\u65e2\u7136\u6709\u4e86json\u4e86\uff0c\u5982\u679c\u8981\u591a\u4e2a\u8def\u7531\u4ec0\u4e48\u7684\uff0c\u5c82\u4e0d\u662f\u5b8c\u86cb\u4e86\uff0c\u6240\u4ee5\u4e0d\u53ef\u80fd\u8fd9\u6837\u7684\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u4e00\u4e0b\u600e\u4e48\u5b9e\u73b0\u8def\u7531\u7684\u5b9a\u5236"),(0,s.kt)("p",null,"\u4e0d\u8bf4\u8bdd\u76f4\u63a5\u4e0a\u4ee3\u7801\uff0c\u540c\u4e00\u6837\u8981\u5728\u4f60\u7684cargo.toml\u6587\u4ef6\u4e2d\u6dfb\u52a0\u5bf9router\u7684\u4f9d\u8d56"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'extern crate iron;\nextern crate router;\nextern crate rustc_serialize;\n\nuse iron::prelude::*;\nuse iron::status;\nuse router::Router;\nuse rustc_serialize::json;\n\n#[derive(RustcEncodable, RustcDecodable)]\nstruct Greeting {\n    msg: String\n}\n\nfn main() {\n    let mut router = Router::new();\n\n    router.get("/", hello_world);\n    router.post("/set", set_greeting);\n\n    fn hello_world(_: &mut Request) -> IronResult<Response> {\n        let greeting = Greeting { msg: "Hello, World".to_string() };\n        let payload = json::encode(&greeting).unwrap();\n        Ok(Response::with((status::Ok, payload)))\n    }\n\n    // Receive a message by POST and play it back.\n    fn set_greeting(request: &mut Request) -> IronResult<Response> {\n        let payload = request.body.read_to_string();\n        let request: Greeting = json::decode(payload).unwrap();\n        let greeting = Greeting { msg: request.msg };\n        let payload = json::encode(&greeting).unwrap();\n        Ok(Response::with((status::Ok, payload)))\n    }\n\n    Iron::new(router).http("localhost:3000").unwrap();\n}\n')),(0,s.kt)("p",null,"\u8fd9\u6b21\u6dfb\u52a0\u4e86\u8def\u7531\u7684\u5b9e\u73b0\u548c\u83b7\u53d6\u5ba2\u6237\u7aef\u53d1\u9001\u8fc7\u6765\u7684\u6570\u636e\uff0c\u6709\u4e86get\uff0cpost,\u6240\u4ee5\u73b0\u5728\u4e00\u4e2a\u57fa\u672c\u7684api\u7f51\u7ad9\u5df2\u7ecf\u5b8c\u6210\u4e86\u3002\u4e0d\u8fc7\n\u5e76\u4e0d\u662f\u6240\u6709\u7684\u7f51\u7ad9\u90fd\u662fapi\u6765\u8bbf\u95ee\uff0c\u540c\u6837\u9700\u8981html\u6a21\u7248\u5f15\u64ce\u548c\u76f4\u63a5\u8fd4\u56de\u9759\u6001\u9875\u9762\u3002\u7b49\u7b49"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"vagrant@ubuntu-14:~/tmp/test/rustprimer/mysite$ cargo build\n   Compiling mysite v0.1.0 (file:///home/vagrant/tmp/test/rustprimer/mysite)\nsrc/main.rs:29:36: 29:52 error: no method named `read_to_string` found for type `iron::request::Body<'_, '_>` in the current scope\nsrc/main.rs:29         let payload = request.body.read_to_string();\n                                                  ^~~~~~~~~~~~~~~~\nsrc/main.rs:29:36: 29:52 help: items from traits can only be used if the trait is in scope; the following trait is implemented but not in scope, perhaps add a `use` for it:\nsrc/main.rs:29:36: 29:52 help: candidate #1: use `std::io::Read`\nerror: aborting due to previous error\nCould not compile `mysite`.\n")),(0,s.kt)("p",null,"\u7f16\u8bd1\u51fa\u9519\u4e86\uff0c\u592a\u7cdf\u7cd5\u4e86\uff0c\u63d0\u793a\u8bf4\u6ca1\u6709read_to_string\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u7136\u540e\u6211\u53bb\u6587\u6863\u67e5\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u6709",(0,s.kt)("a",{parentName:"p",href:"http://ironframework.io/doc/iron/request/struct.Body.html"},"read_to_string\u65b9\u6cd5"),"\n\u518d\u770b\u63d0\u793a\u4fe1\u606f"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"src/main.rs:29:36: 29:52 help: items from traits can only be used if the trait is in scope; the following trait is implemented but not in scope, perhaps add a `use` for it:\nsrc/main.rs:29:36: 29:52 help: candidate #1: use `std::io::Read`\n")),(0,s.kt)("p",null,"\u8ba9\u6211\u4eec\u6dfb\u52a0\u4e00\u4e2a",(0,s.kt)("inlineCode",{parentName:"p"},"std::io::Read"),",\u8fd9\u4e2a\u5982\u679c\u64cd\u4f5c\u8fc7\u6587\u4ef6\uff0c\u4f60\u4e00\u5b9a\u77e5\u9053\u600e\u4e48\u5199\uff0c\u6dfb\u52a0\u4e00\u4e0b\uff0c\u5e94\u8be5\u80fd\u8fc7\u53bb\u4e86\uff0c\u8fd8\u662f\u7ee7\u7eed\u51fa\u9519\u4e86\uff0c\u770b\u770b\u62a5\u9519"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"   Compiling mysite v0.1.0 (file:///home/vagrant/tmp/test/rustprimer/mysite)\nsrc/main.rs:30:36: 30:52 error: this function takes 1 parameter but 0 parameters were supplied [E0061]\nsrc/main.rs:30         let payload = request.body.read_to_string();\n                                                  ^~~~~~~~~~~~~~~~\nsrc/main.rs:30:36: 30:52 help: run `rustc --explain E0061` to see a detailed explanation\nsrc/main.rs:31:46: 31:53 error: mismatched types:\n expected `&str`,\n    found `core::result::Result<usize, std::io::error::Error>`\n(expected &-ptr,\n    found enum `core::result::Result`) [E0308]\nsrc/main.rs:31         let request: Greeting = json::decode(payload).unwrap();\n                                                            ^~~~~~~\nsrc/main.rs:31:46: 31:53 help: run `rustc --explain E0308` to see a detailed explanation\nsrc/main.rs:30:36: 30:52 error: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements [E0495]\nsrc/main.rs:30         let payload = request.body.read_to_string();\n                                                  ^~~~~~~~~~~~~~~~\nsrc/main.rs:29:5: 35:6 help: consider using an explicit lifetime parameter as shown: fn set_greeting<'a>(request: &mut Request<'a, 'a>) -> IronResult<Response>\nsrc/main.rs:29     fn set_greeting(request: &mut Request) -> IronResult<Response> {\nsrc/main.rs:30         let payload = request.body.read_to_string();\nsrc/main.rs:31         let request: Greeting = json::decode(payload).unwrap();\nsrc/main.rs:32         let greeting = Greeting { msg: request.msg };\nsrc/main.rs:33         let payload = json::encode(&greeting).unwrap();\nsrc/main.rs:34         Ok(Response::with((status::Ok, payload)))\n               ...\nerror: aborting due to 3 previous errors\nCould not compile `mysite`.\n\n")),(0,s.kt)("p",null,"\u7b2c\u4e00\u53e5\u63d0\u793a\u6211\u4eec\uff0c\u8fd9\u4e2aread_to_string(),\u81f3\u5c11\u8981\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u4f46\u662f\u6211\u4eec\u4e00\u4e2a\u90fd\u6ca1\u6709\u63d0\u4f9b\u3002\n\u6211\u4eec\u770b\u770b",(0,s.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/nightly/std/io/trait.Read.html#method.read_to_string"},"read_to_string\u7684\u7528\u6cd5")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'\nse std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nlet mut f = try!(File::open("foo.txt"));\nlet mut buffer = String::new();\n\ntry!(f.read_to_string(&mut buffer));\n\n')),(0,s.kt)("p",null,"\u7528\u6cd5\u6bd4\u8f83\u7b80\u5355\uff0c\u6211\u4eec\u4fee\u6539\u4e00\u4e0b\u521a\u521a\u7684\u51fd\u6570\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"fn set_greeting(request: &mut Request) -> IronResult<Response> {\n        let mut payload = String::new();\n        request.body.read_to_string(&mut payload);\n        let request: Greeting = json::decode(&payload).unwrap();\n        let greeting = Greeting { msg: request.msg };\n        let payload = json::encode(&greeting).unwrap();\n        Ok(Response::with((status::Ok, payload)))\n    }\n")),(0,s.kt)("p",null,"\u4ecerequest\u4e2d\u8bfb\u53d6\u5b57\u7b26\u4e32\uff0c\u8bfb\u53d6\u7684\u7ed3\u679c\u5b58\u653e\u5230payload\u4e2d\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u8fdb\u884c\u64cd\u4f5c\u4e86\uff0c\u7f16\u8bd1\u4e4b\u540e\u8fd0\u884c\uff0c\u4f7f\u7528curl\u63d0\u4ea4\u4e00\u4e2apost\u6570\u636e"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'$curl -X POST -d \'{"msg":"Just trust the Rust"}\' http://localhost:3000/set\n{"msg":"Just trust the Rust"}\n')),(0,s.kt)("p",null,"iron \u57fa\u672c\u544a\u4e00\u6bb5\u843d\n\u5f53\u7136\u8fd8\u6709\u5982\u4f55\u4f7f\u7528html\u6a21\u7248\u5f15\u64ce\uff0c\u90a3\u5c31\u662f\u76f4\u63a5\u770b\u6587\u6863\u5c31\u884c\u4e86\u3002"),(0,s.kt)("p",null,"##",(0,s.kt)("a",{parentName:"p",href:"http://nickel.rs/"},"nickel")),(0,s.kt)("p",null,"\u5f53\u7136\u65e2\u7136\u662fweb\u6846\u67b6\u80af\u5b9a\u662firon\u80fd\u5e72\u7684nicke\u4e5f\u80fd\u5e72\uff0c\u6240\u4ee5\u90a3\u6211\u4eec\u5c31\u770b\u770b\u5982\u4f55\u505a\u4e00\u4e2ahello \u548c\u8fd4\u56de\u4e00\u4e2ahtml\n\u7684\u9875\u9762"),(0,s.kt)("p",null,"\u540c\u6837\u6211\u4eec\u521b\u5efa",(0,s.kt)("inlineCode",{parentName:"p"},"cargo new site --bin"),"\uff0c\u7136\u540e\u6dfb\u52a0nickel\u5230cargo.toml\u4e2d,",(0,s.kt)("inlineCode",{parentName:"p"},"cargo build")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'\n#[macro_use] extern crate nickel;\n\nuse nickel::Nickel;\n\nfn main() {\n    let mut server = Nickel::new();\n\n    server.utilize(router! {\n        get "**" => |_req, _res| {\n            "Hello world!"\n        }\n    });\n\n    server.listen("127.0.0.1:6767");\n}\n')),(0,s.kt)("p",null,"\u7b80\u5355\u6765\u770b\uff0c\u4e5f\u5c31\u662f\u8fd9\u6837\u56de\u4e8b\u3002"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"\u5f15\u5165\u4e86nickel\u7684\u5b8f"),(0,s.kt)("li",{parentName:"ol"},"\u521d\u59cb\u5316Nickel"),(0,s.kt)("li",{parentName:"ol"},"\u8c03\u7528utilize\u6765\u5b9a\u4e49\u8def\u7531\u6a21\u5757\u3002"),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("inlineCode",{parentName:"li"},"router!"),' \u5b8f\uff0c\u4f20\u5165\u7684\u53c2\u6570\u662f get \u65b9\u6cd5\u548c\u5bf9\u5e94\u7684\u8def\u5f84\uff0c"',"*","*",'"\u662f\u5168\u8def\u5f84\u5339\u914d\u3002'),(0,s.kt)("li",{parentName:"ol"},"listen\u542f\u52a8\u670d\u52a1\u5668")),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"http://nickel.rs/#easy-templating"},"\u5f53\u7136\u6211\u4eec\u8981\u5f15\u5165\u5173\u4e8ehtml\u6a21\u7248\u76f8\u5173\u7684\u4fe1\u606f")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'#[macro_use] extern crate nickel;\n\nuse std::collections::HashMap;\nuse nickel::{Nickel, HttpRouter};\n\nfn main() {\n    let mut server = Nickel::new();\n\n    server.get("/", middleware! { |_, response|\n        let mut data = HashMap::new();\n        data.insert("name", "user");\n        return response.render("site/assets/template.tpl", &data);\n    });\n\n    server.listen("127.0.0.1:6767");\n}\n\n')),(0,s.kt)("p",null,"\u4e0a\u9762\u7684\u4fe1\u606f\u4f60\u53ef\u4ee5\u7f16\u8bd1\uff0c\u4f7f\u7528curl\u770b\u770b\u53d1\u73b0\u51fa\u73b0"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$ curl http://127.0.0.1:6767\nInternal Server Error\n")),(0,s.kt)("p",null,"\u770b\u770b\u6587\u6863\uff0c\u6ca1\u53d1\u73b0\u4ec0\u4e48\u95ee\u9898\uff0c\u6211\u7d27\u7d27\u66f4\u6362\u4e86\u4e00\u4e2a\u6587\u4ef6\u5939\u7684\u540d\u5b57\uff0c\u8fd9\u4e2a\u6587\u4ef6\u5939\u6211\u4e5f\u521b\u5efa\u4e86\u3002\n\u7136\u540e\u6211\u5728\u60f3\u96be\u9053\u662f\u670d\u52a1\u5668\u5c06\u76ee\u5f55\u5199\u6b7b\u4e86\u5417\uff1f\u4e8e\u662f\u5c06\u4e0a\u9762\u7684\u8def\u5f84\u6539\u6b63\u8fd9\u4e2a\uff0c\u95ee\u9898\u89e3\u51b3\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'return response.render("examples/assets/template.tpl", &data);\n')),(0,s.kt)("p",null,"\u6211\u4eec\u770b\u4e00\u4e0b\u76ee\u5f55\u7ed3\u6784"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},".\n|-- Cargo.lock\n|-- Cargo.toml\n|-- examples\n|   `-- assets\n|       `-- template.tpl\n|-- src\n|   `-- main.rs\n\n")))}d.isMDXComponent=!0}}]);