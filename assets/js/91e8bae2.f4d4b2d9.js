"use strict";(self.webpackChunkrust_docs=self.webpackChunkrust_docs||[]).push([[6696],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,f=d["".concat(u,".").concat(m)]||d[m]||s[m]||i;return t?r.createElement(f,l(l({ref:n},p),{},{components:t})):r.createElement(f,l({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=d;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7964:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return s}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),l=["components"],o={},u="\u51fd\u6570\u4e0e\u65b9\u6cd5",c={unversionedId:"quickstart/function-method",id:"quickstart/function-method",title:"\u51fd\u6570\u4e0e\u65b9\u6cd5",description:"\u51fd\u6570",source:"@site/docs/quickstart/function-method.md",sourceDirName:"quickstart",slug:"/quickstart/function-method",permalink:"/rust-docs/docs/quickstart/function-method",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/quickstart/function-method.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u63a7\u5236\u6d41(control flow)",permalink:"/rust-docs/docs/quickstart/control-flow"},next:{title:"\u8f93\u5165\u8f93\u51fa\u6d41",permalink:"/rust-docs/docs/quickstart/io-stream"}},p={},s=[{value:"\u51fd\u6570",id:"\u51fd\u6570",level:2},{value:"\u533f\u540d\u51fd\u6570",id:"\u533f\u540d\u51fd\u6570",level:2},{value:"\u9ad8\u9636\u51fd\u6570",id:"\u9ad8\u9636\u51fd\u6570",level:2},{value:"\u65b9\u6cd5",id:"\u65b9\u6cd5",level:2}],d={toc:s};function m(e){var n=e.components,t=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u51fd\u6570\u4e0e\u65b9\u6cd5"},"\u51fd\u6570\u4e0e\u65b9\u6cd5"),(0,i.kt)("h2",{id:"\u51fd\u6570"},"\u51fd\u6570"),(0,i.kt)("p",null,"\u8981\u58f0\u660e\u4e00\u4e2a\u51fd\u6570\uff0c\u9700\u8981\u4f7f\u7528\u5173\u952e\u5b57",(0,i.kt)("inlineCode",{parentName:"p"},"fn"),"\uff0c\u540e\u9762\u8ddf\u4e0a\u51fd\u6570\u540d\uff0c\u6bd4\u5982"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"fn add_one(x: i32) -> i32 {\n    x + 1\n}\n")),(0,i.kt)("p",null,"\u5176\u4e2d\u51fd\u6570\u53c2\u6570\u7684\u7c7b\u578b\u4e0d\u80fd\u7701\u7565\uff0c\u53ef\u4ee5\u6709\u591a\u4e2a\u53c2\u6570\uff0c\u4f46\u662f\u6700\u591a\u53ea\u80fd\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\n\u63d0\u524d\u8fd4\u56de\u4f7f\u7528",(0,i.kt)("inlineCode",{parentName:"p"},"return"),"\u5173\u952e\u5b57\u3002Rust\u7f16\u8bd1\u5668\u4f1a\u5bf9\u672a\u4f7f\u7528\u7684\u51fd\u6570\u63d0\u51fa\u8b66\u544a\uff0c\n\u53ef\u4ee5\u4f7f\u7528\u5c5e\u6027",(0,i.kt)("inlineCode",{parentName:"p"},"#[allow(dead_code)]"),"\u7981\u7528\u65e0\u6548\u4ee3\u7801\u68c0\u67e5\u3002"),(0,i.kt)("p",null,"Rust\u6709\u4e00\u4e2a\u7279\u6b8a\u7279\u6027\u9002\u7528\u4e8e\u53d1\u6563\u51fd\u6570 (diverging function)\uff0c\u5b83\u4e0d\u8fd4\u56de\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'fn diverges() -> ! {\n    panic!("This function never returns!");\n}\n')),(0,i.kt)("p",null,"\u5176\u4e2d",(0,i.kt)("inlineCode",{parentName:"p"},"panic!"),"\u662f\u4e00\u4e2a\u5b8f\uff0c\u4f7f\u5f53\u524d\u6267\u884c\u7ebf\u7a0b\u5d29\u6e83\u5e76\u6253\u5370\u7ed9\u5b9a\u4fe1\u606f\u3002\u8fd4\u56de\u7c7b\u578b",(0,i.kt)("inlineCode",{parentName:"p"},"!"),"\u53ef\u7528\u4f5c\u4efb\u4f55\u7c7b\u578b\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"let x: i32 = diverges();\nlet y: String = diverges();\n")),(0,i.kt)("h2",{id:"\u533f\u540d\u51fd\u6570"},"\u533f\u540d\u51fd\u6570"),(0,i.kt)("p",null,"Rust\u4f7f\u7528\u95ed\u5305 (closure) \u6765\u521b\u5efa\u533f\u540d\u51fd\u6570\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"let num = 5;\nlet plus_num = |x: i32| x + num;\n")),(0,i.kt)("p",null,"\u5176\u4e2d\u95ed\u5305",(0,i.kt)("inlineCode",{parentName:"p"},"plus_num"),"\u501f\u7528\u4e86\u5b83\u4f5c\u7528\u57df\u4e2d\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"let"),"\u7ed1\u5b9a",(0,i.kt)("inlineCode",{parentName:"p"},"num"),"\u3002\u5982\u679c\u8981\u8ba9\u95ed\u5305\u83b7\u5f97\u6240\u6709\u6743\uff0c\n\u53ef\u4ee5\u4f7f\u7528",(0,i.kt)("inlineCode",{parentName:"p"},"move"),"\u5173\u952e\u5b57\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"let mut num = 5;\n\n{\n    let mut add_num = move |x: i32| num += x;   // \u95ed\u5305\u901a\u8fc7move\u83b7\u53d6\u4e86num\u7684\u6240\u6709\u6743\n\n    add_num(5);\n}\n\n// \u4e0b\u9762\u7684num\u5728\u88abmove\u4e4b\u540e\u8fd8\u80fd\u7ee7\u7eed\u4f7f\u7528\u662f\u56e0\u4e3a\u5176\u5b9e\u73b0\u4e86Copy\u7279\u6027\n// \u5177\u4f53\u53ef\u89c1\u6240\u6709\u6743(Owership)\u7ae0\u8282\nassert_eq!(5, num);\n")),(0,i.kt)("h2",{id:"\u9ad8\u9636\u51fd\u6570"},"\u9ad8\u9636\u51fd\u6570"),(0,i.kt)("p",null,"Rust \u8fd8\u652f\u6301\u9ad8\u9636\u51fd\u6570 (high order function)\uff0c\u5141\u8bb8\u628a\u95ed\u5305\u4f5c\u4e3a\u53c2\u6570\u6765\u751f\u6210\u65b0\u7684\u51fd\u6570\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'fn add_one(x: i32) -> i32 { x + 1 }\n\nfn apply<F>(f: F, y: i32) -> i32\n    where F: Fn(i32) -> i32\n{\n    f(y) * y\n}\n\nfn factory(x: i32) -> Box<Fn(i32) -> i32> {\n    Box::new(move |y| x + y)\n}\n\nfn main() {\n    let transform: fn(i32) -> i32 = add_one;\n    let f0 = add_one(2i32) * 2;\n    let f1 = apply(add_one, 2);\n    let f2 = apply(transform, 2);\n    println!("{}, {}, {}", f0, f1, f2);\n\n    let closure = |x: i32| x + 1;\n    let c0 = closure(2i32) * 2;\n    let c1 = apply(closure, 2);\n    let c2 = apply(|x| x + 1, 2);\n    println!("{}, {}, {}", c0, c1, c2);\n\n    let box_fn = factory(1i32);\n    let b0 = box_fn(2i32) * 2;\n    let b1 = (*box_fn)(2i32) * 2;\n    let b2 = (&box_fn)(2i32) * 2;\n    println!("{}, {}, {}", b0, b1, b2);\n\n    let add_num = &(*box_fn);\n    let translate: &Fn(i32) -> i32 = add_num;\n    let z0 = add_num(2i32) * 2;\n    let z1 = apply(add_num, 2);\n    let z2 = apply(translate, 2);\n    println!("{}, {}, {}", z0, z1, z2);\n}\n')),(0,i.kt)("h2",{id:"\u65b9\u6cd5"},"\u65b9\u6cd5"),(0,i.kt)("p",null,"Rust\u901a\u8fc7",(0,i.kt)("inlineCode",{parentName:"p"},"impl"),"\u5173\u952e\u5b57\u5728",(0,i.kt)("inlineCode",{parentName:"p"},"struct"),"\u3001",(0,i.kt)("inlineCode",{parentName:"p"},"enum"),"\u6216\u8005",(0,i.kt)("inlineCode",{parentName:"p"},"trait"),"\u5bf9\u8c61\u4e0a\u5b9e\u73b0\u65b9\u6cd5\u8c03\u7528\u8bed\u6cd5 (method call syntax)\u3002\n\u5173\u8054\u51fd\u6570 (associated function) \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u901a\u5e38\u4e3a",(0,i.kt)("inlineCode",{parentName:"p"},"self"),"\u53c2\u6570\uff0c\u67093\u79cd\u53d8\u4f53\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"self"),"\uff0c\u5141\u8bb8\u5b9e\u73b0\u8005\u79fb\u52a8\u548c\u4fee\u6539\u5bf9\u8c61\uff0c\u5bf9\u5e94\u7684\u95ed\u5305\u7279\u6027\u4e3a",(0,i.kt)("inlineCode",{parentName:"li"},"FnOnce"),"\u3002"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"&self"),"\uff0c\u65e2\u4e0d\u5141\u8bb8\u5b9e\u73b0\u8005\u79fb\u52a8\u5bf9\u8c61\u4e5f\u4e0d\u5141\u8bb8\u4fee\u6539\uff0c\u5bf9\u5e94\u7684\u95ed\u5305\u7279\u6027\u4e3a",(0,i.kt)("inlineCode",{parentName:"li"},"Fn"),"\u3002"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"&mut self"),"\uff0c\u5141\u8bb8\u5b9e\u73b0\u8005\u4fee\u6539\u5bf9\u8c61\u4f46\u4e0d\u5141\u8bb8\u79fb\u52a8\uff0c\u5bf9\u5e94\u7684\u95ed\u5305\u7279\u6027\u4e3a",(0,i.kt)("inlineCode",{parentName:"li"},"FnMut"),"\u3002")),(0,i.kt)("p",null,"\u4e0d\u542b",(0,i.kt)("inlineCode",{parentName:"p"},"self"),"\u53c2\u6570\u7684\u5173\u8054\u51fd\u6570\u79f0\u4e3a\u9759\u6001\u65b9\u6cd5 (static method)\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'struct Circle {\n    x: f64,\n    y: f64,\n    radius: f64,\n}\n\nimpl Circle {\n    fn new(x: f64, y: f64, radius: f64) -> Circle {\n        Circle {\n            x: x,\n            y: y,\n            radius: radius,\n        }\n    }\n\n    fn area(&self) -> f64 {\n        std::f64::consts::PI * (self.radius * self.radius)\n    }\n}\n\nfn main() {\n    let c = Circle { x: 0.0, y: 0.0, radius: 2.0 };\n    println!("{}", c.area());\n\n    // use associated function and method chaining\n    println!("{}", Circle::new(0.0, 0.0, 2.0).area());\n}\n')))}m.isMDXComponent=!0}}]);