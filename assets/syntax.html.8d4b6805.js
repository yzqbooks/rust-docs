import{r as e,a as p,b as n,d as t,F as o,c,e as s,o as u}from"./app.a489c551.js";import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";const r={},i=c(`<h1 id="\u95ED\u5305\u7684\u8BED\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u95ED\u5305\u7684\u8BED\u6CD5" aria-hidden="true">#</a> \u95ED\u5305\u7684\u8BED\u6CD5</h1><h2 id="\u57FA\u672C\u5F62\u5F0F" tabindex="-1"><a class="header-anchor" href="#\u57FA\u672C\u5F62\u5F0F" aria-hidden="true">#</a> \u57FA\u672C\u5F62\u5F0F</h2><p>\u95ED\u5305\u770B\u8D77\u6765\u50CF\u8FD9\u6837\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> plus_one <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">plus_one</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u6211\u4EEC\u521B\u5EFA\u4E86\u4E00\u4E2A\u7ED1\u5B9A\uFF0C<code>plus_one</code>\uFF0C\u5E76\u628A\u5B83\u8D4B\u4E88\u4E00\u4E2A\u95ED\u5305\u3002\u95ED\u5305\u7684\u53C2\u6570\u4F4D\u4E8E\u7BA1\u9053\uFF08<code>|</code>\uFF09\u4E4B\u4E2D\uFF0C\u800C\u95ED\u5305\u4F53\u662F\u4E00\u4E2A\u8868\u8FBE\u5F0F\uFF0C\u5728\u8FD9\u4E2A\u4F8B\u5B50\u4E2D\uFF0C<code>x + 1</code>\u3002\u8BB0\u4F4F<code>{}</code>\u662F\u4E00\u4E2A\u8868\u8FBE\u5F0F\uFF0C\u6240\u4EE5\u6211\u4EEC\u4E5F\u53EF\u4EE5\u62E5\u6709\u5305\u542B\u591A\u884C\u7684\u95ED\u5305\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> plus_two <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> result<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>

    result <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    result <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    result
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token function">plus_two</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>\u4F60\u4F1A\u6CE8\u610F\u5230\u95ED\u5305\u7684\u4E00\u4E9B\u65B9\u9762\u4E0E\u7528<code>fn</code>\u5B9A\u4E49\u7684\u5E38\u89C4\u51FD\u6570\u6709\u70B9\u4E0D\u540C\u3002\u7B2C\u4E00\u4E2A\u662F\u6211\u4EEC\u5E76\u4E0D\u9700\u8981\u6807\u660E\u95ED\u5305\u63A5\u6536\u548C\u8FD4\u56DE\u53C2\u6570\u7684\u7C7B\u578B\u3002\u6211\u4EEC\u53EF\u4EE5\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> plus_one <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span> x <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">plus_one</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u4E0D\u8FC7\u6211\u4EEC\u5E76\u4E0D\u9700\u8981\u8FD9\u4E48\u5199\u3002\u4E3A\u4EC0\u4E48\u5462\uFF1F\u57FA\u672C\u4E0A\uFF0C\u8FD9\u662F\u51FA\u4E8E\u201C\u4EBA\u4F53\u5DE5\u7A0B\u5B66\u201D\u7684\u539F\u56E0\u3002\u56E0\u4E3A\u4E3A\u547D\u540D\u51FD\u6570\u6307\u5B9A\u5168\u90E8\u7C7B\u578B\u6709\u52A9\u4E8E\u50CF\u6587\u6863\u548C\u7C7B\u578B\u63A8\u65AD\uFF0C\u800C\u95ED\u5305\u7684\u7C7B\u578B\u5219\u5F88\u5C11\u6709\u6587\u6863\u56E0\u4E3A\u5B83\u4EEC\u662F\u533F\u540D\u7684\uFF0C\u5E76\u4E14\u5E76\u4E0D\u4F1A\u4EA7\u751F\u50CF\u63A8\u65AD\u4E00\u4E2A\u547D\u540D\u51FD\u6570\u7684\u7C7B\u578B\u8FD9\u6837\u7684\u201C\u8FDC\u8DDD\u79BB\u9519\u8BEF\u201D\u3002</p><p>\u7B2C\u4E8C\u4E2A\u7684\u8BED\u6CD5\u5927\u540C\u5C0F\u5F02\u3002\u6211\u4F1A\u589E\u52A0\u7A7A\u683C\u6765\u4F7F\u5B83\u4EEC\u770B\u8D77\u6765\u66F4\u50CF\u4E00\u70B9\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span>  <span class="token function-definition function">plus_one_v1</span>   <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span> x <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> plus_one_v2 <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span> x <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> plus_one_v3 <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token closure-punctuation punctuation">|</span></span>          x <span class="token operator">+</span> <span class="token number">1</span>  <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="\u6355\u83B7\u53D8\u91CF" tabindex="-1"><a class="header-anchor" href="#\u6355\u83B7\u53D8\u91CF" aria-hidden="true">#</a> \u6355\u83B7\u53D8\u91CF</h2><p>\u4E4B\u6240\u4EE5\u628A\u5B83\u79F0\u4E3A\u201C\u95ED\u5305\u201D\u662F\u56E0\u4E3A\u5B83\u4EEC\u201C\u5305\u542B\u5728\u73AF\u5883\u4E2D\u201D\uFF08close over their environment\uFF09\u3002\u8FD9\u770B\u8D77\u6765\u50CF\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> plus_num <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">+</span> num<span class="token punctuation">;</span>

<span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token function">plus_num</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u8FD9\u4E2A\u95ED\u5305\uFF0C<code>plus_num</code>\uFF0C\u5F15\u7528\u4E86\u5B83\u4F5C\u7528\u57DF\u4E2D\u7684<code>let</code>\u7ED1\u5B9A\uFF1A<code>num</code>\u3002\u66F4\u660E\u786E\u7684\u8BF4\uFF0C\u5B83\u501F\u7528\u4E86\u7ED1\u5B9A\u3002\u5982\u679C\u6211\u4EEC\u505A\u4E00\u4E9B\u4F1A\u4E0E\u8FD9\u4E2A\u7ED1\u5B9A\u51B2\u7A81\u7684\u4E8B\uFF0C\u6211\u4EEC\u4F1A\u5F97\u5230\u4E00\u4E2A\u9519\u8BEF\u3002\u6BD4\u5982\u8FD9\u4E2A\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token keyword">mut</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> plus_num <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">+</span> num<span class="token punctuation">;</span>

<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> num<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u9519\u8BEF\u662F\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>error: cannot borrow \`num\` as mutable because it is also borrowed as immutable
    let y = &amp;mut num;
                 ^~~
note: previous borrow of \`num\` occurs here due to use in closure; the immutable
  borrow prevents subsequent moves or mutable borrows of \`num\` until the borrow
  ends
    let plus_num = |x| x + num;
                   ^~~~~~~~~~~
note: previous borrow ends here
fn main() {
    let mut num = 5;
    let plus_num = |x| x + num;

    let y = &amp;mut num;
}
^
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>\u4E00\u4E2A\u5570\u55E6\u4F46\u6709\u7528\u7684\u9519\u8BEF\u4FE1\u606F\uFF01\u5982\u5B83\u6240\u8BF4\uFF0C\u6211\u4EEC\u4E0D\u80FD\u53D6\u5F97\u4E00\u4E2A<code>num</code>\u7684\u53EF\u53D8\u501F\u7528\u56E0\u4E3A\u95ED\u5305\u5DF2\u7ECF\u501F\u7528\u4E86\u5B83\u3002\u5982\u679C\u6211\u4EEC\u8BA9\u95ED\u5305\u79BB\u5F00\u4F5C\u7528\u57DF\uFF0C\u6211\u4EEC\u53EF\u4EE5\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token keyword">mut</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">let</span> plus_num <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">+</span> num<span class="token punctuation">;</span>

<span class="token punctuation">}</span> <span class="token comment">// plus_num goes out of scope, borrow of num ends</span>

<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> num<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>\u5982\u679C\u4F60\u7684\u95ED\u5305\u9700\u8981\u5B83\uFF0CRust\u4F1A\u53D6\u5F97\u6240\u6709\u6743\u5E76\u79FB\u52A8\u73AF\u5883\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> takes_nums <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> nums<span class="token punctuation">;</span>

<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u8FD9\u4F1A\u7ED9\u6211\u4EEC\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>note: \`nums\` moved into closure environment here because it has type
  \`[closure(()) -&gt; collections::vec::Vec&lt;i32&gt;]\`, which is non-copyable
let takes_nums = || nums;
                    ^~~~~~~
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>Vec&lt;T&gt;</code>\u62E5\u6709\u5B83\u5185\u5BB9\u7684\u6240\u6709\u6743\uFF0C\u800C\u4E14\u7531\u4E8E\u8FD9\u4E2A\u539F\u56E0\uFF0C\u5F53\u6211\u4EEC\u5728\u95ED\u5305\u4E2D\u5F15\u7528\u5B83\u65F6\uFF0C\u6211\u4EEC\u5FC5\u987B\u53D6\u5F97<code>nums</code>\u7684\u6240\u6709\u6743\u3002\u8FD9\u4E0E\u6211\u4EEC\u4F20\u9012<code>nums</code>\u7ED9\u4E00\u4E2A\u53D6\u5F97\u5B83\u6240\u6709\u6743\u7684\u51FD\u6570\u4E00\u6837\u3002</p><h2 id="move\u95ED\u5305" tabindex="-1"><a class="header-anchor" href="#move\u95ED\u5305" aria-hidden="true">#</a> move\u95ED\u5305</h2><p>\u6211\u4EEC\u53EF\u4EE5\u4F7F\u7528<code>move</code>\u5173\u952E\u5B57\u5F3A\u5236\u4F7F\u6211\u4EEC\u7684\u95ED\u5305\u53D6\u5F97\u5B83\u73AF\u5883\u7684\u6240\u6709\u6743\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> owns_num <span class="token operator">=</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">+</span> num<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u73B0\u5728\uFF0C\u5373\u4FBF\u5173\u952E\u5B57\u662F<code>move</code>\uFF0C\u53D8\u91CF\u9075\u5FAA\u6B63\u5E38\u7684\u79FB\u52A8\u8BED\u4E49\u3002\u5728\u8FD9\u4E2A\u4F8B\u5B50\u4E2D\uFF0C<code>5</code>\u5B9E\u73B0\u4E86<code>Copy</code>\uFF0C\u6240\u4EE5<code>owns_num</code>\u53D6\u5F97\u4E00\u4E2A<code>5</code>\u7684\u62F7\u8D1D\u7684\u6240\u6709\u6743\u3002\u90A3\u4E48\u533A\u522B\u662F\u4EC0\u4E48\u5462\uFF1F</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token keyword">mut</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> add_num <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token closure-punctuation punctuation">|</span></span> num <span class="token operator">+=</span> x<span class="token punctuation">;</span>

    <span class="token function">add_num</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>\u90A3\u4E48\u5728\u8FD9\u4E2A\u4F8B\u5B50\u4E2D\uFF0C\u6211\u4EEC\u7684\u95ED\u5305\u53D6\u5F97\u4E86\u4E00\u4E2A<code>num</code>\u7684\u53EF\u53D8\u5F15\u7528\uFF0C\u7136\u540E\u63A5\u7740\u6211\u4EEC\u8C03\u7528\u4E86<code>add_num</code>\uFF0C\u5B83\u6539\u53D8\u4E86\u5176\u4E2D\u7684\u503C\uFF0C\u6B63\u5982\u6211\u4EEC\u671F\u671B\u7684\u3002\u6211\u4EEC\u4E5F\u9700\u8981\u5C06<code>add_num</code>\u58F0\u660E\u4E3A<code>mut</code>\uFF0C\u56E0\u4E3A\u6211\u4EEC\u4F1A\u6539\u53D8\u5B83\u7684\u73AF\u5883\u3002</p><p>\u5982\u679C\u6211\u4EEC\u52A0\u4E0A<code>move</code>\u4FEE\u9970\u95ED\u5305\uFF0C\u4F1A\u53D1\u751F\u4E9B\u4E0D\u540C\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token keyword">mut</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> add_num <span class="token operator">=</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token closure-punctuation punctuation">|</span></span> num <span class="token operator">+=</span> x<span class="token punctuation">;</span>

    <span class="token function">add_num</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>\u6211\u4EEC\u53EA\u4F1A\u5F97\u5230<code>5</code>\u3002\u8FD9\u6B21\u6211\u4EEC\u6CA1\u6709\u83B7\u53D6\u5230\u5916\u90E8\u7684<code>num</code>\u7684\u53EF\u53D8\u501F\u7528\uFF0C\u6211\u4EEC\u5B9E\u9645\u4E0A\u662F\u628A <code>num</code> move \u8FDB\u4E86\u95ED\u5305\u3002\u56E0\u4E3A <code>num</code> \u5177\u6709 Copy \u5C5E\u6027\uFF0C\u56E0\u6B64\u53D1\u751F move \u4E4B\u540E\uFF0C\u4EE5\u524D\u7684\u53D8\u91CF\u751F\u547D\u5468\u671F\u5E76\u672A\u7ED3\u675F\uFF0C\u8FD8\u53EF\u4EE5\u7EE7\u7EED\u5728 <code>assert_eq!</code> \u4E2D\u4F7F\u7528\u3002\u6211\u4EEC\u6253\u5370\u7684\u53D8\u91CF\u548C\u95ED\u5305\u5185\u7684\u53D8\u91CF\u662F\u72EC\u7ACB\u7684\u4E24\u4E2A\u53D8\u91CF\u3002\u5982\u679C\u6211\u4EEC\u6355\u83B7\u7684\u73AF\u5883\u53D8\u91CF\u4E0D\u662F Copy \u7684\uFF0C\u90A3\u4E48\u5916\u90E8\u73AF\u5883\u53D8\u91CF\u88AB move \u8FDB\u95ED\u5305\u540E\uFF0C \u5B83\u5C31\u4E0D\u80FD\u7EE7\u7EED\u5728\u539F\u5148\u7684\u51FD\u6570\u4E2D\u4F7F\u7528\u4E86\uFF0C\u53EA\u80FD\u5728\u95ED\u5305\u5185\u4F7F\u7528\u3002</p><p>\u4E0D\u8FC7\u5728\u6211\u4EEC\u8BA8\u8BBA\u83B7\u53D6\u6216\u8FD4\u56DE\u95ED\u5305\u4E4B\u524D\uFF0C\u6211\u4EEC\u5E94\u8BE5\u66F4\u591A\u7684\u4E86\u89E3\u4E00\u4E0B\u95ED\u5305\u5B9E\u73B0\u7684\u65B9\u6CD5\u3002\u4F5C\u4E3A\u4E00\u4E2A\u7CFB\u7EDF\u8BED\u8A00\uFF0CRust\u7ED9\u4E88\u4F60\u4E86\u5927\u91CF\u7684\u63A7\u5236\u4F60\u4EE3\u7801\u7684\u80FD\u529B\uFF0C\u800C\u95ED\u5305\u4E5F\u662F\u4E00\u6837\u3002</p>`,35),k={id:"\u8FD9\u90E8\u5206\u5F15\u7528\u81EAthe-rust-programming-language\u4E2D\u6587\u7248",tabindex:"-1"},m=n("a",{class:"header-anchor",href:"#\u8FD9\u90E8\u5206\u5F15\u7528\u81EAthe-rust-programming-language\u4E2D\u6587\u7248","aria-hidden":"true"},"#",-1),d=s(" \u8FD9\u90E8\u5206\u5F15\u7528\u81EA"),b={href:"https://github.com/KaiserY/rust-book-chinese/blob/master/content/Closures%20%E9%97%AD%E5%8C%85.md",target:"_blank",rel:"noopener noreferrer"},v=s("The Rust Programming Language\u4E2D\u6587\u7248");function g(y,h){const a=e("ExternalLinkIcon");return u(),p(o,null,[i,n("blockquote",null,[n("h3",k,[m,d,n("a",b,[v,t(a)])])])],64)}var x=l(r,[["render",g],["__file","syntax.html.vue"]]);export{x as default};
