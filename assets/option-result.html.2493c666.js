import{c as n}from"./app.a489c551.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h1 id="_17-\u9519\u8BEF\u5904\u7406" tabindex="-1"><a class="header-anchor" href="#_17-\u9519\u8BEF\u5904\u7406" aria-hidden="true">#</a> 17.\u9519\u8BEF\u5904\u7406</h1><p>\u9519\u8BEF\u5904\u7406\u662F\u4FDD\u8BC1\u7A0B\u5E8F\u5065\u58EE\u6027\u7684\u524D\u63D0\uFF0C\u5728\u7F16\u7A0B\u8BED\u8A00\u4E2D\u9519\u8BEF\u5904\u7406\u7684\u65B9\u5F0F\u5927\u81F4\u5206\u4E3A\u4E24\u79CD\uFF1A\u629B\u51FA\u5F02\u5E38\uFF08exceptions\uFF09\u548C\u4F5C\u4E3A\u503C\u8FD4\u56DE\u3002</p><p><strong>Rust</strong> \u5C06\u9519\u8BEF\u4F5C\u4E3A\u503C\u8FD4\u56DE\u5E76\u4E14\u63D0\u4F9B\u4E86\u539F\u751F\u7684\u4F18\u96C5\u7684\u9519\u8BEF\u5904\u7406\u65B9\u6848\u3002</p><p>\u719F\u7EC3\u638C\u63E1\u9519\u8BEF\u5904\u7406\u662F\u8F6F\u4EF6\u5DE5\u7A0B\u4E2D\u975E\u5E38\u91CD\u8981\u7684\u73AF\u8282\uFF0C\u8BA9\u6211\u4E00\u8D77\u6765\u770B\u770B<strong>Rust</strong>\u5C55\u73B0\u7ED9\u6211\u4EEC\u7684\u9519\u8BEF\u5904\u7406\u827A\u672F\u3002</p><h2 id="_17-1-option\u548Cresult" tabindex="-1"><a class="header-anchor" href="#_17-1-option\u548Cresult" aria-hidden="true">#</a> 17.1 Option\u548CResult</h2><p>\u8C28\u614E\u4F7F\u7528<code>panic</code>\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">guess</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">&gt;</span> <span class="token number">10</span> <span class="token punctuation">{</span>
        <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid number: {}&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    n <span class="token operator">==</span> <span class="token number">5</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">guess</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><code>panic</code>\u4F1A\u5BFC\u81F4\u5F53\u524D\u7EBF\u7A0B\u7ED3\u675F\uFF0C\u751A\u81F3\u662F\u6574\u4E2A\u7A0B\u5E8F\u7684\u7ED3\u675F\uFF0C\u8FD9\u5F80\u5F80\u662F\u4E0D\u88AB\u671F\u671B\u770B\u5230\u7684\u7ED3\u679C\u3002\uFF08\u7F16\u5199\u793A\u4F8B\u6216\u8005\u7B80\u77ED\u4EE3\u7801\u7684\u65F6\u5019<code>panic</code>\u4E0D\u5931\u4E3A\u4E00\u4E2A\u597D\u7684\u5EFA\u8BAE\uFF09</p><h3 id="option" tabindex="-1"><a class="header-anchor" href="#option" aria-hidden="true">#</a> Option</h3><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">enum</span> <span class="token type-definition class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">None</span><span class="token punctuation">,</span>
    <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>Option</strong> \u662FRust\u7684\u7CFB\u7EDF\u7C7B\u578B\uFF0C\u7528\u6765\u8868\u793A\u503C\u4E0D\u5B58\u5728\u7684\u53EF\u80FD\uFF0C\u8FD9\u5728\u7F16\u7A0B\u4E2D\u662F\u4E00\u4E2A\u597D\u7684\u5B9E\u8DF5\uFF0C\u5B83\u5F3A\u5236<strong>Rust</strong>\u68C0\u6D4B\u548C\u5904\u7406\u503C\u4E0D\u5B58\u5728\u7684\u60C5\u51B5\u3002\u4F8B\u5982\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">find</span><span class="token punctuation">(</span>haystack<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> needle<span class="token punctuation">:</span> <span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>offset<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token keyword">in</span> haystack<span class="token punctuation">.</span><span class="token function">char_indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> c <span class="token operator">==</span> needle <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">None</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>find</code>\u5728\u5B57\u7B26\u4E32<code>haystack</code>\u4E2D\u67E5\u627E<code>needle</code>\u5B57\u7B26\uFF0C\u4E8B\u5B9E\u4E0A\u7ED3\u679C\u4F1A\u51FA\u73B0\u4E24\u79CD\u53EF\u80FD\uFF0C\u6709\uFF08<code>Some(usize)</code>)\u6216\u65E0\uFF08<code>None</code>\uFF09\u3002</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> file_name <span class="token operator">=</span> <span class="token string">&quot;foobar.rs&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">match</span> <span class="token function">find</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;No file extension found.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">Some</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;File extension: {}&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>file_name<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>Rust</strong> \u4F7F\u7528\u6A21\u5F0F\u5339\u914D\u6765\u5904\u7406\u8FD4\u56DE\u503C\uFF0C\u8C03\u7528\u8005\u5FC5\u987B\u5904\u7406\u7ED3\u679C\u4E3A<code>None</code>\u7684\u60C5\u51B5\u3002\u8FD9\u5F80\u5F80\u662F\u4E00\u4E2A\u597D\u7684\u7F16\u7A0B\u4E60\u60EF\uFF0C\u53EF\u4EE5\u51CF\u5C11\u6F5C\u5728\u7684bug\u3002<strong>Option</strong> \u5305\u542B\u4E00\u4E9B\u65B9\u6CD5\u6765\u7B80\u5316\u6A21\u5F0F\u5339\u914D\uFF0C\u6BD5\u7ADF\u8FC7\u591A\u7684<code>match</code>\u4F1A\u4F7F\u4EE3\u7801\u53D8\u5F97\u81C3\u80BF\uFF0C\u8FD9\u4E5F\u662F\u6ECB\u751Fbug\u7684\u539F\u56E0\u4E4B\u4E00\u3002</p><h4 id="unwrap" tabindex="-1"><a class="header-anchor" href="#unwrap" aria-hidden="true">#</a> unwrap</h4><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">unwrap</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">T</span> <span class="token punctuation">{</span>
        <span class="token keyword">match</span> <span class="token keyword">self</span> <span class="token punctuation">{</span>
            <span class="token class-name">Option</span><span class="token punctuation">::</span><span class="token class-name">Some</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val<span class="token punctuation">,</span>
            <span class="token class-name">Option</span><span class="token punctuation">::</span><span class="token class-name">None</span> <span class="token operator">=&gt;</span>
              <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;called \`Option::unwrap()\` on a \`None\` value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>unwrap</code>\u5F53\u9047\u5230<code>None</code>\u503C\u65F6\u4F1Apanic\uFF0C\u5982\u524D\u9762\u6240\u8BF4\u8FD9\u4E0D\u662F\u4E00\u4E2A\u597D\u7684\u5DE5\u7A0B\u5B9E\u8DF5\u3002\u4E0D\u8FC7\u6709\u4E9B\u65F6\u5019\u5374\u975E\u5E38\u6709\u7528\uFF1A</p><ul><li><strong>\u5728\u4F8B\u5B50\u548C\u7B80\u5355\u5FEB\u901F\u7684\u7F16\u7801\u4E2D</strong> \u6709\u7684\u65F6\u5019\u4F60\u53EA\u662F\u9700\u8981\u4E00\u4E2A\u5C0F\u4F8B\u5B50\u6216\u8005\u4E00\u4E2A\u7B80\u5355\u7684\u5C0F\u7A0B\u5E8F\uFF0C\u8F93\u5165\u8F93\u51FA\u5DF2\u7ECF\u786E\u5B9A\uFF0C\u4F60\u6839\u672C\u6CA1\u5FC5\u8981\u82B1\u592A\u591A\u65F6\u95F4\u8003\u8651\u9519\u8BEF\u5904\u7406\uFF0C\u4F7F\u7528<code>unwrap</code>\u53D8\u5F97\u975E\u5E38\u5408\u9002\u3002</li><li><strong>\u5F53\u7A0B\u5E8F\u9047\u5230\u4E86\u81F4\u547D\u7684bug\uFF0Cpanic\u662F\u6700\u4F18\u9009\u62E9</strong></li></ul><h4 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map</h4><p>\u5047\u5982\u6211\u4EEC\u8981\u5728\u4E00\u4E2A\u5B57\u7B26\u4E32\u4E2D\u627E\u5230\u6587\u4EF6\u7684\u6269\u5C55\u540D\uFF0C\u6BD4\u5982<code>foo.rs</code>\u4E2D\u7684<code>rs</code>\uFF0C \u6211\u4EEC\u53EF\u4EE5\u8FD9\u6837\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">extension_explicit</span><span class="token punctuation">(</span>file_name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">match</span> <span class="token function">find</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token class-name">None</span><span class="token punctuation">,</span>
        <span class="token class-name">Some</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>file_name<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">match</span> <span class="token function">extension_explicit</span><span class="token punctuation">(</span><span class="token string">&quot;foo.rs&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;no extension&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">Some</span><span class="token punctuation">(</span>ext<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>  <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>ext<span class="token punctuation">,</span> <span class="token string">&quot;rs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>\u6211\u4EEC\u53EF\u4EE5\u4F7F\u7528<code>map</code>\u7B80\u5316\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">// map\u662F\u6807\u51C6\u5E93\u4E2D\u7684\u65B9\u6CD5</span>
<span class="token keyword">fn</span> <span class="token function-definition function">map</span><span class="token operator">&lt;</span><span class="token class-name">F</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>option<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token class-name">F</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">A</span><span class="token operator">&gt;</span> <span class="token keyword">where</span> <span class="token class-name">F</span><span class="token punctuation">:</span> <span class="token class-name">FnOnce</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token keyword">match</span> option <span class="token punctuation">{</span>
        <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token class-name">None</span><span class="token punctuation">,</span>
        <span class="token class-name">Some</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u4F7F\u7528map\u53BB\u6389match</span>
<span class="token keyword">fn</span> <span class="token function-definition function">extension</span><span class="token punctuation">(</span>file_name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">find</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>i<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">&amp;</span>file_name<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><code>map</code>\u5982\u679C\u6709\u503C<code>Some(T)</code>\u4F1A\u6267\u884C<code>f</code>\uFF0C\u53CD\u4E4B\u76F4\u63A5\u8FD4\u56DE<code>None</code>\u3002</p><h4 id="unwrap-or" tabindex="-1"><a class="header-anchor" href="#unwrap-or" aria-hidden="true">#</a> unwrap_or</h4><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">unwrap_or</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>option<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> default<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">T</span> <span class="token punctuation">{</span>
    <span class="token keyword">match</span> option <span class="token punctuation">{</span>
        <span class="token class-name">None</span> <span class="token operator">=&gt;</span> default<span class="token punctuation">,</span>
        <span class="token class-name">Some</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>unwrap_or</code>\u63D0\u4F9B\u4E86\u4E00\u4E2A\u9ED8\u8BA4\u503C<code>default</code>\uFF0C\u5F53\u503C\u4E3A<code>None</code>\u65F6\u8FD4\u56DE<code>default</code>\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token function">extension</span><span class="token punctuation">(</span><span class="token string">&quot;foo.rs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token string">&quot;rs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;rs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token function">extension</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token string">&quot;rs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;rs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="and-then" tabindex="-1"><a class="header-anchor" href="#and-then" aria-hidden="true">#</a> and_then</h4><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">and_then</span><span class="token operator">&lt;</span><span class="token class-name">F</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>option<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token class-name">F</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">A</span><span class="token operator">&gt;</span>
        <span class="token keyword">where</span> <span class="token class-name">F</span><span class="token punctuation">:</span> <span class="token class-name">FnOnce</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">A</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">match</span> option <span class="token punctuation">{</span>
        <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token class-name">None</span><span class="token punctuation">,</span>
        <span class="token class-name">Some</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">f</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>\u770B\u8D77\u6765<code>and_then</code>\u548C<code>map</code>\u5DEE\u4E0D\u591A\uFF0C\u4E0D\u8FC7<code>map</code>\u53EA\u662F\u628A\u503C\u4E3A<code>Some(t)</code>\u91CD\u65B0\u6620\u5C04\u4E86\u4E00\u904D\uFF0C<code>and_then</code>\u5219\u4F1A\u8FD4\u56DE\u53E6\u4E00\u4E2A<code>Option</code>\u3002\u5982\u679C\u6211\u4EEC\u5728\u4E00\u4E2A\u6587\u4EF6\u8DEF\u5F84\u4E2D\u627E\u5230\u5B83\u7684\u6269\u5C55\u540D\uFF0C\u8FD9\u65F6\u5019\u5C31\u4F1A\u53D8\u5F97\u5C24\u4E3A\u91CD\u8981\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>path<span class="token punctuation">::</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span>
<span class="token keyword">fn</span> <span class="token function-definition function">file_name</span><span class="token punctuation">(</span>file_path<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token class-name">Path</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    path<span class="token punctuation">.</span><span class="token function">file_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">fn</span> <span class="token function-definition function">file_path_ext</span><span class="token punctuation">(</span>file_path<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">file_name</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span>extension<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="result" tabindex="-1"><a class="header-anchor" href="#result" aria-hidden="true">#</a> Result</h3><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">enum</span> <span class="token type-definition class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>Result</code>\u662F<code>Option</code>\u7684\u66F4\u901A\u7528\u7684\u7248\u672C\uFF0C\u6BD4\u8D77<code>Option</code>\u7ED3\u679C\u4E3A<code>None</code>\u5B83\u89E3\u91CA\u4E86\u7ED3\u679C\u9519\u8BEF\u7684\u539F\u56E0\uFF0C\u6240\u4EE5\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">type</span> <span class="token type-definition class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>\u8FD9\u6837\u7684\u522B\u540D\u662F\u4E00\u6837\u7684\uFF08<code>()</code>\u6807\u793A\u7A7A\u5143\u7EC4\uFF0C\u5B83\u65E2\u662F<code>()</code>\u7C7B\u578B\u4E5F\u53EF\u4EE5\u662F<code>()</code>\u503C\uFF09</p><h4 id="unwrap-1" tabindex="-1"><a class="header-anchor" href="#unwrap-1" aria-hidden="true">#</a> unwrap</h4><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Debug</span><span class="token operator">&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">unwrap</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">T</span> <span class="token punctuation">{</span>
        <span class="token keyword">match</span> <span class="token keyword">self</span> <span class="token punctuation">{</span>
            <span class="token class-name">Result</span><span class="token punctuation">::</span><span class="token class-name">Ok</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val<span class="token punctuation">,</span>
            <span class="token class-name">Result</span><span class="token punctuation">::</span><span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
              <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;called \`Result::unwrap()\` on an \`Err\` value: {:?}&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>\u6CA1\u9519\u548C<code>Option</code>\u4E00\u6837\uFF0C\u4E8B\u5B9E\u4E0A\u5B83\u4EEC\u62E5\u6709\u5F88\u591A\u7C7B\u4F3C\u7684\u65B9\u6CD5\uFF0C\u4E0D\u540C\u7684\u662F\uFF0C<code>Result</code>\u5305\u62EC\u4E86\u9519\u8BEF\u7684\u8BE6\u7EC6\u63CF\u8FF0\uFF0C\u8FD9\u5BF9\u4E8E\u8C03\u8BD5\u4EBA\u5458\u6765\u8BF4\uFF0C\u8FD9\u662F\u53CB\u597D\u7684\u3002</p><h4 id="result\u6211\u4EEC\u4ECE\u4F8B\u5B50\u5F00\u59CB" tabindex="-1"><a class="header-anchor" href="#result\u6211\u4EEC\u4ECE\u4F8B\u5B50\u5F00\u59CB" aria-hidden="true">#</a> Result\u6211\u4EEC\u4ECE\u4F8B\u5B50\u5F00\u59CB</h4><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">double_number</span><span class="token punctuation">(</span>number_str<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
    <span class="token number">2</span> <span class="token operator">*</span> number_str<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> n<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token function">double_number</span><span class="token punctuation">(</span><span class="token string">&quot;10&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>double_number</code>\u4ECE\u4E00\u4E2A\u5B57\u7B26\u4E32\u4E2D\u89E3\u6790\u51FA\u4E00\u4E2A<code>i32</code>\u7684\u6570\u5B57\u5E76<code>*2</code>\uFF0C<code>main</code>\u4E2D\u8C03\u7528\u770B\u8D77\u6765\u6CA1\u4EC0\u4E48\u95EE\u9898\uFF0C\u4F46\u662F\u5982\u679C\u628A<code>&quot;10&quot;</code>\u6362\u6210\u5176\u4ED6\u89E3\u6790\u4E0D\u4E86\u7684\u5B57\u7B26\u4E32\u7A0B\u5E8F\u4FBF\u4F1Apanic</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token keyword">str</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">parse</span><span class="token operator">&lt;</span><span class="token class-name">F</span><span class="token punctuation">:</span> <span class="token class-name">FromStr</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">F</span><span class="token punctuation">,</span> <span class="token class-name">F</span><span class="token punctuation">::</span><span class="token class-name">Err</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>parse</code>\u8FD4\u56DE\u4E00\u4E2A<code>Result</code>\uFF0C\u4F46\u8BA9\u6211\u4EEC\u4E5F\u53EF\u4EE5\u8FD4\u56DE\u4E00\u4E2A<code>Option</code>\uFF0C\u6BD5\u7ADF\u4E00\u4E2A\u5B57\u7B26\u4E32\u8981\u4E48\u80FD\u89E3\u6790\u6210\u4E00\u4E2A\u6570\u5B57\u8981\u4E48\u4E0D\u80FD\uFF0C\u4F46\u662F<code>Result</code>\u7ED9\u6211\u4EEC\u63D0\u4F9B\u4E86\u66F4\u591A\u7684\u4FE1\u606F\uFF08\u8981\u4E48\u662F\u4E00\u4E2A\u7A7A\u5B57\u7B26\u4E32\uFF0C\u4E00\u4E2A\u65E0\u6548\u7684\u6570\u4F4D\uFF0C\u592A\u5927\u6216\u592A\u5C0F\uFF09\uFF0C\u8FD9\u5BF9\u4E8E\u4F7F\u7528\u8005\u662F\u53CB\u597D\u7684\u3002\u5F53\u4F60\u9762\u5BF9\u4E00\u4E2AOption\u548CResult\u4E4B\u95F4\u7684\u9009\u62E9\u65F6\u3002\u5982\u679C\u4F60\u53EF\u4EE5\u63D0\u4F9B\u8BE6\u7EC6\u7684\u9519\u8BEF\u4FE1\u606F\uFF0C\u90A3\u4E48\u5927\u6982\u4F60\u4E5F\u5E94\u8BE5\u63D0\u4F9B\u3002</p><p>\u8FD9\u91CC\u9700\u8981\u7406\u89E3\u4E00\u4E0B<code>FromStr</code>\u8FD9\u4E2A<strong>trait</strong>:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">FromStr</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Err</span><span class="token punctuation">;</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">from_str</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">,</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Err</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">FromStr</span> <span class="token keyword">for</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Err</span> <span class="token operator">=</span> <span class="token class-name">ParseIntError</span><span class="token punctuation">;</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">from_str</span><span class="token punctuation">(</span>src<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token class-name">ParseIntError</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><code>number_str.parse::&lt;i32&gt;()</code>\u4E8B\u5B9E\u4E0A\u8C03\u7528\u7684\u662F<code>i32</code>\u7684<code>FromStr</code>\u5B9E\u73B0\u3002</p><p>\u6211\u4EEC\u9700\u8981\u6539\u5199\u8FD9\u4E2A\u4F8B\u5B50\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>num<span class="token punctuation">::</span></span><span class="token class-name">ParseIntError</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">double_number</span><span class="token punctuation">(</span>number_str<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token class-name">ParseIntError</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    number_str<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>n<span class="token closure-punctuation punctuation">|</span></span> <span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">match</span> <span class="token function">double_number</span><span class="token punctuation">(</span><span class="token string">&quot;10&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Error: {:?}&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>\u4E0D\u4EC5\u4EC5\u662F<code>map</code>\uFF0C<code>Result</code>\u540C\u6837\u5305\u542B\u4E86<code>unwrap_or</code>\u548C<code>and_then</code>\u3002\u4E5F\u6709\u4E00\u4E9B\u7279\u6709\u7684\u9488\u5BF9\u9519\u8BEF\u7C7B\u578B\u7684\u65B9\u6CD5<code>map_err</code>\u548C<code>or_else</code>\u3002</p><h4 id="result\u522B\u540D" tabindex="-1"><a class="header-anchor" href="#result\u522B\u540D" aria-hidden="true">#</a> Result\u522B\u540D</h4><p>\u5728<strong>Rust</strong>\u7684\u6807\u51C6\u5E93\u4E2D\u4F1A\u7ECF\u5E38\u51FA\u73B0Result\u7684\u522B\u540D\uFF0C\u7528\u6765\u9ED8\u8BA4\u786E\u8BA4\u5176\u4E2D<code>Ok(T)</code>\u6216\u8005<code>Err(E)</code>\u7684\u7C7B\u578B\uFF0C\u8FD9\u80FD\u51CF\u5C11\u91CD\u590D\u7F16\u7801\u3002\u6BD4\u5982<code>io::Result</code></p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>num<span class="token punctuation">::</span></span><span class="token class-name">ParseIntError</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>result<span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token type-definition class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token namespace">result<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">ParseIntError</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">double_number</span><span class="token punctuation">(</span>number_str<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token macro property">unimplemented!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="\u7EC4\u5408option\u548Cresult" tabindex="-1"><a class="header-anchor" href="#\u7EC4\u5408option\u548Cresult" aria-hidden="true">#</a> \u7EC4\u5408Option\u548CResult</h3><p><code>Option</code>\u7684\u65B9\u6CD5<code>ok_or</code>\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">ok_or</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>option<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> err<span class="token punctuation">:</span> <span class="token class-name">E</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">match</span> option <span class="token punctuation">{</span>
        <span class="token class-name">Some</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u53EF\u4EE5\u5728\u503C\u4E3A<code>None</code>\u7684\u65F6\u5019\u8FD4\u56DE\u4E00\u4E2A<code>Result::Err(E)</code>\uFF0C\u503C\u4E3A<code>Some(T)</code>\u7684\u65F6\u5019\u8FD4\u56DE<code>Ok(T)</code>\uFF0C\u5229\u7528\u5B83\u6211\u4EEC\u53EF\u4EE5\u7EC4\u5408<code>Option</code>\u548C<code>Result</code>\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>env<span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">double_arg</span><span class="token punctuation">(</span><span class="token keyword">mut</span> argv<span class="token punctuation">:</span> <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token class-name">Args</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    argv<span class="token punctuation">.</span><span class="token function">nth</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ok_or</span><span class="token punctuation">(</span><span class="token string">&quot;Please give at least one argument&quot;</span><span class="token punctuation">.</span><span class="token function">to_owned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>arg<span class="token closure-punctuation punctuation">|</span></span> arg<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>err<span class="token closure-punctuation punctuation">|</span></span> err<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>n<span class="token closure-punctuation punctuation">|</span></span> <span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">match</span> <span class="token function">double_arg</span><span class="token punctuation">(</span><span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Error: {}&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><code>double_arg</code>\u5C06\u4F20\u5165\u7684\u547D\u4EE4\u884C\u53C2\u6570\u8F6C\u5316\u4E3A\u6570\u5B57\u5E76\u7FFB\u500D\uFF0C<code>ok_or</code>\u5C06<code>Option</code>\u7C7B\u578B\u8F6C\u6362\u6210<code>Result</code>\uFF0C<code>map_err</code>\u5F53\u503C\u4E3A<code>Err(E)</code>\u65F6\u8C03\u7528\u4F5C\u4E3A\u53C2\u6570\u7684\u51FD\u6570\u5904\u7406\u9519\u8BEF</p><h4 id="\u590D\u6742\u7684\u4F8B\u5B50" tabindex="-1"><a class="header-anchor" href="#\u590D\u6742\u7684\u4F8B\u5B50" aria-hidden="true">#</a> \u590D\u6742\u7684\u4F8B\u5B50</h4><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Read</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>path<span class="token punctuation">::</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">file_double</span><span class="token operator">&lt;</span><span class="token class-name">P</span><span class="token punctuation">:</span> <span class="token class-name">AsRef</span><span class="token operator">&lt;</span><span class="token class-name">Path</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>file_path<span class="token punctuation">:</span> <span class="token class-name">P</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>
         <span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>err<span class="token closure-punctuation punctuation">|</span></span> err<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
         <span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token keyword">mut</span> file<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
              <span class="token keyword">let</span> <span class="token keyword">mut</span> contents <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              file<span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> contents<span class="token punctuation">)</span>
                  <span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>err<span class="token closure-punctuation punctuation">|</span></span> err<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> contents<span class="token punctuation">)</span>
         <span class="token punctuation">}</span><span class="token punctuation">)</span>
         <span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>contents<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
              contents<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                      <span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>err<span class="token closure-punctuation punctuation">|</span></span> err<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
         <span class="token punctuation">}</span><span class="token punctuation">)</span>
         <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>n<span class="token closure-punctuation punctuation">|</span></span> <span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">match</span> <span class="token function">file_double</span><span class="token punctuation">(</span><span class="token string">&quot;foobar&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Error: {}&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p><code>file_double</code>\u4ECE\u6587\u4EF6\u4E2D\u8BFB\u53D6\u5185\u5BB9\u5E76\u5C06\u5176\u8F6C\u5316\u6210<code>i32</code>\u7C7B\u578B\u518D\u7FFB\u500D\u3002 \u8FD9\u4E2A\u4F8B\u5B50\u770B\u8D77\u6765\u5DF2\u7ECF\u5F88\u590D\u6742\u4E86\uFF0C\u5B83\u4F7F\u7528\u4E86\u591A\u4E2A\u7EC4\u5408\u65B9\u6CD5\uFF0C\u6211\u4EEC\u53EF\u4EE5\u4F7F\u7528\u4F20\u7EDF\u7684<code>match</code>\u548C<code>if let</code>\u6765\u6539\u5199\u5B83\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Read</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>path<span class="token punctuation">::</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">file_double</span><span class="token operator">&lt;</span><span class="token class-name">P</span><span class="token punctuation">:</span> <span class="token class-name">AsRef</span><span class="token operator">&lt;</span><span class="token class-name">Path</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>file_path<span class="token punctuation">:</span> <span class="token class-name">P</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> file <span class="token operator">=</span> <span class="token keyword">match</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> file<span class="token punctuation">,</span>
        <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> contents <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> contents<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> n<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token keyword">match</span> contents<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> n<span class="token punctuation">,</span>
        <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">match</span> <span class="token function">file_double</span><span class="token punctuation">(</span><span class="token string">&quot;foobar&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Error: {}&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>\u8FD9\u4E24\u79CD\u65B9\u6CD5\u4E2A\u4EBA\u8BA4\u4E3A\u90FD\u662F\u53EF\u4EE5\u7684\uFF0C\u4F9D\u5177\u4F53\u60C5\u51B5\u6765\u53D6\u820D\u3002</p><h3 id="try" tabindex="-1"><a class="header-anchor" href="#try" aria-hidden="true">#</a> try!</h3><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token macro property">macro_rules!</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token variable">$e</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token keyword">match</span> <span class="token variable">$e</span> <span class="token punctuation">{</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val<span class="token punctuation">,</span>
        <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token punctuation">::</span><span class="token namespace">std<span class="token punctuation">::</span>convert<span class="token punctuation">::</span></span><span class="token class-name">From</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>try!</code>\u4E8B\u5B9E\u4E0A\u5C31\u662F<code>match Result</code>\u7684\u5C01\u88C5\uFF0C\u5F53\u9047\u5230<code>Err(E)</code>\u65F6\u4F1A\u63D0\u65E9\u8FD4\u56DE\uFF0C <code>::std::convert::From::from(err)</code>\u53EF\u4EE5\u5C06\u4E0D\u540C\u7684\u9519\u8BEF\u7C7B\u578B\u8FD4\u56DE\u6210\u6700\u7EC8\u9700\u8981\u7684\u9519\u8BEF\u7C7B\u578B\uFF0C\u56E0\u4E3A\u6240\u6709\u7684\u9519\u8BEF\u90FD\u80FD\u901A\u8FC7<code>From</code>\u8F6C\u5316\u6210<code>Box&lt;Error&gt;</code>\uFF0C\u6240\u4EE5\u4E0B\u9762\u7684\u4EE3\u7801\u662F\u6B63\u786E\u7684\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Read</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>path<span class="token punctuation">::</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">file_double</span><span class="token operator">&lt;</span><span class="token class-name">P</span><span class="token punctuation">:</span> <span class="token class-name">AsRef</span><span class="token operator">&lt;</span><span class="token class-name">Path</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>file_path<span class="token punctuation">:</span> <span class="token class-name">P</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">Error</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> file <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> contents <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span><span class="token operator">!</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> contents<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">!</span><span class="token punctuation">(</span>contents<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="\u7EC4\u5408\u81EA\u5B9A\u4E49\u9519\u8BEF\u7C7B\u578B" tabindex="-1"><a class="header-anchor" href="#\u7EC4\u5408\u81EA\u5B9A\u4E49\u9519\u8BEF\u7C7B\u578B" aria-hidden="true">#</a> \u7EC4\u5408\u81EA\u5B9A\u4E49\u9519\u8BEF\u7C7B\u578B</h4><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token class-name">Read</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>num<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>path<span class="token punctuation">::</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span>

<span class="token comment">// We derive \`Debug\` because all types should probably derive \`Debug\`.</span>
<span class="token comment">// This gives us a reasonable human readable description of \`CliError\` values.</span>
<span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">enum</span> <span class="token type-definition class-name">CliError</span> <span class="token punctuation">{</span>
    <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Parse</span><span class="token punctuation">(</span><span class="token namespace">num<span class="token punctuation">::</span></span><span class="token class-name">ParseIntError</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">CliError</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>err<span class="token punctuation">:</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">CliError</span> <span class="token punctuation">{</span>
        <span class="token class-name">CliError</span><span class="token punctuation">::</span><span class="token class-name">Io</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token namespace">num<span class="token punctuation">::</span></span><span class="token class-name">ParseIntError</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">CliError</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>err<span class="token punctuation">:</span> <span class="token namespace">num<span class="token punctuation">::</span></span><span class="token class-name">ParseIntError</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">CliError</span> <span class="token punctuation">{</span>
        <span class="token class-name">CliError</span><span class="token punctuation">::</span><span class="token class-name">Parse</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">file_double_verbose</span><span class="token operator">&lt;</span><span class="token class-name">P</span><span class="token punctuation">:</span> <span class="token class-name">AsRef</span><span class="token operator">&lt;</span><span class="token class-name">Path</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>file_path<span class="token punctuation">:</span> <span class="token class-name">P</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token class-name">CliError</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> file <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token class-name">CliError</span><span class="token punctuation">::</span><span class="token class-name">Io</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> contents <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span><span class="token operator">!</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> contents<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token class-name">CliError</span><span class="token punctuation">::</span><span class="token class-name">Io</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> n<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">!</span><span class="token punctuation">(</span>contents<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token class-name">CliError</span><span class="token punctuation">::</span><span class="token class-name">Parse</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p><code>CliError</code>\u5206\u522B\u4E3A<code>io::Error</code>\u548C<code>num::ParseIntError</code>\u5B9E\u73B0\u4E86<code>From</code>\u8FD9\u4E2Atrait\uFF0C\u6240\u6709\u8C03\u7528<code>try!</code>\u7684\u65F6\u5019\u8FD9\u4E24\u79CD\u9519\u8BEF\u7C7B\u578B\u90FD\u80FD\u8F6C\u5316\u6210<code>CliError</code>\u3002</p><h3 id="\u603B\u7ED3" tabindex="-1"><a class="header-anchor" href="#\u603B\u7ED3" aria-hidden="true">#</a> \u603B\u7ED3</h3><p>\u719F\u7EC3\u4F7F\u7528<code>Option</code>\u548C<code>Result</code>\u662F\u7F16\u5199 <strong>Rust</strong> \u4EE3\u7801\u7684\u5173\u952E\uFF0C<strong>Rust</strong> \u4F18\u96C5\u7684\u9519\u8BEF\u5904\u7406\u79BB\u4E0D\u5F00\u503C\u8FD4\u56DE\u7684\u9519\u8BEF\u5F62\u5F0F\uFF0C\u7F16\u5199\u4EE3\u7801\u65F6\u63D0\u4F9B\u7ED9\u4F7F\u7528\u8005\u8BE6\u7EC6\u7684\u9519\u8BEF\u4FE1\u606F\u662F\u503C\u5F97\u63A8\u5D07\u7684\u3002</p>`,75);function t(e,o){return p}var u=s(a,[["render",t],["__file","option-result.html.vue"]]);export{u as default};
