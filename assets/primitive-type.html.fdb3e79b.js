import{c as n}from"./app.a489c551.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h1 id="\u53D8\u91CF\u7ED1\u5B9A\u4E0E\u539F\u751F\u7C7B\u578B" tabindex="-1"><a class="header-anchor" href="#\u53D8\u91CF\u7ED1\u5B9A\u4E0E\u539F\u751F\u7C7B\u578B" aria-hidden="true">#</a> \u53D8\u91CF\u7ED1\u5B9A\u4E0E\u539F\u751F\u7C7B\u578B</h1><h2 id="\u53D8\u91CF\u7ED1\u5B9A" tabindex="-1"><a class="header-anchor" href="#\u53D8\u91CF\u7ED1\u5B9A" aria-hidden="true">#</a> \u53D8\u91CF\u7ED1\u5B9A</h2><p>Rust \u901A\u8FC7 let \u5173\u952E\u5B57\u8FDB\u884C\u53D8\u91CF\u7ED1\u5B9A\u3002</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> a2<span class="token punctuation">:</span><span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//let \u7ED1\u5B9A \u6574\u6570\u53D8\u91CF\u9ED8\u8BA4\u7C7B\u578B\u63A8\u65AD\u662F i32</span>

    <span class="token keyword">let</span> b1<span class="token punctuation">:</span><span class="token keyword">u32</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token comment">//assert_eq!(a1, b1);</span>
    <span class="token comment">//\u53BB\u6389\u4E0A\u9762\u7684\u6CE8\u91CA\u4F1A\u62A5\u9519\uFF0C\u56E0\u4E3A\u7C7B\u578B\u4E0D\u5339\u914D</span>
    <span class="token comment">//errer: mismatched types</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>\u8FD9\u91CC\u7684 assert_eq! \u5B8F\u7684\u4F5C\u7528\u662F\u5224\u65AD\u4E24\u4E2A\u53C2\u6570\u662F\u4E0D\u662F\u76F8\u7B49\u7684\uFF0C\u4F46\u5982\u679C\u662F\u4E24\u4E2A\u4E0D\u5339\u914D\u7684\u7C7B\u578B\uFF0C\u5C31\u7B97\u5B57\u9762\u503C\u76F8\u7B49\u4E5F\u4F1A\u62A5\u9519\u3002</p><h2 id="\u53EF\u53D8\u7ED1\u5B9A" tabindex="-1"><a class="header-anchor" href="#\u53EF\u53D8\u7ED1\u5B9A" aria-hidden="true">#</a> \u53EF\u53D8\u7ED1\u5B9A</h2><p>rust \u5728\u58F0\u660E\u53D8\u91CF\u65F6\uFF0C\u5728\u53D8\u91CF\u524D\u9762\u52A0\u5165 mut \u5173\u952E\u5B57\uFF0C\u53D8\u91CF\u5C31\u4F1A\u6210\u4E3A\u53EF\u53D8\u7ED1\u5B9A\u7684\u53D8\u91CF\u3002</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> a<span class="token punctuation">:</span> <span class="token keyword">f64</span> <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2.0f32</span><span class="token punctuation">;</span>

    <span class="token comment">//\u6539\u53D8 a \u7684\u7ED1\u5B9A</span>
    a <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//\u91CD\u65B0\u7ED1\u5B9A\u4E3A\u4E0D\u53EF\u53D8</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> a<span class="token punctuation">;</span>

    <span class="token comment">//\u4E0D\u80FD\u8D4B\u503C</span>
    <span class="token comment">//a = 3.0;</span>

    <span class="token comment">//\u7C7B\u578B\u4E0D\u5339\u914D</span>
    <span class="token comment">//assert_eq!(a, b);</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>\u8FD9\u91CC\u7684 b \u53D8\u91CF\uFF0C\u7ED1\u5B9A\u4E86 2.0f32\u3002\u8FD9\u662F Rust \u91CC\u9762\u503C\u7C7B\u578B\u663E\u5F0F\u6807\u8BB0\u7684\u8BED\u6CD5\uFF0C\u89C4\u5B9A\u4E3A<code>value</code>+<code>type</code>\u7684\u5F62\u5F0F\u3002</p><p><strong>\u4F8B\u5982\uFF1A</strong> \u56FA\u5B9A\u5927\u5C0F\u7C7B\u578B\uFF1A</p><blockquote><p>1u8 1i8<br> 1u16 1i16<br> 1u32 1i32<br> 1u64 1i64</p></blockquote><p>\u53EF\u53D8\u5927\u5C0F\u7C7B\u578B\uFF1A</p><blockquote><p>1usize 1isize</p></blockquote><p>\u6D6E\u70B9\u7C7B\u578B\uFF1A</p><blockquote><p>1f32 1f64</p></blockquote><h2 id="let\u89E3\u6784" tabindex="-1"><a class="header-anchor" href="#let\u89E3\u6784" aria-hidden="true">#</a> let\u89E3\u6784</h2><p>\u4E3A\u4EC0\u4E48\u5728 Rust \u91CC\u9762\u58F0\u660E\u4E00\u4E2A\u53D8\u91CF\u7684\u65F6\u5019\u8981\u91C7\u7528 let \u7ED1\u5B9A\u8868\u8FBE\u5F0F\uFF1F \u90A3\u662F\u56E0\u4E3A let \u7ED1\u5B9A\u8868\u8FBE\u5F0F\u7684\u8868\u8FBE\u80FD\u529B\u66F4\u5F3A\uFF0C\u800C\u4E14 let \u8868\u8FBE\u5F0F\u5B9E\u9645\u4E0A\u662F\u4E00\u79CD\u6A21\u5F0F\u5339\u914D\u3002</p><p><strong>\u4F8B\u5982\uFF1A</strong></p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token keyword">mut</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;a = {:?}, b = {:?}&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//a \u4E0D\u53EF\u53D8\u7ED1\u5B9A</span>
    <span class="token comment">//a = false;</span>

    <span class="token comment">//b \u53EF\u53D8\u7ED1\u5B9A</span>
    b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>\u8FD9\u91CC\u4F7F\u7528\u4E86 bool\uFF0C\u53EA\u6709true\u548Cfalse\u4E24\u4E2A\u503C\uFF0C\u901A\u5E38\u7528\u6765\u505A\u903B\u8F91\u5224\u65AD\u7684\u7C7B\u578B\u3002</p><h2 id="\u539F\u751F\u7C7B\u578B" tabindex="-1"><a class="header-anchor" href="#\u539F\u751F\u7C7B\u578B" aria-hidden="true">#</a> \u539F\u751F\u7C7B\u578B</h2><p>Rust\u5185\u7F6E\u7684\u539F\u751F\u7C7B\u578B (primitive types) \u6709\u4EE5\u4E0B\u51E0\u7C7B\uFF1A</p><ul><li>\u5E03\u5C14\u7C7B\u578B\uFF1A\u6709\u4E24\u4E2A\u503C<code>true</code>\u548C<code>false</code>\u3002</li><li>\u5B57\u7B26\u7C7B\u578B\uFF1A\u8868\u793A\u5355\u4E2AUnicode\u5B57\u7B26\uFF0C\u5B58\u50A8\u4E3A4\u4E2A\u5B57\u8282\u3002</li><li>\u6570\u503C\u7C7B\u578B\uFF1A\u5206\u4E3A\u6709\u7B26\u53F7\u6574\u6570 (<code>i8</code>, <code>i16</code>, <code>i32</code>, <code>i64</code>, <code>isize</code>)\u3001 \u65E0\u7B26\u53F7\u6574\u6570 (<code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>, <code>usize</code>) \u4EE5\u53CA\u6D6E\u70B9\u6570 (<code>f32</code>, <code>f64</code>)\u3002</li><li>\u5B57\u7B26\u4E32\u7C7B\u578B\uFF1A\u6700\u5E95\u5C42\u7684\u662F\u4E0D\u5B9A\u957F\u7C7B\u578B<code>str</code>\uFF0C\u66F4\u5E38\u7528\u7684\u662F\u5B57\u7B26\u4E32\u5207\u7247<code>&amp;str</code>\u548C\u5806\u5206\u914D\u5B57\u7B26\u4E32<code>String</code>\uFF0C \u5176\u4E2D\u5B57\u7B26\u4E32\u5207\u7247\u662F\u9759\u6001\u5206\u914D\u7684\uFF0C\u6709\u56FA\u5B9A\u7684\u5927\u5C0F\uFF0C\u5E76\u4E14\u4E0D\u53EF\u53D8\uFF0C\u800C\u5806\u5206\u914D\u5B57\u7B26\u4E32\u662F\u53EF\u53D8\u7684\u3002</li><li>\u6570\u7EC4\uFF1A\u5177\u6709\u56FA\u5B9A\u5927\u5C0F\uFF0C\u5E76\u4E14\u5143\u7D20\u90FD\u662F\u540C\u79CD\u7C7B\u578B\uFF0C\u53EF\u8868\u793A\u4E3A<code>[T; N]</code>\u3002</li><li>\u5207\u7247\uFF1A\u5F15\u7528\u4E00\u4E2A\u6570\u7EC4\u7684\u90E8\u5206\u6570\u636E\u5E76\u4E14\u4E0D\u9700\u8981\u62F7\u8D1D\uFF0C\u53EF\u8868\u793A\u4E3A<code>&amp;[T]</code>\u3002</li><li>\u5143\u7EC4\uFF1A\u5177\u6709\u56FA\u5B9A\u5927\u5C0F\u7684\u6709\u5E8F\u5217\u8868\uFF0C\u6BCF\u4E2A\u5143\u7D20\u90FD\u6709\u81EA\u5DF1\u7684\u7C7B\u578B\uFF0C\u901A\u8FC7\u89E3\u6784\u6216\u8005\u7D22\u5F15\u6765\u83B7\u5F97\u6BCF\u4E2A\u5143\u7D20\u7684\u503C\u3002</li><li>\u6307\u9488\uFF1A\u6700\u5E95\u5C42\u7684\u662F\u88F8\u6307\u9488<code>*const T</code>\u548C<code>*mut T</code>\uFF0C\u4F46\u89E3\u5F15\u7528\u5B83\u4EEC\u662F\u4E0D\u5B89\u5168\u7684\uFF0C\u5FC5\u987B\u653E\u5230<code>unsafe</code>\u5757\u91CC\u3002</li><li>\u51FD\u6570\uFF1A\u5177\u6709\u51FD\u6570\u7C7B\u578B\u7684\u53D8\u91CF\u5B9E\u8D28\u4E0A\u662F\u4E00\u4E2A\u51FD\u6570\u6307\u9488\u3002</li><li>\u5143\u7C7B\u578B\uFF1A\u5373<code>()</code>\uFF0C\u5176\u552F\u4E00\u7684\u503C\u4E5F\u662F<code>()</code>\u3002</li></ul><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">// boolean type</span>
<span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> f<span class="token punctuation">:</span> <span class="token keyword">bool</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token comment">// char type</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token char">&#39;c&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// numeric types</span>
<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> y<span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token operator">=</span> <span class="token number">123_456</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> z<span class="token punctuation">:</span> <span class="token keyword">f64</span> <span class="token operator">=</span> <span class="token number">1.23e+2</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> zero <span class="token operator">=</span> z<span class="token punctuation">.</span><span class="token function">abs_sub</span><span class="token punctuation">(</span><span class="token number">123.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> bin <span class="token operator">=</span> <span class="token number">0b1111_0000</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> oct <span class="token operator">=</span> <span class="token number">0o7320_1546</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> hex <span class="token operator">=</span> <span class="token number">0xf23a_b049</span><span class="token punctuation">;</span>

<span class="token comment">// string types</span>
<span class="token keyword">let</span> <span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> string <span class="token operator">=</span> <span class="token keyword">str</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// arrays and slices</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> middle <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> ten_zeros<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">i64</span><span class="token punctuation">;</span> <span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// tuples</span>
<span class="token keyword">let</span> tuple<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">(</span>fifty<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=</span> tuple<span class="token punctuation">;</span>
<span class="token keyword">let</span> hello <span class="token operator">=</span> tuple<span class="token number">.1</span><span class="token punctuation">;</span>

<span class="token comment">// raw pointers</span>
<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> raw <span class="token operator">=</span> <span class="token operator">&amp;</span>x <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token keyword">i32</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> points_at <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token operator">*</span>raw <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// functions</span>
<span class="token keyword">fn</span> <span class="token function-definition function">foo</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span> x <span class="token punctuation">}</span>
<span class="token keyword">let</span> bar<span class="token punctuation">:</span> <span class="token keyword">fn</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token operator">=</span> foo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>\u6709\u51E0\u70B9\u662F\u9700\u8981\u7279\u522B\u6CE8\u610F\u7684\uFF1A</p><ul><li>\u6570\u503C\u7C7B\u578B\u53EF\u4EE5\u4F7F\u7528<code>_</code>\u5206\u9694\u7B26\u6765\u589E\u52A0\u53EF\u8BFB\u6027\u3002</li><li>Rust\u8FD8\u652F\u6301\u5355\u5B57\u8282\u5B57\u7B26<code>b&#39;H&#39;</code>\u4EE5\u53CA\u5355\u5B57\u8282\u5B57\u7B26\u4E32<code>b&quot;Hello&quot;</code>\uFF0C\u4EC5\u9650\u5236\u4E8EASCII\u5B57\u7B26\u3002 \u6B64\u5916\uFF0C\u8FD8\u53EF\u4EE5\u4F7F\u7528<code>r#&quot;...&quot;#</code>\u6807\u8BB0\u6765\u8868\u793A\u539F\u59CB\u5B57\u7B26\u4E32\uFF0C\u4E0D\u9700\u8981\u5BF9\u7279\u6B8A\u5B57\u7B26\u8FDB\u884C\u8F6C\u4E49\u3002</li><li>\u4F7F\u7528<code>&amp;</code>\u7B26\u53F7\u5C06<code>String</code>\u7C7B\u578B\u8F6C\u6362\u6210<code>&amp;str</code>\u7C7B\u578B\u5F88\u5EC9\u4EF7\uFF0C \u4F46\u662F\u4F7F\u7528<code>to_string()</code>\u65B9\u6CD5\u5C06<code>&amp;str</code>\u8F6C\u6362\u5230<code>String</code>\u7C7B\u578B\u6D89\u53CA\u5230\u5206\u914D\u5185\u5B58\uFF0C \u9664\u975E\u5F88\u6709\u5FC5\u8981\u5426\u5219\u4E0D\u8981\u8FD9\u4E48\u505A\u3002</li><li>\u6570\u7EC4\u7684\u957F\u5EA6\u662F\u4E0D\u53EF\u53D8\u7684\uFF0C\u52A8\u6001\u7684\u6570\u7EC4\u79F0\u4E3AVec (vector)\uFF0C\u53EF\u4EE5\u4F7F\u7528\u5B8F<code>vec!</code>\u521B\u5EFA\u3002</li><li>\u5143\u7EC4\u53EF\u4EE5\u4F7F\u7528<code>==</code>\u548C<code>!=</code>\u8FD0\u7B97\u7B26\u6765\u5224\u65AD\u662F\u5426\u76F8\u540C\u3002</li><li>\u4E0D\u591A\u4E8E32\u4E2A\u5143\u7D20\u7684\u6570\u7EC4\u548C\u4E0D\u591A\u4E8E12\u4E2A\u5143\u7D20\u7684\u5143\u7EC4\u5728\u503C\u4F20\u9012\u65F6\u662F\u81EA\u52A8\u590D\u5236\u7684\u3002</li><li>Rust\u4E0D\u63D0\u4F9B\u539F\u751F\u7C7B\u578B\u4E4B\u95F4\u7684\u9690\u5F0F\u8F6C\u6362\uFF0C\u53EA\u80FD\u4F7F\u7528<code>as</code>\u5173\u952E\u5B57\u663E\u5F0F\u8F6C\u6362\u3002</li><li>\u53EF\u4EE5\u4F7F\u7528<code>type</code>\u5173\u952E\u5B57\u5B9A\u4E49\u67D0\u4E2A\u7C7B\u578B\u7684\u522B\u540D\uFF0C\u5E76\u4E14\u5E94\u8BE5\u91C7\u7528\u9A7C\u5CF0\u547D\u540D\u6CD5\u3002</li></ul><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">// explicit conversion</span>
<span class="token keyword">let</span> decimal <span class="token operator">=</span> <span class="token number">65.4321_f32</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> integer <span class="token operator">=</span> decimal <span class="token keyword">as</span> <span class="token keyword">u8</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> character <span class="token operator">=</span> integer <span class="token keyword">as</span> <span class="token keyword">char</span><span class="token punctuation">;</span>

<span class="token comment">// type aliases</span>
<span class="token keyword">type</span> <span class="token type-definition class-name">NanoSecond</span> <span class="token operator">=</span> <span class="token keyword">u64</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token type-definition class-name">Point</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">u8</span><span class="token punctuation">,</span> <span class="token keyword">u8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,27);function e(t,o){return p}var r=s(a,[["render",e],["__file","primitive-type.html.vue"]]);export{r as default};
