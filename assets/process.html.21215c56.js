import{c as n}from"./app.a489c551.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h1 id="\u7CFB\u7EDF\u547D\u4EE4-\u8C03\u7528grep" tabindex="-1"><a class="header-anchor" href="#\u7CFB\u7EDF\u547D\u4EE4-\u8C03\u7528grep" aria-hidden="true">#</a> \u7CFB\u7EDF\u547D\u4EE4:\u8C03\u7528grep</h1><p>\u6211\u4EEC\u77E5\u9053\uFF0CLinux\u7CFB\u7EDF\u4E2D\u6709\u4E00\u4E2A\u547D\u4EE4\u53EBgrep\uFF0C\u4ED6\u80FD\u5BF9\u76EE\u6807\u6587\u4EF6\u8FDB\u884C\u5206\u6790\u5E76\u67E5\u627E\u76F8\u5E94\u5B57\u7B26\u4E32\uFF0C\u5E76\u8BE5\u5B57\u7B26\u4E32\u6240\u5728\u884C\u8F93\u51FA\u3002 \u4ECA\u5929\uFF0C\u6211\u4EEC\u5148\u6765\u5199\u4E00\u4E2ARust\u7A0B\u5E8F\uFF0C\u6765\u8C03\u7528\u4E00\u4E0B\u8FD9\u4E2A grep \u547D\u4EE4</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>process<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span>args<span class="token punctuation">;</span>

<span class="token comment">// \u5B9E\u73B0\u8C03\u7528grep\u547D\u4EE4\u641C\u7D22\u6587\u4EF6</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> arg_iter <span class="token operator">=</span> <span class="token function">args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// panic if there is no one</span>
    arg_iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> pattern <span class="token operator">=</span> arg_iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> pt <span class="token operator">=</span>  arg_iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token string">&quot;./&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token class-name">Command</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;/usr/bin/grep&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token string">&quot;-n&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token string">&quot;-r&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pattern<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pt<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">unwrap_or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;wg panic because:{}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;output:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> st <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from_utf8_lossy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>output<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> lines <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>\u770B\u8D77\u6765\u597D\u50CF\u8FD8\u4E0D\u9519\uFF0C\u4F46\u662F\uFF0C\u4EE5\u4E0A\u7684\u7A0B\u5E8F\u6709\u4E00\u4E2A\u6BD4\u8F83\u81F4\u547D\u7684\u7F3A\u70B9\u2014\u2014\u56E0\u4E3AOutput\u662F\u540C\u6B65\u7684\uFF0C\u56E0\u6B64\uFF0C\u4E00\u65E6\u8C03\u7528\u7684\u76EE\u5F55\u4E0B\u6709\u5DE8\u5927\u7684\u6587\u4EF6\uFF0Cgrep\u7684\u5206\u6790\u5C06\u5360\u7528\u5DE8\u91CF\u7684\u65F6\u95F4\u3002\u8FD9\u5BF9\u4E8E\u4E00\u4E2A\u9AD8\u53EF\u7528\u7684\u7A0B\u5E8F\u6765\u8BF4\u662F\u4E0D\u88AB\u5141\u8BB8\u7684\u3002</p><p>\u90A3\u4E48\u5982\u4F55\u6539\u8FDB\u5462\uFF1F</p><p>\u5176\u5B9E\u5728\u4E0A\u9762\u7684\u4EE3\u7801\u4E2D\uFF0C\u6211\u4EEC\u9690\u85CF\u4E86\u4E00\u4E2A <code>Child</code> \u7684\u6982\u5FF5\uFF0C\u5373\u2014\u2014\u5B50\u8FDB\u7A0B\u3002</p><p>\u4E0B\u9762\u6211\u6765\u6F14\u793A\u600E\u4E48\u64CD\u4F5C\u5B50\u8FDB\u7A0B\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>process<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span>args<span class="token punctuation">;</span>

<span class="token comment">// \u5B9E\u73B0\u8C03\u7528grep\u547D\u4EE4\u641C\u7D22\u6587\u4EF6</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> arg_iter <span class="token operator">=</span> <span class="token function">args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// panic if there is no one</span>
    arg_iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> pattern <span class="token operator">=</span> arg_iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> pt <span class="token operator">=</span>  arg_iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token string">&quot;./&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> child <span class="token operator">=</span> <span class="token class-name">Command</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;grep&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token string">&quot;-n&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token string">&quot;-r&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pattern<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pt<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u505A\u4E9B\u5176\u4ED6\u7684\u4E8B\u60C5</span>
    <span class="token namespace">std<span class="token punctuation">::</span>thread<span class="token punctuation">::</span></span><span class="token function">sleep_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;\u8BA1\u7B97\u5F88\u8D39\u65F6\u95F4\u2026\u2026&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> out <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">wait_with_output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> out_str <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from_utf8_lossy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>out<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> out_str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>\u4F46\u662F\uFF0C\u8FD9\u4E2A\u4F8B\u5B50\u548C\u6211\u4EEC\u9884\u671F\u7684\u5E76\u4E0D\u592A\u4E00\u6837\uFF01</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>./demo main /home/wayslog/rust/demo/src
/home/wayslog/rust/demo/src/main.rs:5:fn main() {
/home/wayslog/rust/demo/src/main.rs:9:    let pattern = arg_iter.next().unwrap_or(&quot;main&quot;.to_string());
\u8BA1\u7B97\u5F88\u8D39\u65F6\u95F4\u2026\u2026

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u4E3A\u4EC0\u4E48\u5462\uFF1F</p><p>\u5F88\u7B80\u5355\uFF0C\u6211\u4EEC\u77E5\u9053\uFF0C\u5728Linux\u4E2D\uFF0C<code>fork</code>\u51FA\u6765\u7684\u51FD\u6570\u4F1A\u7EE7\u627F\u7236\u8FDB\u7A0B\u7684\u6240\u6709\u53E5\u67C4\u3002\u56E0\u6B64\uFF0C\u5B50\u8FDB\u7A0B\u4E5F\u5C31\u4F1A\u7EE7\u627F\u7236\u8FDB\u7A0B\u7684\u6807\u51C6\u8F93\u51FA\uFF0C\u4E5F\u5C31\u662F\u9020\u6210\u4E86\u8FD9\u6837\u7684\u95EE\u9898\u3002\u8FD9\u4E5F\u662F\u6700\u540E\u6211\u4EEC\u7528out\u65E0\u6CD5\u63A5\u6536\u5230\u6700\u540E\u7684\u8F93\u51FA\u4E5F\u5C31\u77E5\u9053\u4E86\uFF0C\u56E0\u4E3A\u5728\u524D\u9762\u5DF2\u7ECF\u88AB\u8F93\u51FA\u51FA\u6765\u4E86\u5440\uFF01</p><p>\u90A3\u4E48\u600E\u4E48\u505A\u5462\uFF1F\u7ED9\u8FD9\u4E2A\u5B50\u8FDB\u7A0B\u4E00\u4E2Apipeline\u5C31\u597D\u4E86\uFF01</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>process<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span>args<span class="token punctuation">;</span>

<span class="token comment">// \u5B9E\u73B0\u8C03\u7528grep\u547D\u4EE4\u641C\u7D22\u6587\u4EF6</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> arg_iter <span class="token operator">=</span> <span class="token function">args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// panic if there is no one</span>
    arg_iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> pattern <span class="token operator">=</span> arg_iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> pt <span class="token operator">=</span>  arg_iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token string">&quot;./&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> child <span class="token operator">=</span> <span class="token class-name">Command</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;grep&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token string">&quot;-n&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token string">&quot;-r&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pattern<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pt<span class="token punctuation">)</span>
        <span class="token comment">// \u8BBE\u7F6Epipeline</span>
        <span class="token punctuation">.</span><span class="token function">stdout</span><span class="token punctuation">(</span><span class="token class-name">Stdio</span><span class="token punctuation">::</span><span class="token function">piped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u505A\u4E9B\u5176\u4ED6\u7684\u4E8B\u60C5</span>
    <span class="token namespace">std<span class="token punctuation">::</span>thread<span class="token punctuation">::</span></span><span class="token function">sleep_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;\u8BA1\u7B97\u5F88\u8D39\u65F6\u95F4\u2026\u2026&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> out <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">wait_with_output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> out_str <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from_utf8_lossy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>out<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> out_str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>\u8FD9\u6BB5\u4EE3\u7801\u76F8\u5F53\u4E8E\u7ED9\u4E86<code>stdout</code>\u4E00\u4E2A\u7F13\u51B2\u533A\uFF0C\u8FD9\u4E2A\u7F13\u51B2\u533A\u76F4\u5230\u6211\u4EEC\u8BA1\u7B97\u5B8C\u6210\u4E4B\u540E\u624D\u88AB\u8BFB\u53D6\uFF0C\u56E0\u6B64\u5C31\u4E0D\u4F1A\u9020\u6210\u4E71\u5E8F\u8F93\u51FA\u7684\u95EE\u9898\u4E86\u3002</p><p>\u8FD9\u8FB9\u9700\u8981\u6CE8\u610F\u7684\u4E00\u70B9\u662F\uFF0C\u4E00\u65E6\u4F60\u5F00\u542F\u4E86\u4E00\u4E2A\u5B50\u8FDB\u7A0B\uFF0C\u90A3\u4E48\uFF0C\u65E0\u8BBA\u4F60\u7A0B\u5E8F\u662F\u600E\u4E48\u5904\u7406\u7684\uFF0C\u6700\u540E\u4E00\u5B9A\u8981\u8BB0\u5F97\u5BF9\u8FD9\u4E2A<code>child</code>\u8C03\u7528<code>wait</code>\u6216\u8005<code>wait_with_output</code>\uFF0C\u9664\u975E\u4F60\u663E\u5F0F\u5730\u8C03\u7528<code>kill</code>\u3002\u56E0\u4E3A\u5982\u679C\u7236\u8FDB\u7A0B\u4E0D<code>wait</code>\u5B83\u7684\u8BDD\uFF0C\u5B83\u5C06\u4F1A\u53D8\u6210\u4E00\u4E2A\u50F5\u5C38\u8FDB\u7A0B\uFF01\uFF01\uFF01</p><p><em>\u6CE8</em>\uFF1A \u4EE5\u4E0A\u95EE\u9898\u4E3ALinux\u4E0BPython\u591A\u8FDB\u7A0B\u7684\u65E5\u5E38\u95EE\u9898\uFF0C\u5DF2\u7ECF\u89C1\u602A\u4E0D\u602A\u4E86\u3002</p>`,17);function t(o,c){return p}var l=s(a,[["render",t],["__file","process.html.vue"]]);export{l as default};
